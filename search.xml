<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[jQuery学习（css样式操作）]]></title>
    <url>%2F2019%2F05%2F12%2FjQuery%E5%AD%A6%E4%B9%A0%EF%BC%88css%E6%A0%B7%E5%BC%8F%E6%93%8D%E4%BD%9C%EF%BC%89%2F</url>
    <content type="text"><![CDATA[前言 这次学了jQuery关于css样式的操作，通过jQuery的方法给元素添加修改样式以及改变和获取元素的各种宽高。 操作css样式 css(name|pro|[,val|fn])方法格式1:DOM元素.css(“样式名称”, “值”);格式2:DOM元素.css({“样式名称1”:”值1”,”样式名称2”:”值2”}); 123456789101112131415&lt;body&gt;&lt;script&gt;$(function()&#123; var $test=$('.test'); $test.css('height','100px').css('outline','1px solid red'); // 这是第一种写法，添加多个css样式 $('.test').css(&#123; 'width':'200px', 'font-size':'30px', // 这是第二种添加css样式的方法 &#125;);&#125;)&lt;/script&gt;&lt;div class="test"&gt;这是一个测试div&lt;/div&gt;&lt;/body&gt; 操作尺寸width([val|fn])方法1234567891011121314&lt;body&gt;&lt;script&gt;$(function()&#123; var $test=$('.test'); console.log($test.width()); // 获取到数值为1520 $test.width('200px'); // 设置元素宽度为200px console.log($test.width()); // 结果为200&#125;)&lt;/script&gt;&lt;div class="test"&gt;这是一个测试div&lt;/div&gt;&lt;/body&gt; height([val|fn])方法 用法与效果与width方法一致 innerHeight()/innerWidth()获取第一个匹配元素内部区域高度/宽度（包括补白、不包括边框）。 outerHeight/outerWidth() 获取第一个匹配元素外部高度（默认包括补白和边框）。 设置为 true 时，计算边距在内。1234567891011121314&lt;body&gt;&lt;script&gt;$(function()&#123; var $test=$('.test'); console.log($test.outerHeight()); // 21 console.log($test.height()); // 21 console.log($test.outerHeight(true)); // 填入参数true时会获取边距的数值，此时设置了外边距，值为41 &#125;)&lt;/script&gt;&lt;div class="test"&gt;这是一个测试div&lt;/div&gt;&lt;/body&gt; 操作和获取元素位置offset([coordinates]) 获取或设置元素相对窗口的偏移位123456789101112131415161718192021&lt;style&gt;.test&#123; margin-top: 2000px; outline: 1px solid red; height: 20px;&#125;&lt;/style&gt;&lt;body&gt;&lt;script&gt;$(function()&#123; var $test=$('.test'); console.log($test.offset().top); // 获取到值为2000 $test.offset(&#123;top:200,left:200&#125;); console.log($test.offset()); // [object Object]: &#123;left: 200, top: 200&#125;，位置成功发生变化 &#125;)&lt;/script&gt;&lt;div class="test"&gt;这是一个测试div&lt;/div&gt;&lt;/body&gt; position()获取匹配元素相对父元素的偏移。返回的对象包含两个整型属性：top 和 left。为精确计算结果，请在补白、边框和填充属性上使用像素单位。此方法只对可见元素有效。12345678910111213141516171819202122232425&lt;style&gt;.test&#123; /* margin-top: 2000px; */ outline: 1px solid red; height: 20px; position: absolute; top: 20px; left: 20px;&#125;.father&#123; position: relative;&#125;&lt;/style&gt;&lt;body&gt;&lt;script&gt;$(function()&#123; var $test=$('.test'); console.log($test.position()); // 成功获取到了绝对定位的数值20，20 &#125;)&lt;/script&gt;&lt;div class="father"&gt;&lt;div class="test"&gt;这是一个测试div&lt;/div&gt;&lt;/div&gt;&lt;/body&gt; scrollTop([val])与scrollLeft([val])获取匹配元素相对滚动条顶部的偏移。此方法对可见和隐藏元素均有效。下面以scrollTo()为例：123456789101112131415161718192021222324252627282930313233&lt;style&gt;.test&#123; margin-top: 2000px; outline: 1px solid red; height: 20px; position: absolute; top: 20px; left: 20px;&#125;button&#123; margin-top: 200px;&#125;&lt;/style&gt;&lt;body&gt;&lt;script&gt;$(function()&#123; console.log($('html').scrollTop()+$('body').scrollTop()); // 当拖动滚轮，点击按钮获取数值，数值能够正确显示。 $('button').eq(0).click(function()&#123; alert(($('html').scrollTop()+$('body').scrollTop())); // 兼容处理，保证所有浏览器都能正确获取数值&#125;); $('button').eq(1).click(function()&#123; $('html').scrollTop(300)+$('body').scrollTop(300);&#125;);&#125;)&lt;/script&gt;&lt;div class="father"&gt;&lt;div class="test"&gt;这是一个测试div&lt;/div&gt;&lt;/div&gt;&lt;button&gt;显示scrolltop&lt;/button&gt;&lt;button&gt;设置scrolltop&lt;/button&gt;&lt;/body&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[关于css选择器的一个小小的问题]]></title>
    <url>%2F2019%2F05%2F12%2F%E5%85%B3%E4%BA%8Ecss%E9%80%89%E6%8B%A9%E5%99%A8%E7%9A%84%E4%B8%80%E4%B8%AA%E5%B0%8F%E5%B0%8F%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[前言 昨天在写一个页面的时候，写到css样式的时候，出现了一个问题,让我有一开始有点想不明白，后面想明白了，记录一下。 问题情况： 这是html代码 12345&lt;div class="father"&gt; &lt;ul&gt; &lt;li class="son"&gt;&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt; 这是css代码 123456789101112.father ul li&#123; display:none; /* 此时这个div块中的所有内容都将不显示 */&#125;.son&#123; display:block; /* 起初我认为此时这个li中放的所有内容都应该显示，但是我在li中放的图片并没有显示，我就去查看控制台的样式，发现在这个li中的样式是有block这个属性但是并没有生效。 */&#125;.father ul .son&#123; display:block; /* 后面我尝试着这样写，却发现这下图片就显示出来了 ，随后并猜测是选择器优先级的问题，随即查阅资料，发现组合选择器的优先级为成员选择器的权重相加，只写一个类选择器干不过上面的多个选择器权重相加，所以多组合一些就好了，或者用!important 来拉满。*/&#125; 总结虽然以前看到过选择器优先级相关的知识，但是还没有接触过很多这种情况，以后要注意！]]></content>
  </entry>
  <entry>
    <title><![CDATA[jQuery学习（核心函数）]]></title>
    <url>%2F2019%2F05%2F10%2FjQuery%E5%AD%A6%E4%B9%A0%EF%BC%88%E6%A0%B8%E5%BF%83%E5%87%BD%E6%95%B0%EF%BC%89%2F</url>
    <content type="text"><![CDATA[前言 记录了jQuery的核心函数以及jQuery对象，jQuery的静态方法的使用。 jQuery核心函数jQuery核心函数一共3大类4小类 jQuery(callback)当DOM加载完成后执行传入的回调函数 jQuery([sel,[context]])接收一个包含 CSS 选择器的字符串，然后用这个字符串去匹配一组元素,并包装成jQuery对象,也就是jQuery的选择器。 jQuery(html,[ownerDoc])根据 HTML 标记字符串，动态创建DOM 元素 12345678910111213141516&lt;script&gt;$(function()&#123; var $text=$("&lt;p&gt;这是一段文字&lt;/p&gt;"); $("body").append($text);&#125;);&lt;/script&gt;``` ### jQuery对象* jQuery对象的本质是什么? jQuery对象的本质是一个伪数组```html&lt;script&gt; var $div = $('div'); console.log($div); // [object Object]: &#123;0: Object, context: Object, length: 1, prevObject: Object, selector: "div"&#125;&lt;/script&gt; 什么是伪数组?有0到length-1的属性,并且有length属性 jQuery静态方法 什么是静态方法?静态方法对应的是对象方法,对象方法用实例对象调用,而静态方法用类名调用 jQuery.holdReady(hold)暂停或者恢复jQuery.ready()事件传入true或false1234567891011121314151617181920&lt;script&gt; // 使用$直接调用,是静态方法 $.holdReady(true); // 暂停住了 $(function () &#123; $("#first").click(function () &#123; alert("我是你想要的弹窗"); &#125;); &#125;); &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;button id="first"&gt;点击测试弹出&lt;/button&gt;&lt;button id="second"&gt;解除延迟&lt;/button&gt;&lt;script&gt; $("#second").click(function()&#123; $.holdReady(false); // 单击会触发这个，然后恢复 &#125;);&lt;/script&gt; $.each(object,[callback])遍历对象或数组优点统一遍历对象和数组的方式回调参数的顺序更符合我们的思维模式 $.map(arr|obj,callback)遍历对象或数组,将回调函数的返回值组成一个新的数组返回 $.trim(str)去掉字符串起始和结尾的空格。 $.isArray(obj)判断是否是数组 $.isFunction(obj)判断是否是函数 $.isWindow(obj)判断是否是window对象]]></content>
  </entry>
  <entry>
    <title><![CDATA[jQuery学习（入口函数与冲突问题）]]></title>
    <url>%2F2019%2F05%2F10%2FjQuery%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%85%A5%E5%8F%A3%E5%87%BD%E6%95%B0%E4%B8%8E%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98%EF%BC%89%2F</url>
    <content type="text"><![CDATA[前言 jQuery入口函数与原声js入口函数的区别，以及解决冲突问题，还有一些小细节，帮助我学习。 jQuery入口函数 多个window.onload只会执行一次, 后面的会覆盖前面的 多个$(document).ready()会执行多次,后面的不会覆盖前面的 不会覆盖的本质(了解,后面jQuery原理会详细讲解)jQuery框架本质是一个闭包,每次执行我们都会给ready函数传递一个新的函数,不同函数内部的数据不会相互干扰 window.onload $(document).ready() 执行时机 必须等待网页全部加载完毕(包括 图片等),然后再执行包裹代码 只需要等待网页中的DOM结构 加载完毕,就能执行包裹的代码 执行次数 只能执行一次,如果第二次,那么 第一次的执行会被覆盖 可以执行多次,第N次都不会被上 一次覆盖 简写方案 无 $(function () { }); 解决$符号冲突问题 为什么是window.jQuery = window.$ = jQuery;,而不是window.jQuery = jQuery; jQuery框架之所以提供了jQuery访问还提供$访问,就是为了提升开发者的编码效率 $符号冲突怎么办? 很多js的框架都提供了类似jQuery这样的便捷访问方式,所以很有可能某一天我们在使用多个框架的时,多个框架作者提供的便捷访问方式冲突(A框架通过$访问,B框架也通过$访问) ***释放$使用权 当便捷访问符号发生冲突时,我们可以释放$使用权, 释放之后只能使用jQuery]]></content>
  </entry>
  <entry>
    <title><![CDATA[jQuery学习（介绍与使用）]]></title>
    <url>%2F2019%2F05%2F10%2FjQuery%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%89%2F</url>
    <content type="text"><![CDATA[前言 对于前端来说，学习掌握jQuery是基础，则将会是我学习jQuery的记录。jQuery中文文档：http://hemin.cn/jq/。 jQuery是什么？ jQuery是一款优秀的JavaScript库，从命名可以看出jQuery最主要的用途是用来做查询（jQuery=js+Query）. 在jQuery官方Logo下方还有一个副标题（write less, do more）, 体现了jQuery除了查询以外,还能让我们对HTML文档遍历和操作、事件处理、动画以及Ajax变得更加简单 为什么要使用jQuery？ 强大选择器: 方便快速查找DOM元素如上面实例所展示一样，通过jQuery查找DOM元素要比原生js快捷很多jQuery允许开发者使用CSS1-CSS3几乎所有的选择器,以及jQuery独创的选择器 以下是一段jQuery代码：1234567891011121314151617&lt;body&gt; &lt;div class="test1"&gt;这是1&lt;/div&gt; &lt;div&gt;这是0&lt;/div&gt; &lt;div id="test2"&gt;这是2&lt;/div&gt; &lt;script&gt; $(document).ready(function()&#123; $(".test1").css('width','100px').css('height','200px'); $("#test2").css('background','blue'); // 读取数据 var $tx = $("div").eq(0).text(); alert($tx); // 写入数据 $("div").eq(0).text("新的数据"); &#125;); &lt;/script&gt;&lt;/body&gt; 通过以上代码可以看出，jQuery查找元素要快的多，方便的多，并且jQuery可以不断的调用jQuery对象的方法，并且可以一次操作。读取数据也是一个函数，使用比较方便 事件处理 DOM操作(C增U改D删) 样式操作 动画 丰富的插件支持 浏览器兼容(前端开发者痛点) 如何使用jQuery？下载过后这样调用就可以了：1&lt;script src="../jquery-1.12.4.js"&gt;&lt;/script&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[关于classList的使用]]></title>
    <url>%2F2019%2F05%2F10%2F%E5%85%B3%E4%BA%8EclassList%E7%9A%84%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[前言 关于classList的学习总结，作为DOMTokenList对象该属性用于在元素中添加、移出、切换css类，使用classList可以实现十分多的功能，十分的有用，以下是我的学习笔记。 语法：elem.classList方法：add( String[,String])：添加指定的类值。如果这些类已经存在于元素的属性中，那么他们将被忽略remove(String[,String])：删除指定的类值item(Number)：按集合中的索引返回类值toggle(String[,force])： 当只有一个参数的时，切换class value ，即如果类存在，删除它，并返回false，如果类不存在，则添加它并返回true。 当存在第二个参数时，如果第二个参数的计算结果为true，则添加指定的类值，如果计算结果为false，则删除它 contains(string)：检查元素的类属性中是否存在指定的类值属性：length：返回类列表中类的数量，该属性是只读的 下面是利用classList实现标签栏切换的一个小例子：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980&lt;style&gt; div &#123; width: 500px; margin: 10px; &#125; .db&#123; height: 50px; width: 300px; margin: 0 auto; border: none; &#125; .dh&#123; background: #666; height: 25px; width: 300px; margin: 0 auto; color: white; text-align: center; border: none; &#125; .dhd&#123; margin: 0 0px; width: 100px; float: left; margin-top: 3px; &#125; .dbd&#123; width: 100px; height: 50px; float: left; margin: 0 0px; display: none; width: 300px; &#125; .current&#123; display: block; background: white; color: black; &#125; .ttt&#123; border: 1px solid black; width: 300px; &#125;&lt;/style&gt;&lt;body&gt; &lt;div class="ttt"&gt; &lt;div class='dh'&gt; &lt;div class="dhd current"&gt;标签栏一&lt;/div&gt; &lt;div class="dhd"&gt;标签栏二&lt;/div&gt; &lt;div class="dhd"&gt;标签栏三&lt;/div&gt; &lt;/div&gt; &lt;div class='db'&gt; &lt;div class="dbd current"&gt;这是内容一&lt;/div&gt; &lt;div class="dbd"&gt;这是内容二&lt;/div&gt; &lt;div class="dbd"&gt;这是内容三&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;script&gt; // 利用classList的方法给当前元素添加样式让其显示，其他元素默认不显示，以达到切换效果 var hs=document.getElementsByClassName('dhd'); var ds=document.getElementsByClassName('dbd'); for(var i=0;i&lt;hs.length;i++)&#123; hs[i].onmouseover=function()&#123; for(var i=0;i&lt;ds.length;i++)&#123; if(hs[i]==this)&#123; ds[i].classList.add('current'); hs[i].classList.add('current'); &#125; else&#123; ds[i].classList.remove('current'); hs[i].classList.remove('current'); &#125; &#125; &#125; &#125; &lt;/script&gt;&lt;/body&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[html中的块级元素与行级元素]]></title>
    <url>%2F2019%2F05%2F10%2Fhtml%E4%B8%AD%E7%9A%84%E5%9D%97%E7%BA%A7%E5%85%83%E7%B4%A0%E4%B8%8E%E8%A1%8C%E7%BA%A7%E5%85%83%E7%B4%A0%2F</url>
    <content type="text"><![CDATA[前言 在最开始的时候没有清除的认识到块级元素与行级元素的差别，也没有想到二者之间有如此大的差别，以及二者之间的关系以下是我对二者的学习总结： 块级元素和行内元素的定义块级元素： 总是在新行上开始； 高度，行高以及外边距和内边距都可控制； 宽度缺省是它的容器的100%，除非设定一个宽度。 它可以容纳内联元素和其他块元素 行内元素？ 和其他元素都在一行上； 高，行高及外边距和内边距不可改变； 宽度就是它的文字或图片的宽度，不可改变 内联元素只能容纳文本或者其他内联元素 对行内元素，需要注意如下： 设置宽度width 无效。 设置高度height 无效，可以通过line-height来设置。 设置margin 只有左右margin有效，上下无效。 设置padding 只有左右padding有效，上下则无效。注意元素范围是增大了，但是对元素周围的内容是没影响的。 可以通过display对二者进行调整display属性表： 值 描述 none 此元素不会被显示。 block 此元素将显示为块级元素，此元素前后会带有换行符。 inline 默认。此元素会被显示为内联元素，元素前后没有换行符。 inline-block 行内块元素。（CSS2.1 新增的值） list-item 此元素会作为列表显示。 run-in 此元素会根据上下文作为块级元素或内联元素显示。 compact CSS 中有值 compact，不过由于缺乏广泛支持，已经从 CSS2.1 中删除。 marker CSS 中有值 marker，不过由于缺乏广泛支持，已经从 CSS2.1 中删除。 table 此元素会作为块级表格来显示（类似 &lt;table&gt;），表格前后带有换行符。 inline-table 此元素会作为内联表格来显示（类似 &lt;table&gt;），表格前后没有换行符。 table-row-group 此元素会作为一个或多个行的分组来显示（类似 &lt;tbody&gt;）。 table-header-group 此元素会作为一个或多个行的分组来显示（类似 &lt;thead&gt;）。 table-footer-group 此元素会作为一个或多个行的分组来显示（类似 &lt;tfoot&gt;）。 table-row 此元素会作为一个表格行显示（类似 &lt;tr&gt;）。 table-column-group 此元素会作为一个或多个列的分组来显示（类似 &lt;colgroup&gt;）。 table-column 此元素会作为一个单元格列显示（类似 &lt;col&gt;） table-cell 此元素会作为一个表格单元格显示（类似 &lt;td&gt; 和 &lt;th&gt;） table-caption 此元素会作为一个表格标题显示（类似 &lt;caption&gt;） inherit 规定应该从父元素继承 display 属性的值。 这是一个小测试：123456789101112131415161718192021222324252627282930&lt;style&gt; div&#123; border: 1px solid blue; margin-bottom: 10px; &#125; span&#123; border: 1px solid red; height: 50px; margin: 40px; /* 可以发现对span这个行内元素设置了height属性但是其并没有生效 设置了margin，但只有左右margin生效，padding同理。 */ &#125; .div3&#123; display: inline; /* 将其设为行内元素，其只拥有行内元素的特性 */ &#125; .div4&#123; display: inline-block; /* 将其设置为行内块级元素，兼具二者特性 */ height: 50px; &#125;&lt;/style&gt;&lt;body&gt;&lt;div&gt;这是第一个div:div是块级元素，默认宽度是100%,可以设置宽度与高度，默认自动占一行&lt;/div&gt;&lt;div&gt;这是第二个div&lt;span&gt;这是一个块级元素:大小只与内容有关，不可以设置宽度与高度，但能设置行高，默认不占一行&lt;/span&gt;&lt;/div&gt;&lt;div"&gt;这是第三个div：通过display:inline将其变为行内元素&lt;/div&gt;&lt;div"&gt;这是第四个div:通过display:inline-block将其变为行内块级元素，兼具二者特性&lt;/div&gt;&lt;/body&gt; 效果图： 以上就是我的学习总结。]]></content>
  </entry>
  <entry>
    <title><![CDATA[一个简单的网页二级菜单]]></title>
    <url>%2F2019%2F05%2F09%2F%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E7%BD%91%E9%A1%B5%E4%BA%8C%E7%BA%A7%E8%8F%9C%E5%8D%95%2F</url>
    <content type="text"><![CDATA[前言 网页二级菜单十分常见，我学习到了写法，以下是我写的一个简单的demo当作练习，以及原理说明。 CSS代码12345678910111213.menu&#123; list-style: none;&#125;.menu&gt;li&#123; float: left;&#125;li&gt;ul&#123; display: none;&#125;.menu&gt;li:hover&gt;ul&#123; display: block;&#125; 实现二级菜单的主要原理部分还是在css部分，先将所有的二级菜单的内容通过display隐藏，当鼠标经过一级菜单则将二级菜单的内容显示出来。 html代码123456789101112131415161718192021222324252627&lt;body&gt; &lt;ul class="menu"&gt; &lt;li&gt;&lt;a href="#"&gt;菜单一&lt;/a&gt; &lt;ul&gt; &lt;li&gt;测试a1&lt;/li&gt; &lt;li&gt;测试a2&lt;/li&gt; &lt;li&gt;测试a3&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;a href="#"&gt;菜单二&lt;/a&gt; &lt;ul&gt; &lt;li&gt;测试b1&lt;/li&gt; &lt;li&gt;测试b2&lt;/li&gt; &lt;li&gt;测试b3&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;a href="#"&gt;菜单三&lt;/a&gt; &lt;ul&gt; &lt;li&gt;测试c1&lt;/li&gt; &lt;li&gt;测试c2&lt;/li&gt; &lt;li&gt;测试c3&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt;&lt;/body&gt; 效果图&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[css选择器总结]]></title>
    <url>%2F2019%2F05%2F08%2Fcss%E9%80%89%E6%8B%A9%E5%99%A8%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[前言 在编写css代码时合理使用选择器有助于提升编写效率以及缩短代码量，所以对常用的选择器熟练使用是十分有必要的，以下为一些选择器的使用总结。 基础的一些选择器标签选择器，以标签名作为选择器名类选择器，通过”.”+类名作为选择器名称如：.testid选择器，通过”#”+类名作为选择器名称如：#test 交集选择器标记选择器+类选择器或id选择器，中间不能有任何的空格如：p.aaa或p#aaa注意：后代选择器作用于所有后代。（与子代选择器的区分） 后代选择器：由两个标记选择器组成，第一个为父级，第二个为子代，中间一定要有空格div p注意：子代选择器作用于所有后代。（与后代选择器的区分） 子代选择器此时选择到的是作为子代的p 子代选择器与后代选择器的区别，子代选择器只作用于后一代，后代选择器作用于所有后代div&gt;p 并集选择器：由若干个任意选择器组成，由逗号分隔开可以同时对多个目标生效。h1,.aaa,#bbb 属性选择器假设有html代码：1&lt;input name="test" placeholder="初始值" class="test" id="test" type="text" value=""&gt; E[att^=value] E可以省略，满足 属性值 等于valueinput[name^=test]E[att$=value] E可以省略，满足 属性值后缀 等于valueinput[name$=st]E[att*=value] E可以省略，满足 属性值包含 valueinput[name*=es] 兄弟选择器p+h2 选择到的是p后面的 相邻的 h2p~h2 选择到的是p后面的 不一定相邻的 h2 伪类选择器：:root 该选择器对页面所有元素的生效，可以用其他选择器将其覆盖:not 该选择器可以将选定内容排除在大选择器之外（body :not(p)）此时选择器就不会选择到p标记。冒号之前必须有空格 伪元素选择器：:first-letter 向文本的第一个字母添加样式:first-line 向文本的首行添加特殊样式。:before 在元素之前添加内容。:after 在元素之后添加内容。 链接伪类：a:link 未访问时的状态a:visited 访问后的状态a:active 鼠标单击不动时的状态a:hover 悬停时的状态 关于选择器的优先级比较同一级别的个数，数量多的优先级高，如果相同即比较下一级别的个数important &gt; 内联 &gt; ID &gt; 类 &gt; 标签 | 伪类 | 属性选择 &gt; 伪对象 &gt; 通配符 &gt; 继承]]></content>
  </entry>
  <entry>
    <title><![CDATA[markdown基本语法(在hexo中的使用)]]></title>
    <url>%2F2019%2F03%2F11%2Fmarkdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[前言 hexo使用markdown来书写博客，所以熟悉了解markdown十分有必要，这是markdown在hexo中的使用,这里介绍markdown的基础以及在hexo中的应用。 一、标题12345# 这是一级标题## 这是二级标题### 这是三级标题#### 这是四级标题##### 这是五级标题 效果： 这是一级标题这是二级标题这是三级标题这是四级标题这是五级标题二、文字1234**这是加粗的文字** //用两个*将文字包起即加粗*这是斜体文字* //用一个*将文字包起即斜体***这是加粗同时斜体的文字*** //用三个*将文字包起即加粗斜体 ~~这是加删除线的文字~~ //要加删除线的文字左右分别用两个~~号包起来 效果： 这是加粗的文字这是斜体文字这是加粗同时斜体的文字这是加删除线的文字 三、引用在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;n个…123&gt;这是引用的内容&gt;&gt;这是引用的内容&gt;&gt;&gt;这是引用的内容 效果： 这是引用的内容 这是引用的内容 这是引用的内容 四、分割线几种样式，效果一样1234-------******** 五、图片图片alt就是显示在图片下面的文字，相当于对图片内容的解释。图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加还可以用html标记来插入图片：1&lt;img width=200 src=&quot;../images/lm.jpg&quot;/&gt; 并且可以自定义大小但是hexo中使用以上两种方式会导致一些问题，所以在hexo中建议使用以下方法：1&#123;% asset_img example.jpg This is an example image %&#125; 六、超链接1[超链接名](超链接地址 &quot;超链接title&quot;) title可加可不加示例：1[百度](https://www.baidu.com) 百度一样的可以使用html标记来插入超链接： 百度并且可以设置在新窗口打开 七、列表无序：123- 列表内容+ 列表内容* 列表内容 注意：- + * 跟内容之间都要有一个空格 列表内容 列表内容 列表内容 用html标记也可以：12345&lt;ul&gt;&lt;li&gt;列表内容1&lt;/li&gt;&lt;li&gt;列表内容2&lt;/li&gt;&lt;li&gt;列表内容3&lt;/li&gt;&lt;/ul&gt; 有序：数字加点:1231. 列表内容2. 列表内容3. 列表内容 列表内容 列表内容 列表内容 注意：序号跟内容之间要有空格 八、表格1234表头|表头|表头---|:--:|---:内容|内容|内容内容|内容|内容 表头 表头 表头 内容 内容 内容 内容 内容 内容 第二行分割表头和内容。-有一个就行，为了对齐，多加了几个文字默认居左-两边加：表示文字居中-右边加：表示文字居右注：原生的语法两边都要用 | 包起来。此处省略同样，可以用html标记实现：12345&lt;table&gt;&lt;tr&gt;&lt;td&gt;表头&lt;/td&gt;&lt;td&gt;表头&lt;/td&gt;&lt;td&gt;表头&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;内容&lt;/td&gt;&lt;td&gt;内容&lt;/td&gt;&lt;td&gt;内容&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;内容&lt;/td&gt;&lt;td&gt;内容&lt;/td&gt;&lt;td&gt;内容&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; 表头表头表头内容内容内容内容内容内容 九、代码单行代码：代码之间分别用一个反引号包起来代码内容代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行123代码...在开头的三个反引号后面加上语言名称还可以显示对应高亮代码... 代码高亮 十、流程图由于hexo不支持流程图所以不做演示]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F12%2F02%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
