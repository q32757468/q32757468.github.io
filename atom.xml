<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ranshan丶</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://q32757468.github.io/"/>
  <updated>2019-12-07T10:38:36.071Z</updated>
  <id>https://q32757468.github.io/</id>
  
  <author>
    <name>hsl</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>自动识别输入学工平台验证码</title>
    <link href="https://q32757468.github.io/2019/12/07/%E8%87%AA%E5%8A%A8%E8%AF%86%E5%88%AB%E8%BE%93%E5%85%A5%E5%AD%A6%E5%B7%A5%E5%B9%B3%E5%8F%B0%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    <id>https://q32757468.github.io/2019/12/07/自动识别输入学工平台验证码/</id>
    <published>2019-12-07T08:51:55.000Z</published>
    <updated>2019-12-07T10:38:36.071Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最近登录学校的学工平台的官网的时候发现学校的网站有一定的年份了，包括验证码的机制也是非常的简单，那么也就意味着其实在如今这样简单的验证码机制已经不再安全了，其实不仅仅是我们学校的验证码使用的是比较老的技术，我也发现了其实还有很多的比较小并且比较老的网站使用的都是以前的验证码技术，所以我打算实现一个自动输入验证码的功能，这样配合浏览器的记住密码的功能每次登录就会非常的方便了。<br><a id="more"></a></p></blockquote><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p>在开始实现之前可以想看一下我们学校的学工平台的验证码有多么的简单：<br><img src="http://m.qpic.cn/psb?/V131x4904WMIoW/eMCmBN9i6exFBXdCW8O3Kn1wZ20LC3g*yKPeUQ.CaaY!/b/dE4BAAAAAAAA&bo=TgAbAAAAAAADF2c!&rf=viewer_4"><br>可以看出这样的验证码是非常的简单的，很简单的就可以通过肉眼就分辨出其中的数字。</p><p>那么基于这样的验证码我们需要做到自动识别并且完成输入那么非常的简单了：</p><ol><li><p>识别出验证码中的图像内容</p></li><li><p>将识别到的内容填充到验证码输入框中</p></li></ol><h3 id="如何实现"><a href="#如何实现" class="headerlink" title="如何实现"></a>如何实现</h3><p>思路是非常的简单,那么究竟该如何实现呢?</p><ol><li><p>首先我们是通过JS来实现,所以可以通过浏览器插件或者是油猴脚本的形式来向页面当中注入JS</p></li><li><p>识别图像内容<br>这里我找到了一个JS的图像识别的开源项目,可以通过这个项目来实现图像识别的功能。(项目地址:<a href="https://github.com/naptha/tesseract.js" target="_blank" rel="noopener">tesseract.js</a>)</p><p>但是在这之后我又遇到了一个问题,通过查看网页源代码可以发现我们学校学工平台中的验证码并不是一般的图像格式,而是一个<code>.html</code>文件,无法保存,虽然不知道是什么原理,但是直接识别肯定是不会成功的,所以需要想办法.<br><code>&lt;img style=&quot;border: none; display: none;&quot; border=&quot;0&quot; src=&quot;default3.html&quot;&gt;</code></p><p>那么换一种思路只需要将这个<code>.html</code>dom元素转化为一张真正的图像就可以了，该如何转换呢，这里就必须借助于 <code>html2canvas</code>这个项目了(<a href="https://github.com/niklasvh/html2canvas/" target="_blank" rel="noopener">项目地址</a>),这个工具可以将dom元素转化为canvas图像,从而就可以达到我们的目的。</p><p>之后我们就只需要对转化的得到的canvas图像进行图像识别就可以获得到我们想要的验证码了。</p><p>最后只需要将验证码填入相应的文本框就完美的实现了自动输入验证码的功能了。</p></li></ol><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//这里通过使用了promise来更加简便的调用</span></span><br><span class="line">  <span class="keyword">let</span> H2C = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 引入html2canvas</span></span><br><span class="line">    dynamicLoadJS(<span class="string">'http://html2canvas.hertzen.com/dist/html2canvas.min.js'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      resolve(<span class="string">"html2canvas加载完毕"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> Tes = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 引入tesseract</span></span><br><span class="line">    dynamicLoadJS(<span class="string">'https://unpkg.com/tesseract.js@v2.0.0-beta.1/dist/tesseract.min.js'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      resolve(<span class="string">"tesseract加载完毕"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Promise</span>.all([H2C, Tes]).then(<span class="function"><span class="keyword">function</span> (<span class="params">values</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 将原本的html文件转化为canvas图像</span></span><br><span class="line">    html2canvas(<span class="built_in">document</span>.querySelector(<span class="string">"img[src='default3.html']"</span>)).then(<span class="function"><span class="params">canvas</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">document</span>.querySelector(<span class="string">"img[src='default3.html']"</span>).parentNode.appendChild(canvas);</span><br><span class="line">      <span class="built_in">document</span>.querySelector(<span class="string">"img[src='default3.html']"</span>).style.display = <span class="string">"none"</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//对图像进行识别</span></span><br><span class="line">      Tesseract.recognize(canvas.toDataURL()).then(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> yzm = result.data.text;</span><br><span class="line">        yzm = yzm.replace(<span class="regexp">/[^0-9]/ig</span>, <span class="string">""</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(yzm);</span><br><span class="line">        <span class="comment">//将结果注入相应的文本框</span></span><br><span class="line">        <span class="built_in">document</span>.querySelector(<span class="string">"input[maxlength='5']"</span>).value = yzm;</span><br><span class="line">        <span class="built_in">console</span>.log(values);</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//这个函数的作用是动态的引入我们需要的那两个js库,并且接收两个参数,第一个参数是路径,第二个参数是一个回调函数,回调函数就是加载完毕后所要执行的内容</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dynamicLoadJS</span>(<span class="params">path, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> temp = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">    temp.setAttribute(<span class="string">'type'</span>, <span class="string">'text/javascript'</span>);</span><br><span class="line">    temp.src = path;</span><br><span class="line">    temp.onload = temp.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.readyState || <span class="keyword">this</span>.readyState === <span class="string">"loaded"</span> || <span class="keyword">this</span>.readyState === <span class="string">"complete"</span>) &#123;</span><br><span class="line">        temp.onload = temp.onreadystatechange = <span class="literal">null</span>;</span><br><span class="line">        callback();</span><br><span class="line">        <span class="keyword">this</span>.parentNode.removeChild(<span class="keyword">this</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">document</span>.head.appendChild(temp);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>这样就实现了自动输入验证码的功能,虽然动态加载两个js库需要花费一些时间以及识别的过程需要一些时间,但是还是能够免去手动输入验证码的过程。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>实现这个功能整体上还是挺简单的，毕竟现在已经有了这么强大的识别技术，这也意味着现在很多网站的验证码已经是如同虚设，需要及时的更新了。</p><p>这个小工具写的也不是很好，如果有更好的方案欢迎提出学习。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;最近登录学校的学工平台的官网的时候发现学校的网站有一定的年份了，包括验证码的机制也是非常的简单，那么也就意味着其实在如今这样简单的验证码机制已经不再安全了，其实不仅仅是我们学校的验证码使用的是比较老的技术，我也发现了其实还有很多的比较小并且比较老的网站使用的都是以前的验证码技术，所以我打算实现一个自动输入验证码的功能，这样配合浏览器的记住密码的功能每次登录就会非常的方便了。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>uniapp实现左右滑动长列表</title>
    <link href="https://q32757468.github.io/2019/11/29/uniapp%E5%AE%9E%E7%8E%B0%E5%B7%A6%E5%8F%B3%E6%BB%91%E5%8A%A8%E9%95%BF%E5%88%97%E8%A1%A8/"/>
    <id>https://q32757468.github.io/2019/11/29/uniapp实现左右滑动长列表/</id>
    <published>2019-11-29T03:35:27.000Z</published>
    <updated>2019-11-29T07:54:07.977Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最近在学习uniapp，因为我觉得这是个不错的开发工具，哪怕不用来进行多端开发，只是用来进行微信小程序的开发这也是一个非常不错的开发框架，因为主要的书写规范都是和vue类似的。这次突然想开发一个手机APP，准备仿写一个我常用的一个App，觉得它的左右滑动的长列表做得挺不错的，所以花了点时间仿写了一下。<br><a id="more"></a></p></blockquote><h3 id="先来看一下效果"><a href="#先来看一下效果" class="headerlink" title="先来看一下效果"></a>先来看一下效果</h3><p><img src="http://m.qpic.cn/psb?/V131x4904WMIoW/Eiciz8i1IlxGw9pqaUyMhHFFcYi8r5ks7QOg7YBoD9M!/b/dLgAAAAAAAAA&bo=DQJYAwAAAAACN0c!&rf=viewer_4"><br>这里只是简单的实现了功能，样式不是很好看，不过也可以通过动图看出实现了一个长列表的功能。</p><h3 id="主要功能及实现思路"><a href="#主要功能及实现思路" class="headerlink" title="主要功能及实现思路"></a>主要功能及实现思路</h3><h4 id="首先是实现一个长列表的功能"><a href="#首先是实现一个长列表的功能" class="headerlink" title="首先是实现一个长列表的功能"></a>首先是实现一个长列表的功能</h4><ul><li><p>这里可以分为两部分，一部分是头部，也就是用来点击跳转以及显示当前所在页面组件的头部，另一部分就是主要内容部分，就是我们的页面组件。</p></li><li><p>这里实现起来非常的简单，我们需要实现想要的效果只需要头部使用<code>scroll-view</code>就可以了，就默认可以滚动了，而主体部分使用<code>swiper</code>组件就可以实现我们想要的长列表的切换功能了。</p></li></ul><h4 id="将头部和主体部分结合起来"><a href="#将头部和主体部分结合起来" class="headerlink" title="将头部和主体部分结合起来"></a>将头部和主体部分结合起来</h4><p>我们还需要将单独的头部和主体部分结合起来，不然这二者也只是两个毫无关联的组件而已，结合起来需要实现这些功能：</p><ul><li><p>左右滑动主体部分时，头部的激活状态也会跟着改变。<br>这个可以通过<code>swiper</code>组件的<strong>change</strong>事件来动态的改变头部链接的样式。</p></li><li><p>点击头部时会跳转到相应的主体部分。并且正确的改变激活状态。<br>这个可以通过给每个链接绑定一个点击事件，通过这个点击事件来动态的改变<code>swiper</code>组件的<code>current</code>属性以达到改变显示哪个页面组件。<br>如果要实现点击没有动画的跳转的话可以在点击的时候将<code>swiper</code>组件的<code>duration</code>动画时长属性设置为0，然后在通过 <code>animationfinish</code>事件在动画结束后将其设置会原来的状态，不过这里要注意的一点是在 uniapp的nvue页面中<code>duration</code>属性无效，所以需要从其他地方入手修改。</p></li><li><p>自适应的将头部激活的栏目居中，这个可能不是很好理解，大概意思就是当跳转到特别后面的页面组件当中的话，头部也会跟着变化，但是可能会看不到，所以需要将其显示到可视区域的中间。<br>这里可以通过动态的修改<code>scroll-view</code>组件的<code>scroll-left</code>属性来实现，而<code>scroll-left</code>的值则和当前页面组件的index有关。</p></li></ul><h4 id="加载组件"><a href="#加载组件" class="headerlink" title="加载组件"></a>加载组件</h4><p>考虑到长列表的性能问题，如何加载组件是非常重要的：</p><ul><li><p>需要动态的加载组件，异步加载组件的方式有非常的多种，这里也可以参<a href="https://cn.vuejs.org/v2/guide/components-dynamic-async.html" target="_blank" rel="noopener">考官方文档</a>。</p></li><li><p>当页面组件还未加载时以及正在加载中时需要显示正在加载中以确保用户看到一个整洁美观的页面。<br>默认所有页面都是显示 正在加载 当切换到相应的页面组件则开始加载组件，但是此时依然显示的是 正在加载 直至组件加载完毕才不显示正在加载而是显示相应的组件（我这里是通过setTimeOut来模拟的组件获取数据）。那该如何做到，可以通过子组件 $emit 父组件的方法来实现这样一个功能。</p></li><li><p>当渲染的页面组件过多时结束一些组件的加载。<br>可以通过一个数组来存储最近打卡的页面组件，(数量就是要缓存的组件的数量)，当每次进入到一个新打开的页面组件后，也就是打开下一个组件之前，就对所有的组件进行遍历，将那些不在缓存列表中的组件通过 <code>v-if</code> 来结束生命周期，这样就达到了优化性能的效果。</p></li></ul><h4 id="关于页面组件的设计"><a href="#关于页面组件的设计" class="headerlink" title="关于页面组件的设计"></a>关于页面组件的设计</h4><p>我的设计思路是所有页面组件都是同一个页面组件，但是在加载的时候会向其传一个id，子组件接收到这个id就会根据这个id来渲染相应的界面。</p><h3 id="功能实现代码"><a href="#功能实现代码" class="headerlink" title="功能实现代码"></a>功能实现代码</h3><p>这里将代码贴出来：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br></pre></td><td class="code"><pre><span class="line">&lt;template xlang=<span class="string">"wxml"</span>&gt;</span><br><span class="line">  &lt;view <span class="class"><span class="keyword">class</span></span>=<span class="string">"content"</span>&gt;</span><br><span class="line">    &lt;view <span class="class"><span class="keyword">class</span></span>=<span class="string">"tabCard"</span>&gt;</span><br><span class="line">      &lt;!-- 使用scroll-view的时候需要注意，需要将样式设置为inline-block以及不换行white-space: nowrap --&gt;</span><br><span class="line">      &lt;!-- 并且不能使用flex布局 --&gt;</span><br><span class="line">      &lt;!-- 或者还有一种处理方式就是通过里面再加一个容器来设置flex布局。 --&gt;</span><br><span class="line">      &lt;scroll-view</span><br><span class="line">        scroll-x=<span class="string">"true"</span></span><br><span class="line">        :scroll-left=<span class="string">"scrollLeft"</span></span><br><span class="line">        scroll-<span class="keyword">with</span>-animation=<span class="string">"true"</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span></span>=<span class="string">"tabCardHead"</span></span><br><span class="line">      &gt;</span><br><span class="line">        &lt;view</span><br><span class="line">          <span class="class"><span class="keyword">class</span></span>=<span class="string">"scrollConten"</span></span><br><span class="line">          ref=<span class="string">"scrollConten"</span></span><br><span class="line">          v-<span class="keyword">for</span>=<span class="string">"(item,index) in pageList"</span></span><br><span class="line">          :key=<span class="string">"item.itemID"</span></span><br><span class="line">        &gt;</span><br><span class="line">          &lt;view <span class="class"><span class="keyword">class</span></span>=<span class="string">"swichBT"</span> @tap=<span class="string">"toPage(index)"</span> :<span class="class"><span class="keyword">class</span></span>=<span class="string">"&#123;active:item.active&#125;"</span>&gt;&#123;&#123;item.title&#125;&#125;&lt;<span class="regexp">/view&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>view&gt;</span><br><span class="line">      &lt;<span class="regexp">/scroll-view&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">      &lt;view class="tabCardBody"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;swiper</span></span><br><span class="line"><span class="regexp">          @change="swChange"</span></span><br><span class="line"><span class="regexp">          @animationfinish="animationfinish"</span></span><br><span class="line"><span class="regexp">          :current="curIndex"</span></span><br><span class="line"><span class="regexp">          :duration="duration"</span></span><br><span class="line"><span class="regexp">        &gt;</span></span><br><span class="line"><span class="regexp">          &lt;swiper-item :item-id="item.itemID" v-for="(item, index) in pageList" :key="index"&gt;</span></span><br><span class="line"><span class="regexp">            &lt;view class="loading" v-show="item.loadState"&gt;正在加载中&lt;/</span>view&gt;</span><br><span class="line">            &lt;testListPage</span><br><span class="line">              <span class="class"><span class="keyword">class</span></span>=<span class="string">"testListPage"</span></span><br><span class="line">              @loadComplete=<span class="string">"toggleDisplay"</span></span><br><span class="line">              :itemIndex=<span class="string">"index"</span></span><br><span class="line">              :itemID=<span class="string">"item.itemID"</span></span><br><span class="line">              v-<span class="keyword">if</span>=<span class="string">"item.load"</span></span><br><span class="line">              v-show=<span class="string">"!item.loadState"</span></span><br><span class="line">            &gt;<span class="xml"><span class="tag">&lt;/<span class="name">testListPage</span>&gt;</span></span></span><br><span class="line">          &lt;<span class="regexp">/swiper-item&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>swiper&gt;</span><br><span class="line">      &lt;<span class="regexp">/view&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>view&gt;</span><br><span class="line">  &lt;<span class="regexp">/view&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">// 实现异步加载组件</span></span><br><span class="line"><span class="keyword">const</span> testListPage = <span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">require</span>([<span class="string">"./testListPage"</span>], resolve).then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"组件加载成功"</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      title: <span class="string">"Hello"</span>,</span><br><span class="line">      flag: <span class="literal">true</span>,</span><br><span class="line">      curIndex: <span class="number">0</span>,</span><br><span class="line">      cacheList: [<span class="string">"test1"</span>],</span><br><span class="line">      duration: <span class="string">"500"</span>,</span><br><span class="line">      scrollLeft: <span class="string">"0"</span>,</span><br><span class="line"></span><br><span class="line">      <span class="comment">//数组对象解释说明：</span></span><br><span class="line">      <span class="comment">// title表示是哪一栏，</span></span><br><span class="line">      <span class="comment">// active表示头部是否是激活状态，</span></span><br><span class="line">      <span class="comment">// load表示是否加载了该组件</span></span><br><span class="line">      <span class="comment">//loadState用来控制是否显示正在加载的图片，因为组件加载与加载中的图片有重叠时间，所以需要单独用一个变量来控制</span></span><br><span class="line">      pageList: [</span><br><span class="line">        &#123;</span><br><span class="line">          title: <span class="string">"测试一"</span>,</span><br><span class="line">          itemID: <span class="string">"test1"</span>,</span><br><span class="line">          active: <span class="literal">true</span>,</span><br><span class="line">          load: <span class="literal">true</span>,</span><br><span class="line">          loadState: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          title: <span class="string">"测试二"</span>,</span><br><span class="line">          itemID: <span class="string">"test2"</span>,</span><br><span class="line">          active: <span class="literal">false</span>,</span><br><span class="line">          load: <span class="literal">false</span>,</span><br><span class="line">          loadState: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          title: <span class="string">"测试三"</span>,</span><br><span class="line">          itemID: <span class="string">"test3"</span>,</span><br><span class="line">          active: <span class="literal">false</span>,</span><br><span class="line">          load: <span class="literal">false</span>,</span><br><span class="line">          loadState: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          title: <span class="string">"测试四"</span>,</span><br><span class="line">          itemID: <span class="string">"test4"</span>,</span><br><span class="line">          active: <span class="literal">false</span>,</span><br><span class="line">          load: <span class="literal">false</span>,</span><br><span class="line">          loadState: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          title: <span class="string">"测试五"</span>,</span><br><span class="line">          itemID: <span class="string">"test5"</span>,</span><br><span class="line">          active: <span class="literal">false</span>,</span><br><span class="line">          load: <span class="literal">false</span>,</span><br><span class="line">          loadState: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          title: <span class="string">"测试六"</span>,</span><br><span class="line">          itemID: <span class="string">"test6"</span>,</span><br><span class="line">          active: <span class="literal">false</span>,</span><br><span class="line">          load: <span class="literal">false</span>,</span><br><span class="line">          loadState: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    swChange(e) &#123;</span><br><span class="line">      <span class="keyword">this</span>.curIndex = e.detail.current;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 切换到页面加载相应组件</span></span><br><span class="line">      <span class="keyword">this</span>.pageList[e.detail.current].load = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//将头部设为激活状态</span></span><br><span class="line">      <span class="keyword">this</span>.pageList.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">        item.active = <span class="literal">false</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">this</span>.pageList[e.detail.current].active = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 控制缓存的组件</span></span><br><span class="line">      <span class="comment">//控制被缓存的列表</span></span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.cacheList.includes(e.detail.currentItemId)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.cacheList.length &lt; <span class="number">3</span>) &#123;</span><br><span class="line">          <span class="keyword">this</span>.cacheList.push(e.detail.currentItemId);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">this</span>.cacheList.push(e.detail.currentItemId);</span><br><span class="line">          <span class="keyword">this</span>.cacheList.shift();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// console.log(this.cacheList);</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//删除不在缓存范围内的组件</span></span><br><span class="line">      <span class="keyword">this</span>.pageList.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.cacheList.includes(item.itemID)) &#123;</span><br><span class="line">          <span class="comment">// console.log(item.itemID);</span></span><br><span class="line">          item.load = <span class="literal">false</span>;</span><br><span class="line">          item.loadState = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 将头部一直保持居中</span></span><br><span class="line">      <span class="comment">// console.log(this.$refs.scrollConten[0].$el.clientWidth);</span></span><br><span class="line">      <span class="keyword">const</span> scrollLeft =</span><br><span class="line">        (<span class="keyword">this</span>.curIndex - <span class="number">2</span>) * <span class="keyword">this</span>.$refs.scrollConten[<span class="number">0</span>].$el.clientWidth;</span><br><span class="line">      <span class="keyword">this</span>.scrollLeft = <span class="built_in">String</span>(scrollLeft);</span><br><span class="line">      <span class="comment">// console.log(scrollLeft);</span></span><br><span class="line">    &#125;,</span><br><span class="line">    toPage(index) &#123;</span><br><span class="line">      <span class="comment">//切换class状态</span></span><br><span class="line">      <span class="keyword">this</span>.pageList.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">        item.active = <span class="literal">false</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">// 切换页面组件</span></span><br><span class="line">      <span class="keyword">this</span>.pageList[index].active = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">this</span>.curIndex = index;</span><br><span class="line">      <span class="comment">//暂时关闭动画</span></span><br><span class="line">      <span class="keyword">this</span>.duration = <span class="string">"0"</span>;</span><br><span class="line">      <span class="comment">// console.log(this.duration);</span></span><br><span class="line">    &#125;,</span><br><span class="line">    toggleDisplay(index) &#123;</span><br><span class="line">      <span class="keyword">this</span>.pageList[index].loadState = <span class="literal">false</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    animationfinish() &#123;</span><br><span class="line">      <span class="keyword">this</span>.duration = <span class="string">"500"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    testListPage</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;style lang="scss" scoped&gt;</span></span><br><span class="line"><span class="regexp">.active &#123;</span></span><br><span class="line"><span class="regexp">  background-color: orange;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">.content &#123;</span></span><br><span class="line"><span class="regexp">  display: flex;</span></span><br><span class="line"><span class="regexp">  flex-direction: column;</span></span><br><span class="line"><span class="regexp">  align-items: center;</span></span><br><span class="line"><span class="regexp">  justify-content: center;</span></span><br><span class="line"><span class="regexp">  position: relative;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  .testListPage &#123;</span></span><br><span class="line"><span class="regexp">    text-align: center;</span></span><br><span class="line"><span class="regexp">    width: 100%;</span></span><br><span class="line"><span class="regexp">    height: 200rpx;</span></span><br><span class="line"><span class="regexp">    background-color: red;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">  .tabCardHead &#123;</span></span><br><span class="line"><span class="regexp">    width: 750rpx;</span></span><br><span class="line"><span class="regexp">    white-space: nowrap;</span></span><br><span class="line"><span class="regexp">    display: inline-block;</span></span><br><span class="line"><span class="regexp">    position: absolute;</span></span><br><span class="line"><span class="regexp">    top: 0;</span></span><br><span class="line"><span class="regexp">    left: 0;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    .scrollConten &#123;</span></span><br><span class="line"><span class="regexp">      width: 160rpx;</span></span><br><span class="line"><span class="regexp">      background-color: aquamarine;</span></span><br><span class="line"><span class="regexp">      display: inline-block;</span></span><br><span class="line"><span class="regexp">      padding: 10rpx 0;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">      .swichBT &#123;</span></span><br><span class="line"><span class="regexp">        text-align: center;</span></span><br><span class="line"><span class="regexp">        font-size: 28rpx;</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  .tabCardBody &#123;</span></span><br><span class="line">    /* #ifdef H5 */</span><br><span class="line">    margin-top: <span class="number">70</span>rpx;</span><br><span class="line">    <span class="comment">/* #endif */</span></span><br><span class="line"></span><br><span class="line">    swiper &#123;</span><br><span class="line">      <span class="comment">// swiper组件必须设置宽度，不能依靠里面的组件来支撑起来</span></span><br><span class="line">      <span class="comment">//并且有默认的高度是300rpx</span></span><br><span class="line">      width: <span class="number">750</span>rpx;</span><br><span class="line">      height: <span class="number">400</span>rpx;</span><br><span class="line">      swiper-item &#123;</span><br><span class="line">        <span class="comment">// width: 750rpx;</span></span><br><span class="line"></span><br><span class="line">        .loading &#123;</span><br><span class="line">          text-align: center;</span><br><span class="line">          width: <span class="number">100</span>%;</span><br><span class="line">          height: <span class="number">200</span>rpx;</span><br><span class="line">          background-color: antiquewhite;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这是我自己思考的实现长列表的一个思路，所以有些地方可能处理的不是很好，有更好的方案欢迎提出。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;最近在学习uniapp，因为我觉得这是个不错的开发工具，哪怕不用来进行多端开发，只是用来进行微信小程序的开发这也是一个非常不错的开发框架，因为主要的书写规范都是和vue类似的。这次突然想开发一个手机APP，准备仿写一个我常用的一个App，觉得它的左右滑动的长列表做得挺不错的，所以花了点时间仿写了一下。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>移动端目前常用的两种适配方案（rem和vw、vh）</title>
    <link href="https://q32757468.github.io/2019/11/23/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%9B%AE%E5%89%8D%E5%B8%B8%E7%94%A8%E7%9A%84%E4%B8%A4%E7%A7%8D%E9%80%82%E9%85%8D%E6%96%B9%E6%A1%88%EF%BC%88rem%E5%92%8Cvw%E3%80%81vh%EF%BC%89/"/>
    <id>https://q32757468.github.io/2019/11/23/移动端目前常用的两种适配方案（rem和vw、vh）/</id>
    <published>2019-11-23T02:22:42.000Z</published>
    <updated>2019-11-23T03:26:41.754Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PC端的web开发是比较简单的，不用做任何的适配就可以直接开发，但是手机端就不一样了，因为市场上充满着各种品牌型号的手机，所以会存在着许多种不一样的分辨率，那么如何对这么多的分辨率进行适配就是一个问题了，这篇文章主要介绍目前常见的两种移动端适配方案 rem 适配以及 css 新单位 vw、vh。<br><a id="more"></a></p></blockquote><h3 id="rem适配"><a href="#rem适配" class="headerlink" title="rem适配"></a>rem适配</h3><p>在css3 的新单位出现之前，移动端的适配主要都是通过 rem 适配来实现的，em 这个单位想必大家都很熟悉，就是相较于父级字体大小的一个单位，那么 rem 也是相似的， rem 中的 r 代表着 root ，也就意味着不再是相较于父级了 ，而是相较于根级了，也就是 html 了，所以我们才可以通过 rem 来进行移动端的适配。</p><p>我们只需要通过 js 来<strong>动态的改变 html 的 <code>font-size</code></strong>，就可以做到 rem 在不同的分辨率下也会有一样的表现。我们只需要将 html的 font-size 与屏幕的宽度关联起来就可以实现这样的效果，可以参考这段代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> htmlDom = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'html'</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, (e) =&gt; &#123;</span><br><span class="line">  <span class="comment">//获取视窗宽度</span></span><br><span class="line">  <span class="keyword">let</span> htmlWidth = <span class="built_in">document</span>.documentElement.clientWidth || <span class="built_in">document</span>.body.clientWidth;</span><br><span class="line">  <span class="comment">//假如设计稿的宽度为750px则除7.5，以此类推</span></span><br><span class="line">  htmlDom.style.fontSize = htmlWidth / <span class="number">7.5</span> + <span class="string">'px'</span>;<span class="comment">//这样处理后就可以得到 1rem=设计稿物理像素100px=50px css像素</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>这里是以设计稿的宽度为 750px(iphone6)为标准来书写的，那明明我们打开控制台看到的 iPhone6的宽度为 375，为什么设计稿是 750 呢，这是因为这个750 是物理像素，而我们看到的 375 则是 css像素，这也就意味着在 iPhone 上 1css像素=2物理像素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">htmlDom.style.fontSize = htmlWidth / <span class="number">7.5</span> + <span class="string">'px'</span>;</span><br></pre></td></tr></table></figure><p>通过这段代码我们就将屏幕的宽度与 font-size 结合在一起了，就可以达到 1rem 在不同屏幕上会有相同的表现了，有些人可能会奇怪为什么这里是 用获取到的宽度除以7.5，其实这个是没关系的，这个比例是多少都可以，只不过在设计稿的宽度为 750px的情况下 这样可以做到 1rem=100物理像素=50css像素，方便我们书写，假如设计稿上 body 的宽度为 750px ，我们只需要在 css 中写<code>body{width:7.5rem}</code>，只需要将设计稿的宽度除以 100 就可以了。</p><p>具体可以参考这个演示：(以设计稿为 750px 为例)<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> htmlDom = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'html'</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, (e) =&gt; &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//获取视窗宽度</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> htmlWidth = <span class="built_in">document</span>.documentElement.clientWidth || <span class="built_in">document</span>.body.clientWidth;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//加入设计稿的宽度为750px则除7.5，以此类推</span></span></span><br><span class="line"><span class="javascript">      htmlDom.style.fontSize = htmlWidth / <span class="number">7.5</span> + <span class="string">'px'</span>;<span class="comment">//这样处理后就可以得到 1rem=设计稿物理像素100px=50px css像素</span></span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/normalize.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  body &#123;</span></span><br><span class="line"><span class="undefined">    font-size: 16px;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.testBox</span> &#123;</span></span><br><span class="line"><span class="undefined">    width: 100%;</span></span><br><span class="line"><span class="undefined">    background-color: bisque;</span></span><br><span class="line"><span class="undefined">    text-align: center;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="undefined">    background-color: beige;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">width</span>: 4<span class="selector-class">.5rem</span>;</span></span><br><span class="line"><span class="undefined">    height: 10rem;</span></span><br><span class="line"><span class="undefined">    float: left;</span></span><br><span class="line"><span class="undefined">    text-align: center;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="undefined">    background-color: aqua;</span></span><br><span class="line"><span class="undefined">    width: 3rem;</span></span><br><span class="line"><span class="undefined">    height: 10rem;</span></span><br><span class="line"><span class="undefined">    float: right;</span></span><br><span class="line"><span class="undefined">    text-align: center;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"testBox"</span>&gt;</span>这是一个测试内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>这是左边的内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>这是右边的内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>效果图：<br><img src="http://m.qpic.cn/psb?/V131x4904WMIoW/WJKDSWkhwAIlDynoA55phRhEejem89Sb4C38cFr6UeA!/b/dL8AAAAAAAAA&bo=WgIvAwAAAAADB1Y!&rf=viewer_4"><br>iPhone6</p><p><img src="http://m.qpic.cn/psb?/V131x4904WMIoW/R525uo4TZaYDOdD6OtUAj2gAxd4fcnpWcQSscYW6D7I!/b/dL4AAAAAAAAA&bo=KQIkAwAAAAADFz4!&rf=viewer_4"><br>其他手机</p><p>可以看出效果良好。</p><h3 id="vw和vh"><a href="#vw和vh" class="headerlink" title="vw和vh"></a>vw和vh</h3><p>虽然 rem 较好的解决了移动端适配的问题，但是却把 css 和 js 耦合在了一起，很显然这个做法并不完美，所以就有了 css3 的视口单位(Viewport units) vw 和vh。</p><h4 id="什么是视口？"><a href="#什么是视口？" class="headerlink" title="什么是视口？"></a>什么是视口？</h4><p>在桌面端，指的是浏览器的可视区域；在移动端，它涉及3个视口：Layout Viewport（布局视口），Visual Viewport（视觉视口），Ideal Viewport（理想视口）。</p><p>视口单位中的“视口”，桌面端指的是浏览器的可视区域；移动端指的就是Viewport中的Layout Viewport。</p><p>根据CSS3规范，视口单位主要包括以下4个：</p><ul><li>vw：1vw等于视口宽度的1%。</li><li>vh：1vh等于视口高度的1%。</li><li>vmin：选取vw和vh中最小的那个。(通常用来处理屏幕旋转)</li><li>vmax：选取vw和vh中最大的那个。(通常用来处理屏幕旋转)</li></ul><p>其实到这里可以看出视口单位也是与百分比相似的单位，但是<strong>vh/vw与%区别在于 % 相较的是祖先元素 ，而 vh/vw 相较的是 视口，</strong>所以才可以用 vh/vw 来做移动端的适配。</p><p>可以配合 sass 函数来将 px 转化为 vh/vw。<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//iPhone 6(750px)设计稿基准</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$vm_base</span>: <span class="number">750</span>; </span><br><span class="line"></span><br><span class="line">@function vm(<span class="variable">$px</span>) &#123;</span><br><span class="line"></span><br><span class="line">    @return (<span class="variable">$px</span> / 375) * 100vw;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>实现和上面一样的效果：<br>HTML:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0,user-scalable=no"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/normalize.css"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./css/vwvh.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"testBox"</span>&gt;</span>这是一个测试内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>这是左边的内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>这是右边的内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>SCSS:<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$vm_base</span>: <span class="number">750</span>;</span><br><span class="line"></span><br><span class="line">@function vm(<span class="variable">$px</span>) &#123;</span><br><span class="line"></span><br><span class="line">  @return (<span class="variable">$px</span> / <span class="variable">$vm_base</span>) * 100vw;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.testBox</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: bisque;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.left</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: beige;</span><br><span class="line">    <span class="attribute">width</span>: vm(<span class="number">450</span>);</span><br><span class="line">    <span class="attribute">height</span>: vm(<span class="number">1000</span>);</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: aqua;</span><br><span class="line">    <span class="attribute">width</span>: vm(<span class="number">300</span>);</span><br><span class="line">    <span class="attribute">height</span>: vm(<span class="number">1000</span>);</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="http://m.qpic.cn/psb?/V131x4904WMIoW/kcrvt7i3H3X0KohfGDN7UUjcWDm1YiURlMimZK*RAXc!/b/dL8AAAAAAAAA&bo=6gFfAwAAAAADB5U!&rf=viewer_4"><br>iPhone6</p><p><img src="http://m.qpic.cn/psb?/V131x4904WMIoW/cU9.Q5dw8svkWgbv5fWUUjex91PWKBctmjoQF0zkaCs!/b/dD4BAAAAAAAA&bo=agKBAwAAAAADB8g!&rf=viewer_4"><br>其他手机</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这篇文章主要介绍了目前常见的两种移动端的适配方案，但是很明显，逐渐的vh/vw将会称为主流的适配方案。</p><p>文章介绍的比较粗略，若有错误欢迎指出。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PC端的web开发是比较简单的，不用做任何的适配就可以直接开发，但是手机端就不一样了，因为市场上充满着各种品牌型号的手机，所以会存在着许多种不一样的分辨率，那么如何对这么多的分辨率进行适配就是一个问题了，这篇文章主要介绍目前常见的两种移动端适配方案 rem 适配以及 css 新单位 vw、vh。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>理解JS中的作用域链</title>
    <link href="https://q32757468.github.io/2019/11/18/%E7%90%86%E8%A7%A3JS%E4%B8%AD%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/"/>
    <id>https://q32757468.github.io/2019/11/18/理解JS中的作用域链/</id>
    <published>2019-11-18T08:46:48.000Z</published>
    <updated>2019-11-18T14:57:43.562Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;承接之前的关于执行环境的理解，这次主要来来讲解一下JS中的作用域链和词法环境，为什么还要讲词法环境呢，因为我觉得如果单独讲作用域链不容易讲清楚，必须要先理解词法环境才能比较好理解作用域链。<br><a id="more"></a></p></blockquote><p>在讲这两个概念之前想来看一个简单的例子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line">    foo();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">bar();</span><br></pre></td></tr></table></figure></p><p>结果是什么大家可以自己先思考一下，等讲完词法环境与作用域链再来详细说说结果以及为什么会是这样的结果。</p><h3 id="词法环境"><a href="#词法环境" class="headerlink" title="词法环境"></a>词法环境</h3><blockquote><p>词法环境（Lexical Environments）：词法环境（Lexical Environments）是一种规范类型，用于根据ECMAScript代码的词法嵌套结构来定义标识符与特定变量和函数的关联。</p></blockquote><p>以上是官方对于词法环境的一段解释，可能看起来不是很好理解，但是这其中想表达的意思就是：词法环境是一种<strong>规则</strong>，这种规则规定了如何来寻找某个变量或者标示符，而这个规则最终规定<strong>在寻找某个变量或者标示符的时候是根据代码结构来决定的</strong>，这也就意味着词法环境在书写代码的时候就已经确定了。 </p><p>可能我这样的解释也不是特别好理解，后面还会结合前面的例子来讲。</p><p>关于词法环境更详细的知识我这里就不解释了，只要知道以上关于词法环境的概念就好理解作用域链了。</p><h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><blockquote><p>作用域链：作用域链，是由当前环境与上层环境的一系列变量对象组成，它保证了当前执行环境对符合访问权限的变量和函数的有序访问。</p></blockquote><p>理解作用域链重点是理解两个关键词，一个是<strong>上层环境</strong>，一个是<strong>变量对象</strong>。</p><p>作用域链也很好理解，就是一条单线的链子，用来寻找变量用的。</p><p>当当前环境找不到相应变量或者标识符时，就会顺着作用域链向上层环境来寻找相应的变量或者是标识符。</p><p>可以通过一个简单的例子来理解：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  bar();</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">foo();<span class="comment">//结果100</span></span><br></pre></td></tr></table></figure></p><p>当 bar 函数输出 a 时就会顺着作用域链向外面找，而此时 bar 函数执行环境中保存的 <strong>作用域链</strong> 可以表示为：<br>AO(bar)–&gt;AO(foo)–&gt;VO(global)</p><p>作用域链的最前端一定是当前自己执行环境中的<strong>变量对象</strong>，末尾一定是全局变量对象。因为函数开始执行之后变量对象转化为活动对象，所以这里用AO来表示。</p><h3 id="例子分析"><a href="#例子分析" class="headerlink" title="例子分析"></a>例子分析</h3><p>相信到这里已经对作用域链比较的理解了，那么我们现在再回过头来看一开始的那个例子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line">    foo();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">bar();</span><br></pre></td></tr></table></figure></p><p>最终的答案是 2</p><p>不知道各位有没有想到是这个结果，如果没有想到也正常，那我们一步一步来分析一下为什么会是这个结果：</p><ol><li><p>首先在全局环境中调用了 bar 这个函数，此时就会创建 bar 这个函数的执行环境，并且创建相应的 变量对象 此时这个函数的变量对象中就会保存有 a 这个变量，并且当开始执行函数的时候就会转化为活动对象，并且 a 这个变量可以访问，且值为 3。</p></li><li><p>接着开始调用 foo 函数，那么这里就要注意很重要的一点了， foo 这个函数会被保存在哪个环境当中，是 bar 函数还是全局函数当中？这里就要用到前面提到的词法环境了，前面有提到词法环境是一个规则并且规定<strong>寻找某个变量或者标示符的时候是根据代码结构来决定的</strong>，也就是说不管 foo 函数是在哪里被调用的，它始终都是 全局环境中创建的，这一点在代码写好时就已经确定了，这大致就是词法环境的意思。</p></li><li><p>并且当全局执行环境创建时也会 找到所有的函数声明，所以会将 foo 函数保存进全局的变量对象当中。</p></li><li><p>当开始执行 foo 函数的时候因为当前环境的变量对象当中并没有 a 这个变量，所以会通过作用域链来找，我们回顾作用域链的概念：<strong>是由当前环境与上层环境的一系列变量对象组成</strong>, 所以就会沿着作用域链向上层环境寻找 a 这个变量，那么此时我们就很清楚 foo 函数的上层环境是谁了，是全局环境，所以这个过程大致可以这样表示：<br>AO(foo)–&gt;VO(global)</p></li><li><p>最终找到全局环境变量对象中的 a 为2，所以最后结果为2。</p></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>相信通过这几个例子大家已经对词法环境和作用域链有一个比较清楚的认识，也对JS的运作机制有了更加清楚的认识。</p><p>这些也都是我个人浅显的理解，如有错误欢迎指出。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.jianshu.com/p/9b984874776c" target="_blank" rel="noopener">作用域与作用域链</a><br><a href="https://blog.csdn.net/weixin_33935505/article/details/91460146" target="_blank" rel="noopener">彻底搞懂javascript-词法环境(Lexical Environments)</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;承接之前的关于执行环境的理解，这次主要来来讲解一下JS中的作用域链和词法环境，为什么还要讲词法环境呢，因为我觉得如果单独讲作用域链不容易讲清楚，必须要先理解词法环境才能比较好理解作用域链。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>理解JS中的变量对象</title>
    <link href="https://q32757468.github.io/2019/11/17/%E7%90%86%E8%A7%A3JS%E4%B8%AD%E7%9A%84%E5%8F%98%E9%87%8F%E5%AF%B9%E8%B1%A1/"/>
    <id>https://q32757468.github.io/2019/11/17/理解JS中的变量对象/</id>
    <published>2019-11-17T06:12:18.000Z</published>
    <updated>2019-11-18T08:45:42.272Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;之前有提到过JS中的执行环境(执行上下文)是JS中非常重要的一个概念，而前面也提到了执行环境当中主要包含了三部分：变量对象、作用域链、this指向，这里这里就承接前面，来更为详细的介绍一下变量对象究竟是什么。<br><a id="more"></a></p></blockquote><h3 id="变量什么时候被的创建"><a href="#变量什么时候被的创建" class="headerlink" title="变量什么时候被的创建"></a>变量什么时候被的创建</h3><p>变量对象的创建时机非常好理解：</p><p>当前函数<strong>被调用但还未执行</strong>之时变量对象就在当前执行环境中被创建了。</p><p>还未执行就意味着并未开始执行当前函数中的代码。</p><h3 id="变量对象创建的过程"><a href="#变量对象创建的过程" class="headerlink" title="变量对象创建的过程"></a>变量对象创建的过程</h3><ol><li><p>创建 <strong>arguments</strong> 对象<br>该对象的属性名是类似数组中的索引的值：’0’、’1’、’2’…..，属性值是传入的实际参数，此外还有 length 属性表示传入的实际参数的个数，所以说函数中的 arguments 是一个伪数组。</p></li><li><p>找到所有的<strong>函数声明</strong><br>找到函数内所有通过 function 关键字声明的函数，并将其保存在变量对象中，属性名是 函数名 ，属性值是函数的引用地址， 同名则后面的覆盖前面的。这就是为什么JS中存在函数提升。</p></li><li><p>找到所有的<strong>变量声明</strong><br>找到函数内所有的变量声明，并且将其保存在变量对象中，属性名是 变量名 ，属性值为 <strong>undefined</strong> 。这就解释了为什么访问一个未赋值的变量时返回的是undefined 了 ，以及为什么用 var 声明会存在变量提升了。</p><p> 但是我们都知道 ES6 新增的 let 和 const 是不存在 变量提升的，那么它们会不会被保存进变量对象中呢？</p><ul><li><p>我们可以通过测试来体会一下，首先是声明但不赋值,在声明后使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure><p>结果：<br><img src="http://m.qpic.cn/psb?/V131x4904WMIoW/Vu6gV1Td2WaxipoMlZ1h2RlOcJrnA8Nakzs6C6.O9WA!/b/dL8AAAAAAAAA&bo=zgAiAAAAAAADB84!&rf=viewer_4"><br>可以看到结果为 undefined ，这也就意味着通过 let 或者是 const 声明的变量也会被保存进变量对象当中。</p></li><li><p>那么为什么 let 和 const 不支持变量提升呢：<br>同样的测试，这次在声明之前就使用变量：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="keyword">let</span> a;</span><br></pre></td></tr></table></figure><p>结果：<br><img src="http://m.qpic.cn/psb?/V131x4904WMIoW/HJiG3aBIXl0FkFaw2*o.U3k2fVk559YTQrjTJX**V00!/b/dFQBAAAAAAAA&bo=sgI4AAAAAAADB6o!&rf=viewer_4"><br>结果为报错’不能在声明之前使用’，这也就是我们场常说的暂时性死区。</p></li><li><p><strong>最后结论，ES6中的 let 和 const 会存在暂时性死区的问题，不能在声明之前使用，但是一样的会被保存进变量对象当中。</strong></p></li></ul></li></ol><h3 id="变量对象与活动对象"><a href="#变量对象与活动对象" class="headerlink" title="变量对象与活动对象"></a>变量对象与活动对象</h3><p>变量对象与活动对象基本其实是一个对象，主要是<strong>在不同的时间叫法不同</strong>而已：</p><p>变量对象是函数被调用但<strong>未执行</strong>时在创建在执行上下文中的，此时叫做<strong>变量对象</strong>，此时变量对象中的所有<strong>属性都不能够被访问</strong>（除了全局执行环境外）。</p><p>而活动对象则意味着当前函数<strong>开始执行</strong>了，此时变量对象就被转化为<strong>活动对象</strong>了，转化之后所有的<strong>属性就可以访问</strong>了。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>理解了变量对象这个概念在使用js的过程中相信会有更清楚的认识，不了解执行环境的小伙伴可以参考我前面的<a href="https://q32757468.github.io/2019/07/21/%E7%90%86%E8%A7%A3JS%E4%B8%AD%E7%9A%84%E6%89%A7%E8%A1%8C%E7%8E%AF%E5%A2%83/">博客</a>。关于执行环境的理解。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.jianshu.com/p/f8e628b5c312" target="_blank" rel="noopener">彻底理解js的执行上下文，以及变量对象</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;之前有提到过JS中的执行环境(执行上下文)是JS中非常重要的一个概念，而前面也提到了执行环境当中主要包含了三部分：变量对象、作用域链、this指向，这里这里就承接前面，来更为详细的介绍一下变量对象究竟是什么。&lt;br&gt;
    
    </summary>
    
    
      <category term="JS" scheme="https://q32757468.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>网页中常见的两种拖拽形式</title>
    <link href="https://q32757468.github.io/2019/09/30/%E7%BD%91%E9%A1%B5%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%8B%96%E6%8B%BD%E5%BD%A2%E5%BC%8F/"/>
    <id>https://q32757468.github.io/2019/09/30/网页中常见的两种拖拽形式/</id>
    <published>2019-09-30T13:21:31.000Z</published>
    <updated>2019-10-01T05:23:52.065Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这次在chrome插件的开发过程中有需求要实现一个拖拽的功能，所以这次来介绍一下网页中的拖拽。在网页中我们经常能见到拖拽功能，大致可以分为两种，一种是通过拖拽来改变dom元素的位置，还有一种则一般是通过拖拽来上传文件，这两种拖拽各有各的应用常见，但是使用的技术还是有挺大的差别的，这篇文章就来介绍一下这两种拖拽方式以及二者之间的区别。<br><a id="more"></a></p></blockquote><h3 id="第一种：改变元素的位置"><a href="#第一种：改变元素的位置" class="headerlink" title="第一种：改变元素的位置"></a>第一种：改变元素的位置</h3><p>这种拖拽的实现思路是通过鼠标的按下与抬起的事件来判断拖拽开始与拖拽结束，而通过鼠标的移动事件来修改元素的位置，从而实现拖拽的效果，思路比较简单，来看看究竟是怎么样实现的。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  .box1 &#123;</span><br><span class="line">    width: <span class="number">200</span>px;</span><br><span class="line">    height: <span class="number">200</span>px;</span><br><span class="line">    background-color: bisque;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: <span class="number">40</span>px;</span><br><span class="line">    left: <span class="number">100</span>px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">  &lt;div class="box1"&gt;&lt;/</span>div&gt;</span><br><span class="line">  &lt;script src=<span class="string">"./js/jquery-3.4.1.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> box1 = $(<span class="string">'.box1'</span>);</span><br><span class="line">      <span class="comment">// 定义一个变量来判断是否正在拖拽</span></span><br><span class="line">      <span class="keyword">let</span> isDraging = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">let</span> x, y;</span><br><span class="line">      box1.mousedown(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        e = e || <span class="built_in">window</span>.event;</span><br><span class="line">        <span class="comment">// 这里的diffX和diffY实际上指的就是元素中心点到边框的距离</span></span><br><span class="line">        diffX = e.clientX - box1.offset().left;</span><br><span class="line">        diffY = e.clientY - box1.offset().top;</span><br><span class="line">        isDraging = <span class="literal">true</span>;</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="comment">// 将事件绑定在document上防止拖动太快导致反应不过</span></span><br><span class="line">      $(<span class="built_in">document</span>).mousemove(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isDraging) &#123;</span><br><span class="line">          e = e || <span class="built_in">window</span>.event;</span><br><span class="line">          <span class="comment">// 这里新的坐标指的是中心的位置减去中心到边框的距离。</span></span><br><span class="line">          <span class="comment">// 因为绝对定位的top和left算的是边框到父级定位元素的距离</span></span><br><span class="line">          <span class="keyword">let</span> newX = e.clientX - diffX;</span><br><span class="line">          <span class="keyword">let</span> newY = e.clientY - diffY;</span><br><span class="line">          box1.css(&#123; <span class="string">'top'</span>: newY + <span class="string">'px'</span>, <span class="string">'left'</span>: newX + <span class="string">'px'</span> &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="comment">// 同样防止过快触发错误</span></span><br><span class="line">      $(<span class="built_in">document</span>).mouseup(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        isDraging = <span class="literal">false</span>;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure></p><p>需要注意的地方已经在代码中注释出来了，这里是通过绝对定位的方式来进行修改的，因为需要脱离文档流。</p><p>这里是通过jQuery来实现的，只是演示一下原理，貌似通过原生JS来实现还会方便一点。</p><h3 id="第二种：HTML拖拽"><a href="#第二种：HTML拖拽" class="headerlink" title="第二种：HTML拖拽"></a>第二种：HTML拖拽</h3><p>这种方式的拖拽主要是要用到HTML提供的API，因为HTML本身就是支持拖拽上传文件的，但是除了特定的一些文件或者是链接之类的可以拖动之外，其他的元素想要拖动就必须设置其 draggable ：<br><code>&lt;element draggable=&quot;true | false | auto&quot; &gt;</code><br>设置为 true 之后就可以随意进行拖动了，但是要注意的是这里的拖动还是和上面提到的第一种的拖动方式是有很大的区别的，这种拖动方式只能拖动到另一个元素中，而不像是第一种方式没有限制。 <code>dragenter</code> 和 <code>dragover</code> 事件的默认行为是拒绝接受任何被拖放的元素,所以要想拖入<strong>目的地元素</strong>也还必须要先阻止其默认行为，否则也是拖不进去的。</p><h4 id="最简单的拖拽例子："><a href="#最简单的拖拽例子：" class="headerlink" title="最简单的拖拽例子："></a>最简单的拖拽例子：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  .box1 &#123;</span><br><span class="line">    width: <span class="number">200</span>px;</span><br><span class="line">    height: <span class="number">200</span>px;</span><br><span class="line">    background-color: bisque;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .box2 &#123;</span><br><span class="line">    width: <span class="number">300</span>px;</span><br><span class="line">    height: <span class="number">300</span>px;</span><br><span class="line">    margin-top: <span class="number">40</span>px;</span><br><span class="line">    background-color: aquamarine;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">  &lt;div class="box1" draggable="true"&gt;&lt;/</span>div&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"box2"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> box1 = <span class="built_in">document</span>.querySelector(<span class="string">'.box1'</span>);</span><br><span class="line">    <span class="keyword">const</span> box2 = <span class="built_in">document</span>.querySelector(<span class="string">'.box2'</span>);</span><br><span class="line">    box2.ondrop = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">      e = e || <span class="built_in">window</span>.event;</span><br><span class="line">      e.preventDefault();</span><br><span class="line">      e.target.appendChild(box1);</span><br><span class="line">    &#125;</span><br><span class="line">    box2.ondragover = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">      e.preventDefault();</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><p>这样就实现了最简单的拖拽，可以将一个元素拖拽到另一个元素中。</p><ul><li><p>当然这是最简单的拖拽，完整的拖拽过程应该包括：</p></li><li><p>被拖拽元素的 dragstart(开始拖拽时触发) 、drag(拖拽过程中反复触发) 、dragend(在拖动操作完成时触发)</p></li><li><p>拖拽目的地的 dragenter(进入拖拽目的地触发) 、 dragover(在拖拽目的地内触发) 、dragleave(离开拖拽目的地触发) 以及 drop(在目的地内放下触发) 事件</p></li></ul><p>这些事件就组成了一个完整的拖拽过程。可以根据这些事件来自定义拖拽时的表现。</p><h4 id="dataTransfer"><a href="#dataTransfer" class="headerlink" title="dataTransfer"></a>dataTransfer</h4><p>如果需要在拖拽的过程中进行拖拽元素与目的地元素的数据交互就可以通过 <code>dataTransfer</code> 的 setData() 方法设置被拖数据的数据类型和值，然后通过 getData<br>方法来获取相应的值。</p><p>还可以通过 dataTransfer 中的 files 属性来获取上传的文件列表从而实现拖拽上传的功能：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  .box2 &#123;</span><br><span class="line">    width: <span class="number">300</span>px;</span><br><span class="line">    height: <span class="number">300</span>px;</span><br><span class="line">    margin-top: <span class="number">40</span>px;</span><br><span class="line">    background-color: aquamarine;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">  &lt;div class="box2"&gt;&lt;/</span>div&gt;</span><br><span class="line">  &lt;img src=<span class="string">""</span> alt=<span class="string">""</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"pre"</span>&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> box2 = <span class="built_in">document</span>.querySelector(<span class="string">'.box2'</span>);</span><br><span class="line">    box2.ondrop = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">      e = e || <span class="built_in">window</span>.event;</span><br><span class="line">      e.preventDefault();</span><br><span class="line">      <span class="comment">// 这里要注意的一件事情是直接看 dataTransfer 中的fileList是看不到任何的文件信息的，只有看 dataTransfer.files 才能看到文件信息</span></span><br><span class="line">      <span class="built_in">console</span>.log(e.dataTransfer.files[<span class="number">0</span>]);</span><br><span class="line">      <span class="keyword">let</span> file = e.dataTransfer.files[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">let</span> URL = <span class="built_in">window</span>.URL || <span class="built_in">window</span>.webkitURL;</span><br><span class="line">      <span class="keyword">let</span> imgURL = URL.createObjectURL(file);</span><br><span class="line">      <span class="built_in">document</span>.querySelector(<span class="string">'.pre'</span>).setAttribute(<span class="string">'src'</span>, imgURL);</span><br><span class="line">    &#125;</span><br><span class="line">    box2.ondragover = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">      e.preventDefault();</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure></p><p>这里是通过  <code>dataTransfer</code> 对象的 <code>files</code> 属性来获取到文件的，并且将其进行预览,我这里所用的将图片进行预览的方式是通过 URL 对象来对其进行url转换的，也可以使用fileReader来实现，具体可以参考我前面的本地通过<code>input:file</code>来上传文件时所用的两种方式，<a href="https://q32757468.github.io/2019/09/15/JS%E5%AE%9E%E7%8E%B0%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E5%B9%B6%E4%B8%94%E6%9C%AC%E5%9C%B0%E9%A2%84%E8%A7%88/">这里</a>。</p><p>这样就实现了拖拽上传图片并且预览的功能，可以来看一下效果图：<br><img src="http://m.qpic.cn/psb?/V131x4904WMIoW/23.vp49mFLcg7bd8fc7wtwnj1aX7nzTAuCFCE9yCzOU!/b/dLYAAAAAAAAA&bo=jAMCAgAAAAADB60!&rf=viewer_4"><br><img src="http://m.qpic.cn/psb?/V131x4904WMIoW/nmnzvXLMqqp.sQVyZ0sP9NrjgQPtc*5Cj3Y*jymlQoA!/b/dLgAAAAAAAAA&bo=EwTLAgAAAAADN8w!&rf=viewer_4"><br>这里没有对样式进行很细致的调整，可以根据自己的情况进行调整。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这篇文章介绍了两种常见的拖拽的方式，但是其实这两种方式的差别还是非常的明显的，应用场景差别也很大。</p><p>一个主要时通过拖拽来改变元素的位置，而另一个一般都是通过拖拽到指定区域来进行文件的上传，各有各的应用场景。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;这次在chrome插件的开发过程中有需求要实现一个拖拽的功能，所以这次来介绍一下网页中的拖拽。在网页中我们经常能见到拖拽功能，大致可以分为两种，一种是通过拖拽来改变dom元素的位置，还有一种则一般是通过拖拽来上传文件，这两种拖拽各有各的应用常见，但是使用的技术还是有挺大的差别的，这篇文章就来介绍一下这两种拖拽方式以及二者之间的区别。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS函数节流与函数防抖</title>
    <link href="https://q32757468.github.io/2019/09/22/JS%E5%87%BD%E6%95%B0%E8%8A%82%E6%B5%81%E4%B8%8E%E5%87%BD%E6%95%B0%E9%98%B2%E6%8A%96/"/>
    <id>https://q32757468.github.io/2019/09/22/JS函数节流与函数防抖/</id>
    <published>2019-09-22T05:38:42.000Z</published>
    <updated>2019-11-06T05:41:44.935Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;函数防抖与函数节流这两个概念可能不是这么经常会遇到，但是在很多场景却会经常遇到，比如说应用于常见的很多的事件，那么究竟什么是函数节流呢，什么又是函数防抖呢，其实这也不是什么复杂的概念，这里就来好好的谈一谈。<br><a id="more"></a></p></blockquote><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><h4 id="函数节流"><a href="#函数节流" class="headerlink" title="函数节流"></a>函数节流</h4><blockquote><p>所谓节流，就是指连续触发事件但是在 n 秒中只执行一次函数。</p></blockquote><p>意思其实也是简单明了，就是这个函数在一定的时间内就一定只能执行一次。</p><h4 id="函数防抖"><a href="#函数防抖" class="headerlink" title="函数防抖"></a>函数防抖</h4><blockquote><p>所谓防抖，就是指触发事件后在 n 秒内函数只能执行一次，如果在 n 秒内又触发了事件，则会重新计算函数执行时间。</p></blockquote><p>这句话可能一时间不是特别的好理解，但是换句话说，这句话的意思就是说如果连续执行一个函数，那么这个函数只有在最后一次才会生效。</p><h3 id="何时需要使用"><a href="#何时需要使用" class="headerlink" title="何时需要使用"></a>何时需要使用</h3><p>函数节流与函数防抖通常都是应用与各种事件，因为很多事件通常会有非常高的触发频率，例如 resize 、input 、mouseMove 这类事件，通过函数节流与函数防抖就可以很好的限制其频率在我们理想的一个范围之内。</p><p><strong>比如函数节流的应用场景：</strong></p><ul><li><p>页面资源滚动加载</p></li><li><p>高频率的重复点击</p></li><li><p>防止鼠标滚轮一次滚太多</p></li></ul><p>其实不止这些，任何想要限制频率来减少资源的消耗的函数都可以通过函数节流来实现。</p><p><strong>函数防抖的应用场景：</strong></p><ul><li><p>resize获取窗口大小</p></li><li><p>文本框输入验证</p></li></ul><p>很多场景都会用到函数防抖来只触发一次函数。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="函数节流-1"><a href="#函数节流-1" class="headerlink" title="函数节流"></a>函数节流</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, wait, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> time, context, args, result;</span><br><span class="line">  <span class="keyword">let</span> previous = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (!options) options = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> later = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    previous = options.leading === <span class="literal">false</span> ? <span class="number">0</span> : <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">    time = <span class="literal">null</span>;</span><br><span class="line">    func.apply(context, args);</span><br><span class="line">    <span class="keyword">if</span> (!time) context = args = <span class="literal">null</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> throttled = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">    <span class="keyword">if</span> (!previous &amp;&amp; options.leading === <span class="literal">false</span>) previous = now;</span><br><span class="line">    <span class="keyword">let</span> remaining = wait - (now - previous);</span><br><span class="line">    context = <span class="keyword">this</span>;</span><br><span class="line">    args = <span class="built_in">arguments</span>;</span><br><span class="line">    <span class="keyword">if</span> (remaining &lt;= <span class="number">0</span> || remaining &gt; wait) &#123;</span><br><span class="line">      <span class="keyword">if</span> (time) &#123;</span><br><span class="line">        clearTimeout(time);</span><br><span class="line">        time = <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      previous = now;</span><br><span class="line">      func.apply(context, args);</span><br><span class="line">      <span class="keyword">if</span> (!time) context = args = <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!time &amp;&amp; options.trailing !== <span class="literal">false</span>) &#123;</span><br><span class="line">      time = setTimeout(later, remaining);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> throttled;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数节流的功能比较全面，拥有第三个参数 <code>options</code> 为一个对象：</p><ul><li>leading：false 表示禁用第一次执行</li><li>trailing: false 表示禁用停止触发的回调</li></ul><p>可以根据情况来配置参数来实现想要的功能。</p><h4 id="函数防抖-1"><a href="#函数防抖-1" class="headerlink" title="函数防抖"></a>函数防抖</h4><p>通过 setTimeout 来实现：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _debounce = <span class="function">(<span class="params">func, wait</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> timer;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    clearTimeout(timer);</span><br><span class="line">    timer = setTimeout(func, wait);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>也非常的好理解，在函数执行之前如果又调用了函数则会重新开启定时器。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这里介绍了关于函数节流与函数防抖的概念与实现，遇到类似需要的场景的时候就可以快速合理的应用起来以避免不必要的资源消耗。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.jianshu.com/p/f9f6b637fd6c" target="_blank" rel="noopener">浅析函数防抖与函数节流</a><br><a href="https://blog.csdn.net/beijiyang999/article/details/79836463" target="_blank" rel="noopener">JavaScript 函数节流（throttle）的实现</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;函数防抖与函数节流这两个概念可能不是这么经常会遇到，但是在很多场景却会经常遇到，比如说应用于常见的很多的事件，那么究竟什么是函数节流呢，什么又是函数防抖呢，其实这也不是什么复杂的概念，这里就来好好的谈一谈。&lt;br&gt;
    
    </summary>
    
    
      <category term="JS" scheme="https://q32757468.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>实现图片懒加载</title>
    <link href="https://q32757468.github.io/2019/09/22/%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD/"/>
    <id>https://q32757468.github.io/2019/09/22/实现图片懒加载/</id>
    <published>2019-09-22T02:30:56.000Z</published>
    <updated>2019-09-24T11:12:20.304Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;图片懒加载是网页中常见的一种简单的技术，可以减轻页面首次加载的压力，是一种常见的页面性能优化的方式，这次就来看看它的究竟是如何实现的。<br><a id="more"></a></p></blockquote><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>图片懒加载的原理十分的简单，就是页面中的图片并不会一次性全部加载完，而是在我们能看到这张图片的时候这张图片才会进行加载，而在加载这张图片之前，先用一张较小的图片来占位置，真正的图片地址放在自定义属性<code>data-src</code>中，需要加载时就将图片的<code>src</code>换成<code>data-src</code>。而如何判断我们有没有看见图片呢，这个可以通过比较图片距离网页顶部的距离和网页已经滚动的距离加上窗口的高度来实现，这样就实现了图片的懒加载。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>html:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"imgList"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./images/loading.png"</span> <span class="attr">data-src</span>=<span class="string">"./images/beach-exotic-holiday-248797.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./images/loading.png"</span> <span class="attr">data-src</span>=<span class="string">"./images/blur-calm-waters-dawn-395198.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./images/loading.png"</span> <span class="attr">data-src</span>=<span class="string">"./images/close-up-foliage-green-797797.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./images/loading.png"</span> <span class="attr">data-src</span>=<span class="string">"./images/cool-wallpaper-dawn-hd-wallpaper-66997.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./images/loading.png"</span> <span class="attr">data-src</span>=<span class="string">"./images/crop-cropland-daylight-1447092.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./images/loading.png"</span> <span class="attr">data-src</span>=<span class="string">"./images/dark-flash-lightning-1114690.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./images/loading.png"</span> <span class="attr">data-src</span>=<span class="string">"./images/daylight-dirt-road-forest-163703.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./images/loading.png"</span> <span class="attr">data-src</span>=<span class="string">"./images/flowers-4352530_1280.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./images/loading.png"</span> <span class="attr">data-src</span>=<span class="string">"./images/hd-wallpaper-mountain-range-mountains-114979.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./images/loading.png"</span> <span class="attr">data-src</span>=<span class="string">"./images/stockvault-autumn-lake135956.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>css:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.imgList</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>js:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 进入页面时也需要调用一次</span></span><br><span class="line">  start();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//当页面滚动时触发</span></span><br><span class="line">  $(<span class="built_in">window</span>).on(<span class="string">'scroll'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">// 滚动时，显示对应图片</span></span><br><span class="line">    start()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//判断图片是否需要显示</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">isShow</span>(<span class="params">$node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $node.offset().top &lt;= $(<span class="built_in">window</span>).height() + $(<span class="built_in">window</span>).scrollTop();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 显示图片</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">loadImg</span>(<span class="params">$img</span>) </span>&#123;</span><br><span class="line">    $img.attr(<span class="string">'src'</span>, $img.attr(<span class="string">'data-src'</span>));</span><br><span class="line">    $img.attr(<span class="string">'data-isLoaded'</span>, <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//调用图片懒加载</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">'.imgList img'</span>).not(<span class="string">'[data-isLoaded]'</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> $node = $(<span class="keyword">this</span>);</span><br><span class="line">      <span class="keyword">if</span> (isShow($node)) &#123;</span><br><span class="line">        loadImg($node);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>图片懒加载是一个常见的简单又实用的一个小功能。</p><p>这里也可以再通过函数节流来对性能进行一定的优化</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;图片懒加载是网页中常见的一种简单的技术，可以减轻页面首次加载的压力，是一种常见的页面性能优化的方式，这次就来看看它的究竟是如何实现的。&lt;br&gt;
    
    </summary>
    
    
      <category term="JS" scheme="https://q32757468.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS实现上传图片并且将图片缓存到本地</title>
    <link href="https://q32757468.github.io/2019/09/16/JS%E5%AE%9E%E7%8E%B0%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E5%B9%B6%E4%B8%94%E5%B0%86%E5%9B%BE%E7%89%87%E7%BC%93%E5%AD%98%E5%88%B0%E6%9C%AC%E5%9C%B0/"/>
    <id>https://q32757468.github.io/2019/09/16/JS实现上传图片并且将图片缓存到本地/</id>
    <published>2019-09-16T01:42:06.000Z</published>
    <updated>2019-09-25T02:39:56.298Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其实这篇文章是建立在前面的<a href="https://q32757468.github.io/2019/09/15/JS%E5%AE%9E%E7%8E%B0%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E5%B9%B6%E4%B8%94%E6%9C%AC%E5%9C%B0%E9%A2%84%E8%A7%88/">实现上传图片并且预览</a>的文章之上的，也交代了其实做这些只是为了完成我的chrome插件的开发中的自定义上传图片并且保存下来，当时一开始没有一个满意的思路，不过现在通过搜索一些资料也想到了一个我比较满意的思路，这篇博客就来将这个思路实现一下。<br><a id="more"></a></p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>我觉得最重要的就是思路，有一个满意的思路开发起来就会顺畅很多，刚开始的时候就是找不到合适的思路所以停了一段时间，现在我把我想到的思路说一下。</p><p>就是可以通过 <strong>input:file</strong> 来进行图片的上传，然后通过 <strong>local storage</strong> 来缓存上传的图片，这样就只需要上传一次，之后加载local storage中的图片就可以了。</p><p>在这之前我一直想不通的就是如何将图片保存下来，后面我看到了实现图片上传预览的这个例子我知道了原来只需要将图片转化为dataURL就可以了，还有一个问题就是该将图片保存在哪，最后觉得是保存在local storage 中是最好的。</p><p>之前我的错误思路一直想的都是如何把图片下载到本地，然后每次再加载本地的图片，首先是这样不好实现，其次是如果是这样的话只要图片在文件夹中修改或者移除，那么就会影响到页面的显示。</p><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p>在看是如何实现之前可以先看一下实现之后的效果图：<br><img src="http://m.qpic.cn/psb?/V131x4904WMIoW/kKoZ7WdcFA.JngRjpzEZEuQbzj9qZS5J9qkETV58rK0!/b/dL4AAAAAAAAA&bo=fgehAwAAAAADB*k!&rf=viewer_4"><br>从图片中可以看出有一个上传图标的上传框，然后下面就是上传的所有的图标，当页面关闭再重新打开也会一直存在，因为图片是从local storage中加载的，除非删除local storage中的数据，所以这样就实现了我想要的效果。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>思路讲完了，来看一下究竟是怎么样实现的：</p><h4 id="HTML"><a href="#HTML" class="headerlink" title="HTML:"></a>HTML:</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"uploadBox"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"replaceBox"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"iconPreview"</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    +</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"uploadBt"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"iconTitle"</span> <span class="attr">placeholder</span>=<span class="string">"图标标题"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"comfir"</span>&gt;</span>确定<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这部分就非常的简单了，就两个部分，一个是上传框，一个是图片列表。</p><h4 id="CSS"><a href="#CSS" class="headerlink" title="CSS:"></a>CSS:</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.uploadBox</span> &#123;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">   <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">   <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">   <span class="attribute">margin-top</span>: <span class="number">40px</span>;</span><br><span class="line">   <span class="attribute">display</span>: flex;</span><br><span class="line">   <span class="attribute">flex-direction</span>: column;</span><br><span class="line">   <span class="attribute">align-items</span>: center;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="selector-id">#uploadBt</span> &#123;</span><br><span class="line">   <span class="attribute">border</span>: none;</span><br><span class="line">   <span class="attribute">position</span>: absolute;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">   <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">   <span class="attribute">cursor</span>: pointer;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="selector-class">.replaceBox</span> &#123;</span><br><span class="line">   <span class="attribute">position</span>: relative;</span><br><span class="line">   <span class="attribute">display</span>: flex;</span><br><span class="line">   <span class="attribute">align-items</span>: center;</span><br><span class="line">   <span class="attribute">justify-content</span>: center;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">   <span class="attribute">border</span>: <span class="number">2px</span> dashed <span class="number">#ccc</span>;</span><br><span class="line">   <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">   <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">   <span class="attribute">font-size</span>: <span class="number">60px</span>;</span><br><span class="line">   <span class="attribute">font-weight</span>: <span class="number">100</span>;</span><br><span class="line">   <span class="attribute">color</span>: <span class="built_in">rgb</span>(107, 94, 94);</span><br><span class="line">   <span class="attribute">cursor</span>: pointer;</span><br><span class="line">   <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="selector-class">.iconTitle</span> &#123;</span><br><span class="line">   <span class="attribute">border</span>: none;</span><br><span class="line">   <span class="attribute">outline</span>: none;</span><br><span class="line">   <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">   <span class="attribute">text-align</span>: center;</span><br><span class="line">   <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="selector-class">.iconPreview</span> &#123;</span><br><span class="line">   <span class="comment">/* background-color: bisque; */</span></span><br><span class="line">   <span class="attribute">position</span>: absolute;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="selector-class">.comfir</span> &#123;</span><br><span class="line">   <span class="attribute">border</span>: none;</span><br><span class="line">   <span class="attribute">outline</span>: none;</span><br><span class="line">   <span class="attribute">background-color</span>: cornsilk;</span><br><span class="line">   <span class="attribute">border-radius</span>: <span class="number">2px</span>;</span><br><span class="line">   <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">2px</span>;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">   <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">   <span class="attribute">cursor</span>: pointer;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="selector-class">.list</span> &#123;</span><br><span class="line">   <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">   <span class="attribute">list-style</span>: none;</span><br><span class="line">   <span class="attribute">display</span>: flex;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">1000px</span>;</span><br><span class="line">   <span class="attribute">justify-content</span>: center;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="selector-class">.list</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">   <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">5px</span>;</span><br><span class="line">   <span class="attribute">background-color</span>: aquamarine;</span><br><span class="line">   <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">   <span class="attribute">display</span>: inline-flex;</span><br><span class="line">   <span class="attribute">justify-content</span>: center;</span><br><span class="line">   <span class="attribute">align-items</span>: center;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>css部分不重要，可以说的就是这个上传框样式的实现，因为css修改<code>input:file</code>的样式不是很好修改，所以我这里是通过些一个带样式的框绝对定位到<code>input:file</code>所在的区域，然后二者设置成同样的大小，将带样式的框完全覆盖住上传框，然后将上传框设置为完全透明，就实现了现在的上传框的样式。</p><h4 id="JS："><a href="#JS：" class="headerlink" title="JS："></a>JS：</h4><p>最重要的就是js了<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> iconPreview = $(<span class="string">'.iconPreview'</span>);</span><br><span class="line">      <span class="keyword">const</span> uploadBt = $(<span class="string">'#uploadBt'</span>);</span><br><span class="line">      <span class="keyword">const</span> iconTitle = $(<span class="string">'.iconTitle'</span>);</span><br><span class="line">      <span class="keyword">const</span> comfir = $(<span class="string">'.comfir'</span>);</span><br><span class="line">      <span class="keyword">const</span> list = $(<span class="string">'.list'</span>);</span><br><span class="line">      <span class="keyword">const</span> imgList = [];</span><br><span class="line">      <span class="keyword">let</span> iconDataUrl;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//这一部分是实现上预览的，可以参考前面的博客</span></span><br><span class="line">      uploadBt.change(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> file = $(<span class="keyword">this</span>)[<span class="number">0</span>].files[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">const</span> fr = <span class="keyword">new</span> FileReader();</span><br><span class="line">        fr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          iconPreview.attr(&#123; <span class="string">"src"</span>: <span class="keyword">this</span>.result &#125;);</span><br><span class="line">          iconDataUrl = <span class="keyword">this</span>.result;</span><br><span class="line">          <span class="comment">// console.log(this.result);</span></span><br><span class="line">        &#125;</span><br><span class="line">        fr.readAsDataURL(file);<span class="comment">//将图片作为url读出提交给result</span></span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      <span class="comment">//单击确定按钮就可以将图片保存进local storage中</span></span><br><span class="line">      comfir.click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//将新添加的图标的信息添加进local storage</span></span><br><span class="line">        <span class="comment">// localStorage.setItem(iconTitle.val(), iconDataUrl);</span></span><br><span class="line">        <span class="comment">//还需要将图标的名称以及图标的dataurl都存入一个图标的数组对象当中，然后通过遍历这个数组对象来生成图标的列表。</span></span><br><span class="line">        <span class="comment">//可以通过一个函数来实现，函数的参数就是所需要存放的数据</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过点击确认按钮调用添加图标的函数</span></span><br><span class="line">        AddToList(iconTitle.val(), iconDataUrl);</span><br><span class="line">        <span class="built_in">console</span>.log(imgList);</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      <span class="comment">//遍历local storage将其转化为一个对象数组</span></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">CreateList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; localStorage.length; i++) &#123;</span><br><span class="line">          <span class="keyword">let</span> title = localStorage.key(i);</span><br><span class="line">          <span class="keyword">let</span> url = <span class="built_in">JSON</span>.parse(localStorage.getItem(title)).url;</span><br><span class="line">          <span class="keyword">let</span> createDate = <span class="built_in">JSON</span>.parse(localStorage.getItem(title)).createDate;</span><br><span class="line">          imgList.push(&#123; title, url, createDate &#125;);</span><br><span class="line">          imgList.sort(<span class="function">(<span class="params">val1, val2</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> val1.createDate - val2.createDate</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      CreateList();</span><br><span class="line"></span><br><span class="line">      <span class="comment">//通过这个函数将每次新添加的图标添加进local storage、以及对象数组、页面中</span></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">AddToList</span>(<span class="params">title, url</span>) </span>&#123;</span><br><span class="line">        imgList.push(&#123; <span class="string">'title'</span>: title, <span class="string">'url'</span>: url, &#125;)</span><br><span class="line">        list.append(</span><br><span class="line">          <span class="string">`&lt;li&gt;&lt;img src="<span class="subst">$&#123;url&#125;</span>" alt=""&gt;&lt;/li&gt;`</span></span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">const</span> iconInfoObj = &#123;</span><br><span class="line">          url,</span><br><span class="line">          <span class="string">'createDate'</span>: <span class="keyword">new</span> <span class="built_in">Date</span>().getTime()</span><br><span class="line">        &#125;</span><br><span class="line">        localStorage.setItem(title, <span class="built_in">JSON</span>.stringify(iconInfoObj));</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//将对象数组中的所有对象添加到页面当中</span></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">AddToHtml</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        imgList.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">          list.append(</span><br><span class="line">            <span class="string">`&lt;li&gt;&lt;img src="<span class="subst">$&#123;item.url&#125;</span>" alt=""&gt;&lt;/li&gt;`</span></span><br><span class="line">          )</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      AddToHtml();</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure></p><p>需要解释的地方差不多都在注释中标出来了。</p><p>还有需要说一下的就是因为不知道local storage中对数据的排序方式是怎么样的，反正不是通过时间来排序的，所以会导致一个问题，最后在页面中生成的图标的列表会和预期的不一样（预期的是先添加的在前面），所以为了解决这个问题就需要通过时间来对生成的对象数组进行排序，就需要记录上传的时间，所以需要用对象来保存，但是在local storage中无法直接存储对象，需要进行转换，取出来的时候也同样需要进行转换，这个是需要注意的一点。</p><p>这里只实现了添加的功能，删除的功能就很简单了。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>开发我的chrome插件也是遇到了挺多的问题的，从样式效果到功能实现，不过也都解决了，也学到了很多的新东西，不错。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;其实这篇文章是建立在前面的&lt;a href=&quot;https://q32757468.github.io/2019/09/15/JS%E5%AE%9E%E7%8E%B0%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E5%B9%B6%E4%B8%94%E6%9C%AC%E5%9C%B0%E9%A2%84%E8%A7%88/&quot;&gt;实现上传图片并且预览&lt;/a&gt;的文章之上的，也交代了其实做这些只是为了完成我的chrome插件的开发中的自定义上传图片并且保存下来，当时一开始没有一个满意的思路，不过现在通过搜索一些资料也想到了一个我比较满意的思路，这篇博客就来将这个思路实现一下。&lt;br&gt;
    
    </summary>
    
    
      <category term="CSS" scheme="https://q32757468.github.io/tags/CSS/"/>
    
      <category term="JS" scheme="https://q32757468.github.io/tags/JS/"/>
    
      <category term="HTML" scheme="https://q32757468.github.io/tags/HTML/"/>
    
      <category term="chrome插件开发" scheme="https://q32757468.github.io/tags/chrome%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>jQuery原理解析</title>
    <link href="https://q32757468.github.io/2019/09/15/jQuery%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/"/>
    <id>https://q32757468.github.io/2019/09/15/jQuery原理解析/</id>
    <published>2019-09-15T08:44:24.000Z</published>
    <updated>2019-09-25T02:19:32.169Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在刚开始学习jQuery的时候就很配置能写出这样的库的人，虽然我能想到jQuery是通过内部封装了大量的方法来实现函数的扩展的，当时并不了解jQuery究竟是怎样将一个dom对象处理成一个jQuery对象的，又是如何处理其他对象的，直到我阅读了jQuery的源码还有结合别人对jQuery源码的理解我才理解了jQuery的源码的机制，也不得不感叹很多地方是如此的巧妙。所以这篇文章主要讲一下jQuery的核心函数以及一些机制。虽然jQuery已经有些过时了，当时我觉得学习了解这款优秀的项目也是提升自己的一大途径。<br><a id="more"></a></p></blockquote><h3 id="jQuery的基本结构"><a href="#jQuery的基本结构" class="headerlink" title="jQuery的基本结构"></a>jQuery的基本结构</h3><p>理解jQuery源码，可以从jQuery的结构开始，jQuery是采用构造函数模式开发的，jQuery本身就是一个构造函数，是一个类而jQuery中的大部分的方法都是再这个类的原型上的，所以只有jQuery的实例才能使用这些方法或者是属性，而这些我们也可以通过它的源码看出：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"> window, undefined </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> jQuery = <span class="function"><span class="keyword">function</span>(<span class="params"> </span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> jQuery.prototype.init( );</span><br><span class="line">    &#125;</span><br><span class="line">    jQuery.prototype = &#123;</span><br><span class="line">        <span class="keyword">constructor</span>: jQuery</span><br><span class="line">    &#125;</span><br><span class="line">    jQuery.prototype.init.prototype = jQuery.prototype;</span><br><span class="line">    window.jQuery = window.$ = jQuery;</span><br><span class="line">&#125;)( window );</span><br></pre></td></tr></table></figure></p><p>这可以说就是jQuery最基本的结构了</p><p>首先是最外层是用了匿名的立即执行函数来包裹以防止污染全局，至于为什么要给这个函数传递一个 window 作为参数这是因为方便代码的压缩，形参中的 window 在代码压缩之后可能就不是 window 了，为了能找到正确的window所以可以这样设置。</p><p>接下来就是名为 jQuery 的构造函数了，这也是整个 jQuery 中最为核心的一部分了，这个构造函数中包含了jQuery中的一些很重要的方法，这其中就包括<strong>创建一个jQuery对象</strong>时所用到的 <code>init()</code> 方法,你可能会奇怪为什么创建jQuery对象的会是 <code>init()</code> 方法而不是我们平时所用的 jQuery这个构造函数呢，其实我们通过源码也可以看出，<code>init()</code> 这个方法是 jQuery 构造函数中的一个方法，当我们要通过 jQuery构造函数创建一个 jQuery对象的时候向核心函数传递了需要创建的对象，但是实际上返回的是通过 <code>init()</code> 这个构造函数所创建的实例对象，再修改 init 的原型，虽然这个实例不是jQuery构造函数的实例但却有着一样的原型，而这个实例就是我们俗说的jQuery对象。这样就实现了通过jQuery构造函数中的方法创建了一个jQuery的对象。</p><p>最后再将 jQuery 和 $ 注册为全局，这样就实现了jQuery最基本的一个结构，可以在全局中使用jQuery了，我觉得这种方式是很巧妙的， 不看源码的话我是怎么都想不明白究竟是怎么回事，不过这也是可以学习的地方，理解了jQuery的源码是怎么回事，就可以自己尝试着开发一个类似的函数库了。</p><h3 id="jQuery构造函数接收不同的数据"><a href="#jQuery构造函数接收不同的数据" class="headerlink" title="jQuery构造函数接收不同的数据"></a>jQuery构造函数接收不同的数据</h3><p>经过前面代码的了解我们现在知道其实jQuery构造函数接收数据其实真正进行处理的是它里面的 init 方法，因为我们使用过jQuery所以我们知道接收不同的参数，所返回的数据也是不一样的，比如说接收一个选择器返回的就是一个jQuery对象，如果接收的是一个空字符串之类的话返回的也就是一个空的jQuery对象，我们可以来看一下究竟是怎么样返回一个jQuery对象的，可以先看看jQuery的源码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">init: <span class="function"><span class="keyword">function</span>(<span class="params"> selector, context, rootjQuery </span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> match, elem;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HANDLE: $(""), $(null), $(undefined), $(false)</span></span><br><span class="line"><span class="keyword">if</span> ( !selector ) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Handle HTML strings</span></span><br><span class="line"><span class="keyword">if</span> ( <span class="keyword">typeof</span> selector === <span class="string">"string"</span> ) &#123;</span><br><span class="line"><span class="keyword">if</span> ( selector.charAt(<span class="number">0</span>) === <span class="string">"&lt;"</span> &amp;&amp; selector.charAt( selector.length - <span class="number">1</span> ) === <span class="string">"&gt;"</span> &amp;&amp; selector.length &gt;= <span class="number">3</span> ) &#123;</span><br><span class="line"><span class="comment">// Assume that strings that start and end with &lt;&gt; are HTML and skip the regex check</span></span><br><span class="line">match = [ <span class="literal">null</span>, selector, <span class="literal">null</span> ];</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">match = rquickExpr.exec( selector );</span><br><span class="line">&#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></p><p>这是 init 方法中的一小部分的源码，通过这里我们可以看出这是通过if语句判断接收的是什么类型的数据从而返回符合期望的实例对象，知道了这一点我们就很好理解jQuery是如何创建一个jQuery对象的了。</p><h3 id="jQuery对象的属性与方法"><a href="#jQuery对象的属性与方法" class="headerlink" title="jQuery对象的属性与方法"></a>jQuery对象的属性与方法</h3><p>通过前面我们已经可以了解到其实jQuery对象就是通过jQuery构造函数中的 init 方法创建的一个实例，所以就很好理解了，jQuery对象所拥有的属性与方法全都是来自于jQuery构造函数的原型，通过原型机制 init 实例最终会去jQuery构造函数的原型中去找，所以就能找到所需要的属性或是方法，可以通过一张图来更加容易的理解：<br><img src="http://m.qpic.cn/psb?/V131x4904WMIoW/qNnXhAg3tLkK3lSCVzuas5G8eUg3Vci0gnV6FGwR1W0!/b/dL8AAAAAAAAA&bo=xgJXAgAAAAADB7M!&rf=viewer_4"></p><p>jQuery对象要调用某个jQuery中的方法或者属性的时候就会这样去找：<br>init实例（jQuery对象）=&gt; init构造函数 =&gt; jQuery.prototype</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>jQuery作为一款比较常用的库，理解学习其原理还是非常有必要的，对于提升自己也是非常有帮助的，可以多看看优秀的项目的源码来提升自己，学习别人的思路。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在刚开始学习jQuery的时候就很配置能写出这样的库的人，虽然我能想到jQuery是通过内部封装了大量的方法来实现函数的扩展的，当时并不了解jQuery究竟是怎样将一个dom对象处理成一个jQuery对象的，又是如何处理其他对象的，直到我阅读了jQuery的源码还有结合别人对jQuery源码的理解我才理解了jQuery的源码的机制，也不得不感叹很多地方是如此的巧妙。所以这篇文章主要讲一下jQuery的核心函数以及一些机制。虽然jQuery已经有些过时了，当时我觉得学习了解这款优秀的项目也是提升自己的一大途径。&lt;br&gt;
    
    </summary>
    
    
      <category term="JS" scheme="https://q32757468.github.io/tags/JS/"/>
    
      <category term="jQuery" scheme="https://q32757468.github.io/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>JS实现上传图片并且本地预览</title>
    <link href="https://q32757468.github.io/2019/09/15/JS%E5%AE%9E%E7%8E%B0%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E5%B9%B6%E4%B8%94%E6%9C%AC%E5%9C%B0%E9%A2%84%E8%A7%88/"/>
    <id>https://q32757468.github.io/2019/09/15/JS实现上传图片并且本地预览/</id>
    <published>2019-09-15T07:12:15.000Z</published>
    <updated>2019-09-25T02:21:08.001Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前面开发chrome插件还是遇到了挺多的困难的，其中一个就是如何将上传的图片缓存到本地，思路很简单，但是一直不知道该如何实现，现在有了办法了，主要是想通过上传图片然后通过img标签将其显示出来，再通过 localStorage 对其进行储存，这样是一个比较好的方案，我这篇文章所写的图片的预览也就是对第一步的一个实现。<br><a id="more"></a></p></blockquote><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p>其实思路还是比较简单的，我们都知道 input file 有一个 files 对象，这个对象中就保存了上传的文件的信息，我们只需要将上传的文件通过一些方法转化为 url ，然后通过 img 标签的 src 来加载它，就可以实现我们想要的功能了，这里主要通过两种不依赖后端的方式来实现。</p><h3 id="使用-FileReader"><a href="#使用-FileReader" class="headerlink" title="使用 FileReader"></a>使用 FileReader</h3><p><strong>FileReader</strong>也是 html5 的一个新的 API  ，可以通过它来处理文件：</p><p>HTML：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">class</span>=<span class="string">"uploadFile"</span> <span class="attr">name</span>=<span class="string">"test"</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"preview"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这里只做演示，所以代码很简单，主要就是一个上传文件的input，然后一个用来显示图片的 img 标签。</p><p>JS：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> uploadFile = $(<span class="string">'.uploadFile'</span>);</span><br><span class="line">  <span class="keyword">const</span> preview = $(<span class="string">'.preview'</span>);</span><br><span class="line">  uploadFile.change(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> file = $(<span class="keyword">this</span>)[<span class="number">0</span>].files[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span> fr = <span class="keyword">new</span> FileReader();</span><br><span class="line">    fr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 通过result属性获取到转化后的url</span></span><br><span class="line">      preview.attr(&#123; <span class="string">"src"</span>: <span class="keyword">this</span>.result &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    fr.readAsDataURL(file);<span class="comment">//将图片作为url读出提交给result</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="使用-window-URL"><a href="#使用-window-URL" class="headerlink" title="使用 window.URL"></a>使用 window.URL</h3><p>html部分的代码是一样的。</p><p>JS：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> uploadFile = $(<span class="string">'.uploadFile'</span>);</span><br><span class="line">  <span class="keyword">const</span> preview = $(<span class="string">'.preview'</span>);</span><br><span class="line">  uploadFile.change(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> file = $(<span class="keyword">this</span>)[<span class="number">0</span>].files[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">//通过url对象来将图片转化为url</span></span><br><span class="line">    <span class="keyword">let</span> URL = <span class="built_in">window</span>.URL || <span class="built_in">window</span>.webkitURL;</span><br><span class="line">    <span class="keyword">let</span> imgURL = URL.createObjectURL(file);</span><br><span class="line">    preview.attr(&#123; <span class="string">"src"</span>: imgURL &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>最后可以来看一下实现之后的效果：<br><img src="http://m.qpic.cn/psb?/V131x4904WMIoW/xbxICjHBzOXFUs7lSMdodJbW6dD*wcK7vkOuWjf7wKQ!/b/dLgAAAAAAAAA&bo=WgMoAQAAAAADB1I!&rf=viewer_4"></p><h3 id="今天新学的一点小知识"><a href="#今天新学的一点小知识" class="headerlink" title="今天新学的一点小知识"></a>今天新学的一点小知识</h3><p>今天这里又学到一些新东西，就是event.target,这个东西和this有点像，但是又有区别，target指向的dom对象永远不会变化，而this的指向可能会因为冒泡之类的而改变.</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>其实总的来说不管是使用那种方式来实现预览图片其原理都是一样的。</p><p>区别就在于 转化为 url 时所用的方法不一样。</p><p>还有就是兼容性问题，其实都差不多，老的ie一样还是都不兼容，可能用 <strong>FileReader</strong> 会好一点。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;前面开发chrome插件还是遇到了挺多的困难的，其中一个就是如何将上传的图片缓存到本地，思路很简单，但是一直不知道该如何实现，现在有了办法了，主要是想通过上传图片然后通过img标签将其显示出来，再通过 localStorage 对其进行储存，这样是一个比较好的方案，我这篇文章所写的图片的预览也就是对第一步的一个实现。&lt;br&gt;
    
    </summary>
    
    
      <category term="CSS" scheme="https://q32757468.github.io/tags/CSS/"/>
    
      <category term="JS" scheme="https://q32757468.github.io/tags/JS/"/>
    
      <category term="HTML" scheme="https://q32757468.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>JS实现自定义鼠标右键菜单</title>
    <link href="https://q32757468.github.io/2019/09/12/JS%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%AE%9A%E4%B9%89%E9%BC%A0%E6%A0%87%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95/"/>
    <id>https://q32757468.github.io/2019/09/12/JS实现自定义鼠标右键菜单/</id>
    <published>2019-09-12T07:27:35.000Z</published>
    <updated>2019-09-25T02:40:05.261Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最近在我开发chrome扩展插件的过程中准备实现通过鼠标右键来打开一个菜单来添加删除导航以及修改背景图片等一系列的功能，这里来记录一下具体是如何实现这样的功能的以及注意实现。<br><a id="more"></a></p></blockquote><p>这里通过一个小demo来进行演示，整体还是挺简单的，只要注意一些细节就好了。</p><h3 id="先来看一下效果图："><a href="#先来看一下效果图：" class="headerlink" title="先来看一下效果图："></a>先来看一下效果图：</h3><p><img src="http://m.qpic.cn/psb?/V131x4904WMIoW/KnKE48CSRXQlxQPSEETunFPfZa1dZW0UItDZYcYcmBE!/b/dAYBAAAAAAAA&bo=kgJQAgAAAAADB.A!&rf=viewer_4"><br>这个小的菜单框就是我自定义的鼠标右键菜单，这里没有太多的修饰，样式根据情况进行适当的调整就可以了。</p><h3 id="HTML部分代码"><a href="#HTML部分代码" class="headerlink" title="HTML部分代码"></a>HTML部分代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这个box模拟页面中的一部分 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 而这个列表就是我们需要的右键菜单了 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单一<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单二<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单三<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单四<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="CSS部分"><a href="#CSS部分" class="headerlink" title="CSS部分"></a>CSS部分</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">  * &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="comment">/* 这个菜单默认是不显示的 */</span></span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>css唯一要注意的就是默认这个菜单是不显示的。</p><h3 id="JS部分"><a href="#JS部分" class="headerlink" title="JS部分"></a>JS部分</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里用了jQuery来写，不用也是差不多的</span></span><br><span class="line"> &lt;script src=<span class="string">"./js/jquery-3.4.1.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> list = $(<span class="string">'.list'</span>);</span><br><span class="line">      <span class="keyword">const</span> box = $(<span class="string">'.box'</span>);</span><br><span class="line">      <span class="comment">// 鼠标右键事件</span></span><br><span class="line">      box.contextmenu(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在return false 之前可以写自己想要的功能的代码</span></span><br><span class="line">        e = e || <span class="built_in">window</span>.event;</span><br><span class="line">        <span class="comment">// 将菜单的位置设置为鼠标右键时的位置</span></span><br><span class="line">        list.css(&#123;</span><br><span class="line">          <span class="string">'top'</span>: e.pageY + <span class="string">'px'</span>,</span><br><span class="line">          <span class="string">'left'</span>: e.pageX + <span class="string">'px'</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">        list.show();<span class="comment">//将菜单显示出来</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//禁用了原本的鼠标右键菜单</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 单击网页任意位置使菜单隐藏</span></span><br><span class="line">      $(<span class="built_in">window</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        list.hide();</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>在注释中已经把需要注意的地方写出来了，这里在总结一下：</p><ul><li><p>contextmenu 事件是鼠标右键的事件</p></li><li><p>基本的原理就是通过鼠标右键的事件将我们自己定义的右键菜单定位到鼠标指针所在的位置，并且将其显示出来，然后鼠标左键单击时需要将这个菜单进行隐藏。</p></li><li><p>一定要将逻辑代码写在鼠标右键事件中的 <code>return false</code>之前。</p></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>鼠标右键自定义菜单本身挺简单的，这里在开发chrome插件的过程中使用到了，所以记录一下。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;最近在我开发chrome扩展插件的过程中准备实现通过鼠标右键来打开一个菜单来添加删除导航以及修改背景图片等一系列的功能，这里来记录一下具体是如何实现这样的功能的以及注意实现。&lt;br&gt;
    
    </summary>
    
      <category term="页面小功能" scheme="https://q32757468.github.io/categories/%E9%A1%B5%E9%9D%A2%E5%B0%8F%E5%8A%9F%E8%83%BD/"/>
    
    
      <category term="JS" scheme="https://q32757468.github.io/tags/JS/"/>
    
      <category term="chrome插件开发" scheme="https://q32757468.github.io/tags/chrome%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Vuex的基本使用</title>
    <link href="https://q32757468.github.io/2019/09/11/Vuex%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>https://q32757468.github.io/2019/09/11/Vuex的基本使用/</id>
    <published>2019-09-11T08:49:32.000Z</published>
    <updated>2019-09-25T02:29:40.507Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Vuex作为vue全家桶之一，使用vue开发的过程中有着无可替代的作用，可以解决多个组件中传值的问题，并且本身的使用也非常的简单，有着非常强大的作用。我把它理解为一个数据共享中心，所有的组件都共享这里面的数据，并且都可以对其中的数据进行修改。来看看它是如何发挥作用的。<br><a id="more"></a></p></blockquote><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>首先是安装vuex，可以通过npm来安装vuex，注意，因为是生产所需要的依赖，所以需要<code>-S</code>选项：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vuex -S</span><br></pre></td></tr></table></figure></p><p>当然直接从<a href="https://vuex.vuejs.org/zh/installation.html" target="_blank" rel="noopener">官网</a>下载然后引用也是可以的。</p><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>首先需要在项目目录下创建一个名为 <strong>store.js</strong> 的文件，这个文件就是我们vuex的主要文件，如果是在项目比较大的情况下，可以将这个文件中的各个部分单独拆分成一个文件，然后将所有的文件放在名为store的文件夹内。</p><h3 id="store-js"><a href="#store-js" class="headerlink" title="store.js"></a>store.js</h3><p>来看看<strong>store.js</strong>这个文件的基本内容及作用：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//正常的引入</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  <span class="comment">// 通过state对象来存储数据，然后可以在组件中通过this.$store.state来获取我们想要的数据</span></span><br><span class="line">  state: &#123;</span><br><span class="line">    count: <span class="number">1000</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// getters对象，这个对象和计算属性非常的像，用法也非常的像</span></span><br><span class="line">  getters: &#123;</span><br><span class="line">    countAdd1(state) &#123;</span><br><span class="line">      <span class="keyword">return</span> state.count + <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//mutations是修改数据的地方，只有这里可以修改修改state中的数据</span></span><br><span class="line">  <span class="comment">// 通过mutations就像是注册了一个事件一样，但是并没有将事件应用起来，还需要通过commit来将其进行提交</span></span><br><span class="line">  mutations: &#123;</span><br><span class="line">    add1(state) &#123;<span class="comment">//可以接收第二个参数作为这个函数的额外参数，最好是用一个对象来定义</span></span><br><span class="line">      state.count++</span><br><span class="line">    &#125;,</span><br><span class="line">    redu1(state) &#123;</span><br><span class="line">      state.count--</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// actions可以通过提交mutations来变更状态并且支持异步的操作</span></span><br><span class="line">  <span class="comment">//actions接收一个和当前store实例具有相同的方法和属性的 context 对象，所以可以通过 context.commit 来提交一个 mutations</span></span><br><span class="line">  actions: &#123;</span><br><span class="line">    add1(context) &#123;<span class="comment">//同样，在分发的时候也可以接收额外的参数</span></span><br><span class="line">      context.commit(<span class="string">'add1'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    redu1(context) &#123;</span><br><span class="line">      context.commit(<span class="string">'redu1'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>通过这样就相当于创建了一个数据的共享中心，然后就可以在各个组件中使用其中的数据了</p><h3 id="在组件中使用"><a href="#在组件中使用" class="headerlink" title="在组件中使用"></a>在组件中使用</h3><p>还是以这个文件为例子，来看看如何使用其中的数据：</p><h4 id="在组件中直接使用了state中的数据："><a href="#在组件中直接使用了state中的数据：" class="headerlink" title="在组件中直接使用了state中的数据："></a>在组件中直接使用了state中的数据：</h4><p>store.js：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">state: &#123;</span><br><span class="line">  count: <span class="number">1000</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>APP.vue:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;这是count的数值：&#123;&#123;<span class="keyword">this</span>.$store.state.count&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br></pre></td></tr></table></figure></p><p><img src="http://m.qpic.cn/psb?/V131x4904WMIoW/MOPKs8cQWsBGqhcFPp9FBaS4PJmKzKX2jdjDWGHzkN0!/b/dL4AAAAAAAAA&bo=FAEvAAAAAAADBxg!&rf=viewer_4"><br>可以看到，成功获取了我们想要的数值。</p><h4 id="通过-getters获得计算后的值："><a href="#通过-getters获得计算后的值：" class="headerlink" title="通过 getters获得计算后的值："></a>通过 <strong>getters</strong>获得计算后的值：</h4><p>store.js：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">getters: &#123;</span><br><span class="line">  countAdd1(state) &#123;</span><br><span class="line">    <span class="keyword">return</span> state.count + <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>c1.vue:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是getters count+1后的数值：&#123;&#123;this.$store.getters.countAdd1&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><img src="http://m.qpic.cn/psb?/V131x4904WMIoW/FO1*dV28OJjel4VR6FqH7KJVf6jBdmrgJDA540jvBTo!/b/dL4AAAAAAAAA&bo=sgFBAAAAAAADB9A!&rf=viewer_4"><br>可以看出成功获取了通过getters计算后的值，并且我这里是在另一个组件中使用的数据，从这里也可以看出vuex管理下的数据共同是十分方便的。</p><h4 id="通过-mutations-来修改数据"><a href="#通过-mutations-来修改数据" class="headerlink" title="通过 mutations 来修改数据"></a>通过 mutations 来修改数据</h4><p>前面的注释中也提到过 mutations 是修改数据的唯一途径，所有要修改state中数据的操作都必须在 <strong>mutations</strong>完成:</p><p>store.js：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mutations: &#123;</span><br><span class="line">  add1(state) &#123;<span class="comment">//可以接收第二个参数作为这个函数的额外参数，最好是用一个对象来定义</span></span><br><span class="line">    state.count++</span><br><span class="line">  &#125;,</span><br><span class="line">  redu1(state) &#123;</span><br><span class="line">    state.count--</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>APP.vue:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"add"</span> @<span class="attr">click</span>=<span class="string">"add1"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"redu"</span> @<span class="attr">click</span>=<span class="string">"redu1"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  add1() &#123;<span class="comment">//可以接收额外的参数，推荐使用对象来传递多个参数</span></span><br><span class="line">    <span class="keyword">this</span>.$store.commit(<span class="string">"add1"</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  redu1() &#123;</span><br><span class="line">    <span class="keyword">this</span>.$store.commit(<span class="string">"redu1"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://m.qpic.cn/psb?/V131x4904WMIoW/Wr3laexW93nJPZyimOu.efGUQ1HBnZnuuY8cikitiBI!/b/dL8AAAAAAAAA&bo=cQFfAAAAAAADBw0!&rf=viewer_4"></p><p>可以看出可以通过 <strong>mutations</strong> 来对state中的数据进行修改，不过要使其生效必须要通过 <strong>commit</strong>使其生效，可以看出我这里使通过在组件中的methods中通过两个方法来进行提交。</p><p><strong>关于mutations要注意的几点：</strong></p><ul><li><p>mutations相当于是注册了事件一样，要生效需要提交，然后调用相应的方法</p></li><li><p>mutations 中不能写异步的任务，这点要十分的注意</p></li><li><p>mutations 中定义的方法可以接收额外的参数，并且推荐是使用对象来传递额外的多个参数，在通过<strong>commit</strong>进行提交的时候可以传递相应的参数，我这里没有使用，但是类似与这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$store.commit(<span class="string">"add1"</span>,&#123;<span class="attr">count2</span>:<span class="number">999</span>&#125;);</span><br></pre></td></tr></table></figure></li></ul><h4 id="action-的使用"><a href="#action-的使用" class="headerlink" title="action 的使用"></a>action 的使用</h4><p><strong>Action</strong> 的作用与 mutations 类似，不过区别就是 Action 提交的是 mutations，而不是直接修改state中的数据，并且最终重要的是在<strong>Action 中可以进行异步的操作</strong>，这是action的使用：<br>store.js：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//actions接收一个和当前store实例具有相同的方法和属性的 context 对象，所以可以通过 context.commit 来提交一个 mutations</span></span><br><span class="line">actions: &#123;</span><br><span class="line">  add1(context) &#123;<span class="comment">//同样，在分发的时候也可以接收额外的参数</span></span><br><span class="line">    context.commit(<span class="string">'add1'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  redu1(context) &#123;</span><br><span class="line">    context.commit(<span class="string">'redu1'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>APP.vue:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"add"</span> @<span class="attr">click</span>=<span class="string">"add1"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"redu"</span> @<span class="attr">click</span>=<span class="string">"redu1"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  add1() &#123;</span><br><span class="line">    <span class="keyword">this</span>.$store.dispatch(<span class="string">"add1"</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  redu1() &#123;</span><br><span class="line">    <span class="keyword">this</span>.$store.dispatch(<span class="string">"redu1"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是就没有通过 mutations 的方式来进行提交，而是通过 action 来提交 mutations ，然后通过在组件中分发 action 来实现对数据进行修改 ，这种方式实现的最终效果和上面的 mutations 演示所实现的效果是一样的，不过最大的区别就是在 action中提交 mutations 的时候是可以进行异步操作的。</p><h3 id="使用-mutations-和-action-来进行修改数据的区别"><a href="#使用-mutations-和-action-来进行修改数据的区别" class="headerlink" title="使用 mutations 和 action 来进行修改数据的区别"></a>使用 mutations 和 action 来进行修改数据的区别</h3><p>这里之所以单独提出来将是因为刚开始的时候不太清楚这两个究竟是怎么回事，现在弄明白了，所以单独详细的讲一下：</p><ul><li><p>首先就是使用步骤方面的区别，在 mutations 中定义的方法只需要在组件中通过 commit 提交就可以使用了，如果是使用 action 的话则需要先在 mutations 中定义修改数据的方法，然后在 action 中再定义方法提交 mutations 中的方法，最后需要使用的话则需要在组件中通过 dispatch 来分发 action 中定义的方法使修改生效。</p></li><li><p>再一个就是定义在 mutations 的方法不能写异步的任务，但是写在 action 中的方法则可以写异步的任务。</p></li><li><p>这里提一下 commit 和 dispatch 的区别，简单来说 commit是用来提交 mutations 中的方法的， dispatch 是用来提交 action 中的方法的，前者不支持异步，后者支持异步。</p></li></ul><p>在不需要异步任务的情况下直接使用 mutations 和使用 action的结果没有什么区别，主要区别就是在需要异步的情况下，推荐是无论什么情况都使用action来提交。</p><h3 id="使用-mapState-、mapGetters-、-mapMutations"><a href="#使用-mapState-、mapGetters-、-mapMutations" class="headerlink" title="使用 mapState 、mapGetters 、 mapMutations"></a>使用 mapState 、mapGetters 、 mapMutations</h3><p>在官方文档中者三个方法被称为辅助函数，这样理解是没有什么问题的，因为作用其实也就是使我们使用vux更加的简便，拿来看看他们究竟能起到怎么样的作用：</p><p>  如果我们<strong>不使用这些辅助函数</strong>，那么我们经常要很繁琐的书写一些代码来使用vuex，就像是这样：<br>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是getters count+1后的数值：&#123;&#123;this.$store.getters.countAdd1&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>  可以看出这里通过<code>this.$store.getters</code>这么长的代码来获取数据是非常不方便的一件事情，所以就需要<strong>使用辅助函数</strong>,辅助函数的使用也是非常的简单，我们一个个来看一下（一样的还是基于前面的例子）。</p><h4 id="mapState-辅助函数"><a href="#mapState-辅助函数" class="headerlink" title="mapState 辅助函数"></a>mapState 辅助函数</h4><p>使用之前需要将其引入：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapState &#125; <span class="keyword">from</span> <span class="string">"vuex"</span>;</span><br></pre></td></tr></table></figure></p><p>在 <code>computed</code>中使用：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  <span class="comment">//这里使用了扩展运算符，将mapState返回的对象扩展到computed对象当中，以保证不会影响 computed 原本的使用。</span></span><br><span class="line">  ...mapState(&#123;</span><br><span class="line">    <span class="comment">// 第一种方式，使用箭头函数，通过mapState将state中的count映射为此组件date中的count</span></span><br><span class="line">    count: <span class="function"><span class="params">state</span> =&gt;</span> state.count</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更加简便的一种写法，与上面的作用是相同的</span></span><br><span class="line">    <span class="comment">// count: "count",</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 因为键值都是一样的，所以还可以写的更加的简单</span></span><br><span class="line">    <span class="comment">// count,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为了不改变this的指向，必须用常规函数</span></span><br><span class="line">    <span class="comment">// count(state) &#123;</span></span><br><span class="line">    <span class="comment">//   return state.count + this.localCount;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里这几种写法的结果都是一样的，可以根据情况进行选择，这样使用之后的结果都是一样的。</p><p>之后就可以像使用data中的数据一样使用原本state中的数据了:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是count的数值：&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>当页面中重复使用到同一数据的时候就可以提供很大的便利。</p><h4 id="mapState-辅助函数-1"><a href="#mapState-辅助函数-1" class="headerlink" title="mapState 辅助函数"></a>mapState 辅助函数</h4><p>使用之前需要将其引入：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapGetters &#125; <span class="keyword">from</span> <span class="string">"vuex"</span>;</span><br></pre></td></tr></table></figure></p><p>同样也是在<code>computed</code>中使用，使用起来与 mapState 类似：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  ...mapGetters([<span class="string">"countAdd1"</span>]) <span class="comment">//这里是使用的数组的形式，也可以使用对来来进行重命名</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>之后使用起来也就更加的简便了：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是getters count+1后的数值：&#123;&#123;countAdd1&#125;&#125;很棒！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="mapMutations-辅助函数"><a href="#mapMutations-辅助函数" class="headerlink" title="mapMutations  辅助函数"></a>mapMutations  辅助函数</h4><p>当我们在组件中对 mutations 进行提交的时候就可以使用 mapMutations 来进行简化。</p><p>同样使用前需进行引入：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapMutations &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br></pre></td></tr></table></figure></p><p>这里引用了官网的例子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  methods: &#123;</span><br><span class="line">    ...mapMutations([</span><br><span class="line">      <span class="string">'increment'</span>, <span class="comment">// 将 `this.increment()` 映射为 `this.$store.commit('increment')`</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// `mapMutations` 也支持载荷：</span></span><br><span class="line">      <span class="string">'incrementBy'</span> <span class="comment">// 将 `this.incrementBy(amount)` 映射为 `this.$store.commit('incrementBy', amount)`</span></span><br><span class="line">    ]),</span><br><span class="line">    ...mapMutations(&#123;</span><br><span class="line">      add: <span class="string">'increment'</span> <span class="comment">// 将 `this.add()` 映射为 `this.$store.commit('increment')`</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>之后我们在组件中使用的时候就会变得更加简便：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"add"</span> @<span class="attr">click</span>=<span class="string">"increment"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong> 在大量重复使用同一数据的情况下使用辅助函数可以提供便利，所以根据情况合理使用吧！</strong></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>vuex是一个简单使用的工具，但是功能很强大，可以解决很多的问题，在适当的场景适当使用可以发挥很强作用。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Vuex作为vue全家桶之一，使用vue开发的过程中有着无可替代的作用，可以解决多个组件中传值的问题，并且本身的使用也非常的简单，有着非常强大的作用。我把它理解为一个数据共享中心，所有的组件都共享这里面的数据，并且都可以对其中的数据进行修改。来看看它是如何发挥作用的。&lt;br&gt;
    
    </summary>
    
    
      <category term="JS" scheme="https://q32757468.github.io/tags/JS/"/>
    
      <category term="VUE" scheme="https://q32757468.github.io/tags/VUE/"/>
    
  </entry>
  
  <entry>
    <title>sass的简单使用</title>
    <link href="https://q32757468.github.io/2019/08/29/sass%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>https://q32757468.github.io/2019/08/29/sass的简单使用/</id>
    <published>2019-08-29T08:06:02.000Z</published>
    <updated>2019-09-25T02:31:15.967Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sass是一门css的扩展性语言，起初在没有使用sass之前，我写css其实并不是一件让人很舒服的过程，因为写的过程经常要写很多重复的代码，父级选择器也要一直复制来复制去，也不是很好维护和管理，直到我认识了sass，第一次听说css扩展语言还是在bootstrap官网，看到说bootstrap4使用sass替代了less，才知道css还有扩展语言这么一回事，特别是当上手开始使用sass之后真的是会让人感觉特别的惊喜，因为写起来太舒服了。<br><a id="more"></a></p></blockquote><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>虽然中文文档中有安装的教程，但是还是要另外提一下，那个太久了，如果完全按照那个来的话最终是安装不了的。</p><p>sass 是基于 ruby 开发的，所以安装 sass 之前需要先安装 ruby，直接到<a href="https://rubyinstaller.org/downloads/" target="_blank" rel="noopener">官网</a>下载安装即可（记得添加进PATH）。 </p><p>通过命令行查看版本，如果出现版本信息则安装成功：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ruby -v</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ruby 2.5.5p157 (2019-03-15 revision 67260) [x64-mingw32]</span></span><br></pre></td></tr></table></figure></p><p>然后是替换gem源，换成速度更快的国内的源：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gem sources --add https://gems.ruby-china.org/ --remove https://rubygems.org/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> gem sources -l</span></span><br><span class="line">*** CURRENT SOURCES ***</span><br><span class="line"></span><br><span class="line">https://gems.ruby-china.org</span><br><span class="line"><span class="meta">#</span><span class="bash"> 请确保只有 gems.ruby-china.org</span></span><br></pre></td></tr></table></figure></p><blockquote><p>与中文文档有区别的也就是这里，中文文档中的国内镜像的地址已经不维护使用了，所以要用新的地址。</p></blockquote><p>然后就可以开始安装使用sass了<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gem install sass</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> gem install compass</span></span><br></pre></td></tr></table></figure></p><p>具体的使用方法可以参考<a href="https://www.sass.hk/install/" target="_blank" rel="noopener">中文网</a> ，因为通常都是在编辑器中配合插件使用，我是使用vscode配合Easy Sass插件进行自动编译，所以这里就不做过多的介绍了。</p><h3 id="sass中比较常用的一些特性"><a href="#sass中比较常用的一些特性" class="headerlink" title="sass中比较常用的一些特性"></a>sass中比较常用的一些特性</h3><p>在sass中有非常多的功能与特性，我在这里只介绍一些比较常用的特性，光是使用这些特性就已经能够使书写css样式轻松非常的多了。</p><h4 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h4><p>我之前没有接触过css的扩展语言，当我第一次接触到sass的嵌套的时候我就觉得这个太方便了，因为之前写css总要经常性的重复书写父级的选择器，这是很麻烦的一件事情，但是在sass中可以直接嵌套书写：</p><ul><li><p>在css中,我们经常需要重复写父级：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> <span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main</span> <span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>但是在sass中，直接嵌套在其中就可以了：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: antiquewhite;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line"></span><br><span class="line">  .left &#123;</span><br><span class="line">    @<span class="keyword">extend</span> .position;</span><br><span class="line">    left: $bj;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.right</span> &#123;</span><br><span class="line">    @extend .position;</span><br><span class="line">    right: $bj;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>可以看出这样使非常的方便，并且我认为这不仅仅是使我们少写了很多的css重复代码，这还使我们的css结构看起来更加的清晰，子级与父级的关系一目了然，并且因为有了这样清晰的结构，所以在vscode的大纲中的结构也是一目了然，这使得后期维护变得非常的方便，再也不用担心找不到想找的样式的代码在哪里了。我觉得光这一个特性就已经使书写css的过程发生质变了。</p><p>这样嵌套生成的是后代选择器，如果要嵌套出子代选择器或者兄弟选择器只需要在前面加上相应的符号就好了：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: antiquewhite;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line"></span><br><span class="line">  &gt; .left &#123;</span><br><span class="line">    @<span class="keyword">extend</span> .position;</span><br><span class="line">    left: $bj;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以用<code>&amp;</code>替代父级，比如说用到hover的时候：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  :hover &#123;</span><br><span class="line">    <span class="selector-tag">color</span>: <span class="selector-tag">aqua</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>直接这样写是不能如我们所想的那样解析的，需要像这样写，用<code>&amp;</code>代替父级：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">```<span class="selector-tag">css</span></span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    <span class="selector-tag">color</span>: <span class="selector-tag">aqua</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看一下，通过查看大纲就可以很轻松的定位相应css的位置了：<br><img src="http://m.qpic.cn/psb?/V131x4904WMIoW/wALp2JVAFMoCH3xzdD3h5HSfGr0zJ990HHgKXQ.x3PM!/b/dFQBAAAAAAAA&bo=NgGuAAAAAAADB7s!&rf=viewer_4"></p><p>这里再提一下其实不仅仅是选择器可以进行嵌套，其实属性也是可以嵌套的，但是因为可能书写起来不是那么的方便并且使用场景也相对较少所以就不多提了。</p><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>sass中的变量也是一个能够提升开发维护效率的一个特性，因为我们经常要对很多的选择器设置一样的属性，通常都是通过复制粘贴来实现，这不方便并且不便于维护，当要修改时全部都得改一遍十分的麻烦，通过再sass中使用变量就可以解决这个问题。</p><p>变量的使用也是十分的简单，通过<code>$</code>来设置变量名，就像这样：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$bj:100px;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  @extend .position;</span><br><span class="line">  left: $bj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  @extend .position;</span><br><span class="line">  right: $bj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样只要是用到了变量的地方就都会被变量的属性值替代了，只要修改了变量，所有用到了相应变量的地方也会一起随着变化，所以这会是维护变得极其的简单。</p><p>要注意的一点是变量只在定义的相应的区域内有效，超出了范围就没有效果了。</p><h4 id="混合器"><a href="#混合器" class="headerlink" title="混合器"></a>混合器</h4><p>我的理解是混合器更像是大段的变量一样，和变量类似，可以用来设定那些会重复使用的代码片段，并且还可以传递参数用来进行细微的区分。</p><p>比如说我这里有两个小块，和一个大块，两个小块在大块中，区别就是一个在左，一个在右，剩下的都一样，这个时候我们就可以使用混合器来复用代码了:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: antiquewhite;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line"></span><br><span class="line">//将通用的代码提取出来</span><br><span class="line">  @<span class="keyword">mixin</span> position &#123;</span><br><span class="line">    <span class="selector-tag">position</span>: <span class="selector-tag">absolute</span>;</span><br><span class="line">    <span class="selector-tag">top</span>: 50%;</span><br><span class="line">    <span class="selector-tag">transform</span>: <span class="selector-tag">translateX</span>(<span class="selector-tag">-50</span>%);</span><br><span class="line">    <span class="selector-tag">-webkit-transform</span>: <span class="selector-tag">translateX</span>(<span class="selector-tag">-50</span>%);</span><br><span class="line">    <span class="selector-tag">-moz-transform</span>: <span class="selector-tag">translateX</span>(<span class="selector-tag">-50</span>%);</span><br><span class="line">    <span class="selector-tag">-ms-transform</span>: <span class="selector-tag">translateX</span>(<span class="selector-tag">-50</span>%);</span><br><span class="line">    <span class="selector-tag">-o-transform</span>: <span class="selector-tag">translateX</span>(<span class="selector-tag">-50</span>%);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">//通过@include引入</span><br><span class="line">  <span class="selector-class">.left</span> &#123;</span><br><span class="line">    @include position;</span><br><span class="line">    <span class="selector-tag">left</span>: 100<span class="selector-tag">px</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.right</span> &#123;</span><br><span class="line">    @include position;</span><br><span class="line">    <span class="selector-tag">right</span>: 100<span class="selector-tag">px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样就实现了代码复用，对于这些公用的样式以后直接修改混合器中的内容就可以了</p><p>甚至还可以通过使用参数来进一步的简化：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: antiquewhite;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line"></span><br><span class="line">  //可以通过键值对的形式来设置默认参数</span><br><span class="line">  @<span class="keyword">mixin</span> position ($l:unset, $r:unset) &#123;</span><br><span class="line">    <span class="selector-tag">position</span>: <span class="selector-tag">absolute</span>;</span><br><span class="line">    <span class="selector-tag">top</span>: 50%;</span><br><span class="line">    <span class="selector-tag">transform</span>: <span class="selector-tag">translateX</span>(<span class="selector-tag">-50</span>%);</span><br><span class="line">    <span class="selector-tag">-webkit-transform</span>: <span class="selector-tag">translateX</span>(<span class="selector-tag">-50</span>%);</span><br><span class="line">    <span class="selector-tag">-moz-transform</span>: <span class="selector-tag">translateX</span>(<span class="selector-tag">-50</span>%);</span><br><span class="line">    <span class="selector-tag">-ms-transform</span>: <span class="selector-tag">translateX</span>(<span class="selector-tag">-50</span>%);</span><br><span class="line">    <span class="selector-tag">-o-transform</span>: <span class="selector-tag">translateX</span>(<span class="selector-tag">-50</span>%);</span><br><span class="line">    left: $l;</span><br><span class="line">    right: $r;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.left</span> &#123;</span><br><span class="line">    @include position(100px, unset);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.right</span> &#123;</span><br><span class="line">    @include position(unset, 100px);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看出通过参数就可以完成对不一样的地方进行设置。</p><p>这里再来说一下混合器的实现原理，原理其实是代码的复制，也就是将混合器中的代码复制到包含这个混合器的选择器中。缺点可能就是编译后的css文件会有比较多的代码。</p><p>来看下效果：<br><img src="http://m.qpic.cn/psb?/V131x4904WMIoW/uuKElZCTeEIEHbXsDovri2dHVpsxQ6Ci0bOC2rZTD.4!/b/dL4AAAAAAAAA&bo=fQcEAwAAAAADB18!&rf=viewer_4"></p><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>继承的就是我们理解的那个继承，可以在一个选择其中继承另一个选择器的全部内容（包括与其相关的选择器），继承的作用与用法与混合器有些相似，但是区别在于继承的一定也是一个选择器并非一个单独的代码段，在实现的原理方面，混合器是单纯的复制代码，而继承则是复制选择器，可以将上面的例子通过继承来实现：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: antiquewhite;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line"></span><br><span class="line">  //定义一个要继承的类，相当于如果我们不使用继承，而使用两个类，那么这个就是基类</span><br><span class="line">  <span class="selector-class">.position</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-50%);</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translateX</span>(-50%);</span><br><span class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">translateX</span>(-50%);</span><br><span class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">translateX</span>(-50%);</span><br><span class="line">    <span class="attribute">-o-transform</span>: <span class="built_in">translateX</span>(-50%);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $bj:100px;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.left</span> &#123;</span><br><span class="line">    @extend .position;</span><br><span class="line">    left: $bj;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.right</span> &#123;</span><br><span class="line">    @extend .position;</span><br><span class="line">    right: $bj;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其实相较于使用混合器，我更喜欢使用继承来实现复用，因为这样编译后的代码更加的少，但是混合器的优势也很明显，可以参数。</p><blockquote><p>你完全可以放心地继承有后代选择器修饰规则的选择器，不管后代选择器多长，但有一个前提就是，不要用后代选择器去继承。</p></blockquote><h4 id="导入样式文件"><a href="#导入样式文件" class="headerlink" title="导入样式文件"></a>导入样式文件</h4><p>css提供的导入css文件的方式速度比较慢，所以sass中还提供了一种导入sass文件的方式，当然也可以导入css文件只不过这样做的话采用的还是css的那种方式，不过其实现在都是采用打包工具进行开发在页面入口文件中导入不同的样式文件，都不会在css中去导入样式文件，不过还是要简单的提一下。</p><p>在sass中可以通过 <code>@import</code>来导入样式sass文件，并且可以不需要添加后缀名，比如<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">"content"</span></span><br></pre></td></tr></table></figure></p><p>也可以导入部分的sass文件，比如一个sass文件只是需要的部分代码，那么它的文件名就可以以<code>_</code>开头，这样做的话就不会被编译了，导入的时候也可以省略前面的<code>_</code>。</p><p>导入css文件的话只需要上css后缀就可以，不过这种方式还是通过css的比较慢的方式来导入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@import &quot;content2.css&quot;</span><br></pre></td></tr></table></figure></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>sass有着众多强大的特性，那怕仅使用我这篇文章提到的特性都已经可以大大提升开发效率以及维护的效率了，太好用了，熟练掌握之后就可以愉快的书写样式了！</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sass是一门css的扩展性语言，起初在没有使用sass之前，我写css其实并不是一件让人很舒服的过程，因为写的过程经常要写很多重复的代码，父级选择器也要一直复制来复制去，也不是很好维护和管理，直到我认识了sass，第一次听说css扩展语言还是在bootstrap官网，看到说bootstrap4使用sass替代了less，才知道css还有扩展语言这么一回事，特别是当上手开始使用sass之后真的是会让人感觉特别的惊喜，因为写起来太舒服了。&lt;br&gt;
    
    </summary>
    
    
      <category term="CSS" scheme="https://q32757468.github.io/tags/CSS/"/>
    
      <category term="Sass" scheme="https://q32757468.github.io/tags/Sass/"/>
    
  </entry>
  
  <entry>
    <title>webpack单页面配置与多页面配置以及各方面优化</title>
    <link href="https://q32757468.github.io/2019/08/26/webpack%E5%8D%95%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%A4%9A%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E5%90%84%E6%96%B9%E9%9D%A2%E4%BC%98%E5%8C%96/"/>
    <id>https://q32757468.github.io/2019/08/26/webpack单页面配置与多页面配置以及各方面优化/</id>
    <published>2019-08-26T10:01:22.000Z</published>
    <updated>2019-09-25T02:29:55.358Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这几天都在琢磨着配置好webpack的多页面配置以及优化，原本只是其实配置过一份简单的版本，但是对webpack其实也不是特别的熟悉，所以这次配置多页面以及优化还是踩了不少坑的，不过总之是配置好了一份自己满意的配置，可以愉快的用webpakc来打包项目了。<br><a id="more"></a></p></blockquote><h3 id="webpack单页面配置"><a href="#webpack单页面配置" class="headerlink" title="webpack单页面配置"></a>webpack单页面配置</h3><p>其实在之前开始学习webpack的时候就已经配置好了一份简单的webpack单页面的配置，但是当时也只是简单的配置，没有考虑到性能的优化之类，所以不是特别的满意，目录结构考虑的也不是很周到，对webpack的理解也非常的浅，然后现在的这份webpack配置就是我目前很理想的配置了。</p><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><p>可以先来看一下项目最终打包好的目录结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">│  package-lock.json</span><br><span class="line">│  package.json</span><br><span class="line">│  webpack.common.js</span><br><span class="line">│  webpack.dev.js</span><br><span class="line">│  webpack.prod.js</span><br><span class="line">│</span><br><span class="line">├─dist</span><br><span class="line">│  │  index.34b749f14486ceb6af7a.js</span><br><span class="line">│  │  index.html</span><br><span class="line">│  │  index9e2d405ad193f7d585f9.css</span><br><span class="line">│  │</span><br><span class="line">│  └─aseets</span><br><span class="line">│      └─images</span><br><span class="line">│              92dcab1797689d6d87ef20dd22c47be6.png</span><br><span class="line">│              a7a91ea31281adbf0ea7a3213fdd6f96.png</span><br><span class="line">│              b88a75406eaf6c2f133482b0f4b56833.png</span><br><span class="line">│              e07b8dbff850e41c69522320b0c5ea87.png</span><br><span class="line">│              fbcc569b7c705a3c80d2fa95e3a17226.png</span><br><span class="line">│</span><br><span class="line">└─src</span><br><span class="line">    │  index.css</span><br><span class="line">    │  index.html</span><br><span class="line">    │  index.js</span><br><span class="line">    │  index.min.css</span><br><span class="line">    │  index.scss</span><br><span class="line">    │</span><br><span class="line">    └─aseets</span><br><span class="line">        ├─fonts</span><br><span class="line">        └─images</span><br><span class="line">                1.png</span><br><span class="line">                2.png</span><br><span class="line">                3.png</span><br><span class="line">                4.png</span><br><span class="line">                strawberry.png</span><br></pre></td></tr></table></figure></p><p>这个是我个人比较习惯的一个路径，在单页面的时候路径就简单的多了。</p><h4 id="配置文件详细信息"><a href="#配置文件详细信息" class="headerlink" title="配置文件详细信息"></a>配置文件详细信息</h4><p>在之前我是只是用一个配置文件的，可是后来发现开发环境和生产环境的差别确实很大，需要分别配置，这里我是使用了一款叫做<strong>webpack-merge</strong>的插件，这也是官方文档中使用的插件，需要了解详细的用法的话，也可以前往<a href="https://webpack.js.org/configuration/#use-different-config-file" target="_blank" rel="noopener">官方文档</a>进行查看。</p><p>这里通过插件将配置文件拆分成三部分，分别是公用配置、开发环境配置、生产环境配置，分别如下：</p><h5 id="webpack-common-js"><a href="#webpack-common-js" class="headerlink" title="webpack.common.js"></a>webpack.common.js</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> htmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置信息</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"></span><br><span class="line">  entry: &#123;<span class="comment">// 项目入口文件</span></span><br><span class="line">    index: <span class="string">'./src/index.js'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123; <span class="comment">// 配置输出选项</span></span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>), <span class="comment">// 配置输出的路径</span></span><br><span class="line">    <span class="comment">// filename: '[name].js', // 分别配置dev与prod</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    noParse: [<span class="regexp">/jquery/</span>, /react\.min\.js$/],  <span class="comment">//当webpack打包时忽略这些文件，因为没有采用模块化开发，同时建议通过cdn的方式来引入非模块化的文件</span></span><br><span class="line">    rules: [ <span class="comment">// 匹配规则</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//匹配图片</span></span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">        use: [<span class="string">'url-loader?outputPath=aseets/images&amp;limit=8192&amp;name=[contenthash].[ext]&amp;fallback=file-loader'</span>]</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="comment">//匹配字体</span></span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(ttf|eot|svg|woff|woff2)$/</span>,</span><br><span class="line">        use: [<span class="string">'file-loader?outputPath=aseets/fonts'</span>]</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 抽离css并压缩</span></span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [MiniCssExtractPlugin.loader, <span class="string">'fast-css-loader'</span>]</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(sass|scss)$/</span>,</span><br><span class="line">        use: [MiniCssExtractPlugin.loader, <span class="string">'fast-css-loader'</span>, <span class="string">'fast-sass-loader'</span>]</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过externals可以检索外部依赖，而不需要本地依赖也能通过 import引用。</span></span><br><span class="line">  externals: &#123;</span><br><span class="line">    echarts: <span class="string">'echarts'</span>,</span><br><span class="line">    jquery: <span class="string">'jQuery'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//抽出第三方库文件</span></span><br><span class="line">  optimization: &#123;</span><br><span class="line">    <span class="comment">// runtimeChunk: 'single',</span></span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">      cacheGroups: &#123;</span><br><span class="line">        vendor: &#123;</span><br><span class="line">          test: <span class="regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">          name: <span class="string">'vendors'</span>,</span><br><span class="line">          chunks: <span class="string">'all'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  plugins: [</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> htmlWebpackPlugin(&#123;</span><br><span class="line">      template: path.resolve(__dirname, <span class="string">'src/index.html'</span>),<span class="comment">//圆文件路径</span></span><br><span class="line">      filename: <span class="string">'index.html'</span><span class="comment">//自动生成的HTML文件的名称</span></span><br><span class="line">    &#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 抽离css</span></span><br><span class="line">    <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">      filename: <span class="string">'[name][contenthash].css'</span></span><br><span class="line">    &#125;),</span><br><span class="line"></span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的配置比较简单都是一些常用的配置及插件配置，这里需要注意的一件事就是因为在开发环境中我不需要使用到 [contenthash] 来为入口文件命名，所以<code>output.path</code>这部分我在其他两份配置文件进行了配置。</p><h5 id="webpack-dev-js"><a href="#webpack-dev-js" class="headerlink" title="webpack.dev.js"></a>webpack.dev.js</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>);</span><br><span class="line"><span class="keyword">const</span> common = <span class="built_in">require</span>(<span class="string">'./webpack.common.js'</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置信息</span></span><br><span class="line"><span class="built_in">module</span>.exports = merge(common, &#123;</span><br><span class="line">  mode: <span class="string">'development'</span>,</span><br><span class="line">  output: &#123; <span class="comment">// 配置输出选项</span></span><br><span class="line">    filename: <span class="string">'[name].js'</span>, <span class="comment">// 配置输出的文件名</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin(),</span><br><span class="line">  ],</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    hot: <span class="literal">true</span>,</span><br><span class="line">    open: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>开发环境需要单独配置的很少，主要就是热更新的配置。</p><h5 id="webpack-prod-js"><a href="#webpack-prod-js" class="headerlink" title="webpack.prod.js"></a>webpack.prod.js</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>);</span><br><span class="line"><span class="keyword">const</span> common = <span class="built_in">require</span>(<span class="string">'./webpack.common.js'</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">"clean-webpack-plugin"</span>);</span><br><span class="line"><span class="keyword">const</span> OptimizeCSSAssetsPlugin = <span class="built_in">require</span>(<span class="string">'optimize-css-assets-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> TerserJSPlugin = <span class="built_in">require</span>(<span class="string">'terser-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge(common, &#123;</span><br><span class="line"></span><br><span class="line">  mode: <span class="string">'production'</span>,</span><br><span class="line"></span><br><span class="line">  output: &#123; <span class="comment">// 配置输出选项</span></span><br><span class="line">    filename: <span class="string">'[name].[contenthash].js'</span>, <span class="comment">// 配置输出的文件名</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 压缩js与css</span></span><br><span class="line">  optimization: &#123;</span><br><span class="line">    minimizer: [</span><br><span class="line">      <span class="keyword">new</span> TerserJSPlugin(&#123;</span><br><span class="line">        cache: <span class="literal">true</span>,</span><br><span class="line">        parallel: <span class="literal">true</span>,</span><br><span class="line">      &#125;),</span><br><span class="line">      <span class="keyword">new</span> OptimizeCSSAssetsPlugin(&#123;&#125;)</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin(),</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>生产环境的配置就相对多一些了，主要就是打包清理的插件以及压缩的插件。</p><p><strong>在两个环境的配置文件配置好之后就可以用起来了，这里要注意的是现在这样是不能直接拿来用的，我刚开始就是忽略了这点，想要生效还需要在打包或者通过 dev 预览的时候指定配置文件就行，我是通过pakage.script来指定的，像是这样：</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "start": "webpack-dev-server --config webpack.dev.js",</span><br><span class="line">  "build": "webpack --config  webpack.prod.js"</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>单页面的配置就这样配置好了，我做的优化以及插件相关的问题我会到优化部分再说。</p><h3 id="webpack多页面配置"><a href="#webpack多页面配置" class="headerlink" title="webpack多页面配置"></a>webpack多页面配置</h3><p>上面是单页面的配置，那么我们肯定不会只进行单页面的开发，多页面的开发也是非常常见的，多页面的配置就会相比要复杂一些，因为页面更加的多。</p><h4 id="目录结构-1"><a href="#目录结构-1" class="headerlink" title="目录结构"></a>目录结构</h4><p>这是我多页面的页面结构，index.html的位置还是一样的，将其他的所有页面进一个文件夹内，css、js也是同理：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">│  package-lock.json</span><br><span class="line">│  package.json</span><br><span class="line">│  webpack.common.js</span><br><span class="line">│  webpack.dev.js</span><br><span class="line">│  webpack.prod.js</span><br><span class="line">│</span><br><span class="line">├─dist</span><br><span class="line">│  │  index.html</span><br><span class="line">│  │</span><br><span class="line">│  ├─pages</span><br><span class="line">│  │      page1.html</span><br><span class="line">│  │      page2.html</span><br><span class="line">│  │</span><br><span class="line">│  └─static</span><br><span class="line">│      └─js</span><br><span class="line">│              index.acb8d4a0a354c09aa1a5.js</span><br><span class="line">│              page1.08868399604c484bbd2a.js</span><br><span class="line">│              page2.ab4baec0ced2346793dd.js</span><br><span class="line">│</span><br><span class="line">└─src</span><br><span class="line">    │  index.html</span><br><span class="line">    │</span><br><span class="line">    ├─aseets</span><br><span class="line">    │  ├─fonts</span><br><span class="line">    │  └─images</span><br><span class="line">    │          bb.png</span><br><span class="line">    │          cm.png</span><br><span class="line">    │</span><br><span class="line">    ├─pages</span><br><span class="line">    │      page1.html</span><br><span class="line">    │      page2.html</span><br><span class="line">    │</span><br><span class="line">    └─static</span><br><span class="line">        ├─css</span><br><span class="line">        │      index.scss</span><br><span class="line">        │      page1.scss</span><br><span class="line">        │      page2.scss</span><br><span class="line">        │</span><br><span class="line">        └─js</span><br><span class="line">                index.js</span><br><span class="line">                page1.js</span><br><span class="line">                page2.js</span><br></pre></td></tr></table></figure></p><p>以上就是我多页面的配置文件，可以看出单页面与多页面在目录的结构方面差别还是很大的。</p><h4 id="配置文件详细信息-1"><a href="#配置文件详细信息-1" class="headerlink" title="配置文件详细信息"></a>配置文件详细信息</h4><h4 id="dev-和-prod"><a href="#dev-和-prod" class="headerlink" title="dev 和 prod"></a>dev 和 prod</h4><p>因为基本上没有什么太大的变化就合在一起讲一下变化吧：</p><ul><li><p>仔细一看其实没有什么大变化</p></li><li><p>唯一的变化也就是因为是多页面，所以在使用 <strong>devServer</strong> 的时候要更改一下默认的打开路径，方便管理其他页面：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">  hot: <span class="literal">true</span>,</span><br><span class="line">  open: <span class="literal">true</span>,</span><br><span class="line">  openPage: <span class="string">'/pages'</span>,</span><br><span class="line">  contentBase: <span class="string">'src'</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ul><h5 id="webpack-common-js-1"><a href="#webpack-common-js-1" class="headerlink" title="webpack.common.js"></a>webpack.common.js</h5><p>变化比较大的也就是这份common了，其实变化大主要是要修改多页面以及这些入口文件的输出位置。</p><p>由于页面的数量不是固定的而且我也不想每次都去修改配置文件，所以我采用了动态获取所有的页面并且将其入口文件进行打包到指定文件夹中，这样进行开发的时候就比较省事了。</p><p>这是配置文件：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> htmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> glob = <span class="built_in">require</span>(<span class="string">'glob'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成所页面的入口文件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">entries</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> jsDir = path.resolve(__dirname, <span class="string">'src/static/js'</span>);</span><br><span class="line">  <span class="keyword">const</span> entryFiles = glob.sync(jsDir + <span class="string">'/*.js'</span>);</span><br><span class="line">  <span class="keyword">let</span> map = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; entryFiles.length; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> filePath = entryFiles[i];</span><br><span class="line">    <span class="keyword">let</span> filename = filePath.substring(filePath.lastIndexOf(<span class="string">'\/'</span>) + <span class="number">1</span>, filePath.lastIndexOf(<span class="string">'.'</span>));</span><br><span class="line">    map[filename] = filePath;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成pages中的所有htmlWebpackPlugin的配置信息</span></span><br><span class="line"><span class="keyword">let</span> pluginarr = [];</span><br><span class="line"><span class="keyword">let</span> HWP = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> conf, filename;</span><br><span class="line">  <span class="keyword">const</span> htmlDir = path.resolve(__dirname, <span class="string">'src/pages'</span>);</span><br><span class="line">  <span class="keyword">const</span> htmlFiles = glob.sync(htmlDir + <span class="string">'/*.html'</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; htmlFiles.length; i++) &#123;</span><br><span class="line">    filename = htmlFiles[i].substring(htmlFiles[i].lastIndexOf(<span class="string">'\/'</span>) + <span class="number">1</span>, htmlFiles[i].lastIndexOf(<span class="string">'.'</span>));</span><br><span class="line">    conf = &#123;</span><br><span class="line">      template: path.resolve(__dirname, <span class="string">'src/pages/'</span> + filename + <span class="string">'.html'</span>),<span class="comment">//圆文件路径</span></span><br><span class="line">      filename: path.resolve(__dirname, <span class="string">'dist/pages/'</span> + filename + <span class="string">'.html'</span>),<span class="comment">//自动生成的HTML文件的名称</span></span><br><span class="line">      title: filename,</span><br><span class="line">      chunks: [filename],</span><br><span class="line">    &#125;</span><br><span class="line">    pluginarr.push(<span class="keyword">new</span> htmlWebpackPlugin(conf));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">HWP();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//配置信息</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"></span><br><span class="line">  entry: entries(),</span><br><span class="line">  output: &#123; <span class="comment">// 配置输出选项</span></span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist/static/js'</span>), <span class="comment">// 配置输出的路径</span></span><br><span class="line">    <span class="comment">// filename: '[name].js', // 分别配置dev与prod</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    noParse: [<span class="regexp">/jquery/</span>, /react\.min\.js$/],  <span class="comment">//当webpack打包时忽略这些文件，因为没有采用模块化开发，同时建议通过cdn的方式来引入非模块化的文件</span></span><br><span class="line">    rules: [ <span class="comment">// 匹配规则</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//匹配图片</span></span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">        use: [<span class="string">'url-loader?outputPath=aseets/images&amp;limit=8192&amp;name=[contenthash].[ext]&amp;fallback=file-loader'</span>]</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="comment">//匹配字体</span></span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(ttf|eot|svg|woff|woff2)$/</span>,</span><br><span class="line">        use: [<span class="string">'file-loader?outputPath=fonts'</span>]</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 抽离css并压缩</span></span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [MiniCssExtractPlugin.loader, <span class="string">'fast-css-loader'</span>]</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(sass|scss)$/</span>,</span><br><span class="line">        use: [MiniCssExtractPlugin.loader, <span class="string">'fast-css-loader'</span>, <span class="string">'fast-sass-loader'</span>]</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过externals可以检索外部依赖，而不需要本地依赖也能通过 import引用。</span></span><br><span class="line">  externals: &#123;</span><br><span class="line">    echarts: <span class="string">'echarts'</span>,</span><br><span class="line">    jquery: <span class="string">'jQuery'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//抽出第三方库文件</span></span><br><span class="line">  optimization: &#123;</span><br><span class="line">    <span class="comment">// runtimeChunk: 'single',</span></span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">      cacheGroups: &#123;</span><br><span class="line">        vendor: &#123;</span><br><span class="line">          test: <span class="regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">          name: <span class="string">'vendors'</span>,</span><br><span class="line">          chunks: <span class="string">'all'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  plugins: [</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> htmlWebpackPlugin(&#123;</span><br><span class="line">      template: path.resolve(__dirname, <span class="string">'src/index.html'</span>),<span class="comment">//圆文件路径</span></span><br><span class="line">      filename: path.resolve(__dirname, <span class="string">'dist/index.html'</span>),<span class="comment">//自动生成的HTML文件的名称</span></span><br><span class="line">      title: <span class="string">'index'</span>,</span><br><span class="line">      chunks: [<span class="string">'index'</span>],</span><br><span class="line">    &#125;),</span><br><span class="line"></span><br><span class="line">    ...pluginarr,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 抽离css</span></span><br><span class="line">    <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">      filename: <span class="string">'[name][contenthash].css'</span></span><br><span class="line">    &#125;),</span><br><span class="line"></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里说一下我在写这些配置的时候遇到的一些困难：</p><ul><li>首先是因为对node.js不了解，所以在参照别人进行动态的获取指定文件夹内的所有文件的文件名的时候遇到了一些困难，然后编写函数的时候也会困难一些，因为不知道那些node中的函数是什么意思，后来把这些不认识的node函数都查了一遍就理解了，从而实现了遍历所有的入口文件，也就是这部分：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">entries</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> jsDir = path.resolve(__dirname, <span class="string">'src/static/js'</span>);</span><br><span class="line">  <span class="keyword">const</span> entryFiles = glob.sync(jsDir + <span class="string">'/*.js'</span>);</span><br><span class="line">  <span class="keyword">let</span> map = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; entryFiles.length; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> filePath = entryFiles[i];</span><br><span class="line">    <span class="keyword">let</span> filename = filePath.substring(filePath.lastIndexOf(<span class="string">'\/'</span>) + <span class="number">1</span>, filePath.lastIndexOf(<span class="string">'.'</span>));</span><br><span class="line">    map[filename] = filePath;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//然后将函数返回的对象传递给entry就行了。</span></span><br><span class="line">entry: entries(),</span><br></pre></td></tr></table></figure></li></ul><p>动态配置<code>htmlWebpackPlugin</code>也是类似，不过会稍微麻烦一点，原理是一样的。</p><ul><li><p>遇到的第二个比较大的困难就是网上的资料不是特别的齐全与准确，也花费了我比较多的时间<br>首先是因为不了解node，所以不知道还需要先安装<code>glob</code>这个模块才能使用，一开始还以为是自带的不用安装，然后就是参照别人的动态配置<code>htmlWebpackPlugin</code>的函数，然后写了自己的函数，但是花了很多的时间总是的不到我想要的效果，最后发现最坑的是在有一处需要写<code>htmlWebpackPlugin</code>这段代码，我肯定是选择复制一下会更加的方便，结果我从别人的代码里复制，结果复制来的是<code>HtmlWebpackPlugin</code>,可能很多人这样看都没有看出什么问题，我一开始也没意识到问题的严重性，但是又总是报错<code>HtmlWebpackPlugin</code>没有定义，我心里那个气啊，不是定义了吗？怎么就没定义了，知道后来我发现我的代码里面怎么有一个叛徒<code>HtmlWebpackPlugin</code>???，这个开头的字母错了啊，我的天啊，困扰我这么久的竟然是这个问题，我竟然复制的别人的是错了，我真不明白那个老哥的配置是怎么生效的，我崩溃啊，好在问题解决了。</p></li><li><p>后来又遇到的一个比较严重的问题就是对node中的<code>__dirname</code>理解的不对，这导致我在截取不带后缀的文件名的时候出现了问题，后面意识到了问题，进行了改正。</p></li><li><p>还有一个不够细心造成的问题，在配置没有完全配置好之前我进行了一次测试性的打包，导致将 index.html 打包进了 src 目录中，这不是问题的重点，重点是，这个文件中注入了三个入口js，所以导致我在后面打包的时候无论怎么修改配置，想尽办法，打包出来的 index.html 都会带有四个入口文件，我实在是没想明白怎么回事，头疼，后面经过排查，最终排查到src下的index.html，最终发现了问题。</p></li></ul><h3 id="webpack优化"><a href="#webpack优化" class="headerlink" title="webpack优化"></a>webpack优化</h3><p>前面只是展示了一下单页面与多页面的配置，插件具体的作用以及我所作的优化都没有详细进行介绍，这里来专门讲一下我在webpack的打包与代码质量方面所做的优化。我将这些优化分为两部分，一是优化之后提高打包速度，二是优化之后提升用户体验。</p><h4 id="提升打包速度"><a href="#提升打包速度" class="headerlink" title="提升打包速度"></a>提升打包速度</h4><h4 id="缩小webpack打包时的解析范围"><a href="#缩小webpack打包时的解析范围" class="headerlink" title="缩小webpack打包时的解析范围"></a>缩小webpack打包时的解析范围</h4><p>对于那些非模块化开发的库文件可以通过 module.noParse 字段来将其排除在webpack的解析范围之外。像是jQuery和echarts这种，因为这些本身就是非模块化开发的，所以没必要浪费资源进行解析。我的配置文件是这样设置的：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">noParse: [<span class="regexp">/jquery/</span>, /react\.min\.js$/],</span><br></pre></td></tr></table></figure></p><p>其实除了这样处理可以缩小解析范围，大部分loader也可以通过配置来缩小解析范围。</p><h4 id="使用速度跟快的loader"><a href="#使用速度跟快的loader" class="headerlink" title="使用速度跟快的loader"></a>使用速度跟快的loader</h4><p>部分官方loader有时存在bug的，并且速度也不是最快的，这里我使用了两款关于css的loader，分别时 fast-css-loader 以及 fast-sass-loader ，使用方法基本上和普通版是一样的，详细的使用办法可以看这篇<a href="https://segmentfault.com/a/1190000014740483" target="_blank" rel="noopener">文章</a></p><h4 id="使用happypack"><a href="#使用happypack" class="headerlink" title="使用happypack"></a>使用happypack</h4><p>webpack原本的打包过程是单线程的，通过这款插件可以使各loader的打包过程变为多线程的，其实我的配置文件中并没有使用它，因为对 file-loader 和 url-loader 支持的不好，而且我还使用了抽离css的插件导致css-loader也不支持了，也就babel-loader有用了，但是我基本上不写需要balel的代码，用不到，所以就不做过多介绍了。</p><h4 id="提升用户体验"><a href="#提升用户体验" class="headerlink" title="提升用户体验"></a>提升用户体验</h4><h4 id="使用cdn"><a href="#使用cdn" class="headerlink" title="使用cdn"></a>使用cdn</h4><p>通过将静态资源（除了html文件）存放到cdn中并且开启缓存来对资源的加载进行加速。这里要注意的必须是文件名带上内容计算出的hash，不能能直接使用hash来进行缓存，一定要使用内容计算出的hash，也就是 contenthash 来进行缓存（通过看我的配置文件可以看出我是使用了contenthash），因为如果直接使用hash的话就会导致每次打包的时候所有文件都会重新生成hash，那么这样生成的hash就没有意义了。</p><h4 id="非模块化库使用cdn"><a href="#非模块化库使用cdn" class="headerlink" title="非模块化库使用cdn"></a>非模块化库使用cdn</h4><p>如果没有选择将大部分资源放到cdn中的话，对于那些非模块话开发的库文件，可以通过cdn来将其引入，这样可以减少打包后的体积，并且也可以使这些文件的加载速度变快（这样处理之后其实也就没必要骗用到上面的优化办法了，也看具体情况吧）。</p><p>这里再补充一下如果这时还需要通过引入模块的方式来引入这些通过cdn引入的文件的话该怎么办，可以通过 module.externals 来解决，像是我这样：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">externals: &#123;</span><br><span class="line">  echarts: <span class="string">'echarts'</span>,</span><br><span class="line">  jquery: <span class="string">'jQuery'</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>属性名 jquery是表示  import $ from ‘jquery’  应该排除jquery模块,而属性值jQuery 表示将检索一个 jQuery 来当作全局变量。这样就可以通过引入模块的方式来继续使用这些库了。</p><h4 id="抽离css"><a href="#抽离css" class="headerlink" title="抽离css"></a>抽离css</h4><p>抽离的好处不用注入样式，减少性能开销，可以对样式进行压缩，减少代码大小。</p><p>可以通过  mini-css-extract-plugin 插件来实现，可以参考我的配置文件中的关于  mini-css-extract-plugin 插件的配置信息。</p><p>抽离之后记得取消使用 style-loader 。</p><h4 id="压缩代码"><a href="#压缩代码" class="headerlink" title="压缩代码"></a>压缩代码</h4><p>我使用的是webpack4.x的版本，已经是默认再生产模式下是自动压缩js与css文件了。</p><p>但是这里还是要提一下如何手动配置对js或者是css文件进行压缩，我这里是配置了的，我为什么要配置呢，其实主要是因为我在前面提到了我是使用了 fast-css-loader 的，使用这个的话是默认没有压缩功能的，是的，只有官方的 css-loader才有压缩的功能，那我们手动配置的话只需要使用 OptimizeCSSAssetsPlugin 这个插件，具体的配置方法也可以参考我的配置文件。</p><p>还要注意的是如果使用了这个插件进行css代码的压缩，那么js文件的压缩功能会被顶掉，所以我们就还需要安装插件进行js文件的压缩，我这里使用的是 TerserJSPlugin 使用方法参考我的配置文件。也有其他的压缩插件，这里就不介绍了。</p><p>当然，如果不使用fast-css-loader就不必要使用额外的压缩插件，具体怎么选择就仁者见仁了。</p><h4 id="使用url-loader"><a href="#使用url-loader" class="headerlink" title="使用url-loader"></a>使用url-loader</h4><p>对于图片的处理来说配置url-loader也有一定的提升，url-loader相较于file-loader来说比较明显的区别就在于可以将图片转化为base64格式的。</p><p>这里要注意的是通过base64的转化，图片的大小会增加三分之一左右，但是可以减少一次网络请求，所以设置将多大的图片转化为base64就尤为重要了：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line">  test: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">  use: [<span class="string">'url-loader?outputPath=aseets/images&amp;limit=8192&amp;name=[contenthash].[ext]&amp;fallback=file-loader'</span>]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>我这里设置的是将小于8192比特的图片转化为base64，也可以根据项目情况进行调整。大于这个数值的默认就会调用file-loader来进行处理。</p><h4 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h4><p>懒加载就是在用户需要时再按需引入相应的模块，这样可以减少首次加载的时间，合理的使用资源，具体可以看webpack官方文档的简单的<a href="https://webpack.js.org/guides/lazy-loading/" target="_blank" rel="noopener">例子</a>。</p><h4 id="多页面抽离公共代码"><a href="#多页面抽离公共代码" class="headerlink" title="多页面抽离公共代码"></a>多页面抽离公共代码</h4><p>在webpack4.x中不再需要特别区配置这部分的东西了，因为自带了这方面的插件并且使用默认配置也是足够的，如果要看具体怎么配置的话也可以看<a href="https://webpack.js.org/configuration/optimization/" target="_blank" rel="noopener">官方文档</a>的介绍。</p><p>原理就是多页面中会有很多重复用到的代码，比如说第三方库之类的，这类资源基本上不会被修改，所以可以把这些相同的代码抽离出来，当用户第一次请求这些公共部分的文件时，就会被浏览器缓存，当其他页面要使用的时候就不需要再次进行请求了，直接使用缓存就可以了。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>从网上找各种资料到引用到配置适合自己的配置这个过程还是花了很多的时间的，也踩了很多的坑，但是终究还是配置好了，也让我对webpack有了更多的认识，也更加的发觉了使用webpack的好处，我将会把这两份代码配置放到github中，要使用的时候直接clone下来就好了，特别是再给命令起个别名，用起来就很舒服了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;这几天都在琢磨着配置好webpack的多页面配置以及优化，原本只是其实配置过一份简单的版本，但是对webpack其实也不是特别的熟悉，所以这次配置多页面以及优化还是踩了不少坑的，不过总之是配置好了一份自己满意的配置，可以愉快的用webpakc来打包项目了。&lt;br&gt;
    
    </summary>
    
    
      <category term="webpack" scheme="https://q32757468.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>测试文章</title>
    <link href="https://q32757468.github.io/2019/08/14/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <id>https://q32757468.github.io/2019/08/14/测试文章/</id>
    <published>2019-08-14T10:20:05.000Z</published>
    <updated>2019-11-17T07:19:07.719Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;现在来测试一下图片。<br><a id="more"></a></p></blockquote><p>###<br><img src="/images/lm.jpg"><br><img src="./images/lm.jpg"></p><p>这是一个新的测试</p><p>### </p><p>###</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;现在来测试一下图片。&lt;br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://q32757468.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="vue学习记录" scheme="https://q32757468.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/vue%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="test" scheme="https://q32757468.github.io/tags/test/"/>
    
      <category term="js" scheme="https://q32757468.github.io/tags/js/"/>
    
      <category term="css" scheme="https://q32757468.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>JS鼠标滚轮事件</title>
    <link href="https://q32757468.github.io/2019/08/13/JS%E9%BC%A0%E6%A0%87%E6%BB%9A%E8%BD%AE%E4%BA%8B%E4%BB%B6/"/>
    <id>https://q32757468.github.io/2019/08/13/JS鼠标滚轮事件/</id>
    <published>2019-08-13T13:16:11.000Z</published>
    <updated>2019-09-25T02:22:01.387Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们经常会有需求需要实现可以通过鼠标滚轮来进行翻页或者是对应用的切换，那么这个时候就需要用到鼠标滚轮事件了，并且大部分时候都需要进行一定的优化以提升用户体验，这也是我在这段时间开发chrome插件时所遇到的一些问题，来看看我是怎么解决的。<br><a id="more"></a></p></blockquote><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>鼠标滚轮事件相较于其他基本的事件使用起来会稍微麻烦那么一点点，我这里采用的jQuery的写法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 因为firefox浏览器对于鼠标滚轮事件的处理和其他浏览器不太一样，所以这里要注意兼容处理</span></span><br><span class="line">$(<span class="built_in">document</span>).on(<span class="string">'mousewheel DOMMouseScroll'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  e = e || <span class="built_in">window</span>.event;</span><br><span class="line">  <span class="keyword">let</span> delta = e.originalEvent.wheelDelta || e.originalEvent.detail; <span class="comment">//后者是对Firefox的兼容</span></span><br><span class="line">  <span class="keyword">if</span> (delta &gt; <span class="number">0</span>) &#123;  </span><br><span class="line">  <span class="comment">// 这里写滚轮上滚时的代码</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'上滚'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="comment">// 这里写滚轮下滚时的代码</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'下滚'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>这就是最简单的使用方式了。但是如果我们直接这样使用的话会出现一个问题，那就是当我们快速的滚动多次鼠标滚轮，那么此时就会触发多次的事件，其实这个时候用户体验是很不好的，因为大部分人都会习惯滑鼠标滚轮不止一格，并且有些鼠标也不好控制轻轻的只划一格，那么这个时候就需要进行一定的优化来解决这个问题了。</p><h3 id="优化方式一"><a href="#优化方式一" class="headerlink" title="优化方式一"></a>优化方式一</h3><p>方式一的优化原理就是在一次鼠标滚轮事件之后将滚轮事件与元素解绑，然后用定时器来设置一定时间后再次进行绑定：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setDiff</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="built_in">document</span>).on(<span class="string">'mousewheel DOMMouseScroll'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    e = e || <span class="built_in">window</span>.event;</span><br><span class="line">    <span class="keyword">let</span> delta = e.originalEvent.wheelDelta || e.originalEvent.detail;</span><br><span class="line">    $(<span class="built_in">document</span>).off(<span class="string">"mousewheel DOMMouseScroll"</span>);</span><br><span class="line">    <span class="keyword">if</span> (delta &gt; <span class="number">0</span>) &#123; <span class="comment">//当滑轮向上滚动时  </span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'上滚'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123; <span class="comment">//当滑轮向下滚动时  </span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'下滚'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    setTimeout(setDiff, <span class="number">500</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">setDiff();</span><br></pre></td></tr></table></figure></p><p>当这样优化之后，无论怎么样的滚动鼠标滚轮，两次滚轮事件之间最少都要间隔 500ms 了。</p><p>虽然这样的方式是可行的，但是也存在着极端的情况，加入用户进行了一次超级长的鼠标滚轮，那么就可能触发多次滚轮事件，而我在开发chrome插件的时候预期想要的效果是在一次连续的滚动过程中，无论连续滚动了多长时间，只有第一次滚轮事件会生效，后面的都会无效，因为如果实现这样的效果就无需设置时间来控制事件的触发频率，大大的增加灵活性。后面经过思考与尝试，我还是实现了我的思路。</p><h3 id="优化方式二"><a href="#优化方式二" class="headerlink" title="优化方式二"></a>优化方式二</h3><p>为了实现前面所提到的效果最终我想到可以通过判断两次事件触发的间隔来确定是否要执行事件：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setDiff</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> preTime = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  $(<span class="built_in">document</span>).on(<span class="string">'mousewheel DOMMouseScroll'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> diff = (<span class="keyword">new</span> <span class="built_in">Date</span>()) - preTime;</span><br><span class="line">    <span class="keyword">if</span> (diff &gt; <span class="number">300</span>) &#123;</span><br><span class="line">      e = e || <span class="built_in">window</span>.event;</span><br><span class="line">      <span class="keyword">let</span> delta = e.originalEvent.wheelDelta || e.originalEvent.detail;  <span class="comment">//后者Firefox</span></span><br><span class="line">      <span class="comment">// $(document).off("mousewheel DOMMouseScroll");</span></span><br><span class="line">      <span class="keyword">if</span> (delta &gt; <span class="number">0</span>) &#123; <span class="comment">//当滑轮向上滚动时  </span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'上滚'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123; <span class="comment">//当滑轮向下滚动时  </span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'下滚'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    preTime = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">setDiff();</span><br></pre></td></tr></table></figure></p><p>这样优化之后，只要是连续的滚动鼠标滚轮，那么一定只会触发第一次事件，当用户松开滚轮，进行下一次滚动时，间隔时间够长，就又可以触发一次滚轮事件，但是后面连续的所有事件因为间隔时间十分之短，就不会被触发，就达到了我的目的。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这也是我第一次使用鼠标的滚轮事件，结合网上的一些内容以及自己的一些思考，最终还是完成了自己的需求，并且对代码进行了简化，虽然花了一些时间，但是肯定是值得的。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;我们经常会有需求需要实现可以通过鼠标滚轮来进行翻页或者是对应用的切换，那么这个时候就需要用到鼠标滚轮事件了，并且大部分时候都需要进行一定的优化以提升用户体验，这也是我在这段时间开发chrome插件时所遇到的一些问题，来看看我是怎么解决的。&lt;br&gt;
    
    </summary>
    
    
      <category term="JS" scheme="https://q32757468.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>通过百度API添加搜索小功能</title>
    <link href="https://q32757468.github.io/2019/08/10/%E9%80%9A%E8%BF%87%E7%99%BE%E5%BA%A6API%E6%B7%BB%E5%8A%A0%E6%90%9C%E7%B4%A2%E5%B0%8F%E5%8A%9F%E8%83%BD/"/>
    <id>https://q32757468.github.io/2019/08/10/通过百度API添加搜索小功能/</id>
    <published>2019-08-10T13:34:07.000Z</published>
    <updated>2019-09-25T02:38:34.134Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这两天在开发一个自己的chrome插件，实现自定义新标签页，那么新标签页肯定少不了搜索的功能，因为我比较常用的搜索引擎是百度，所以会跳到百度的搜索结果，并且通过调用API来实现有一个提示的小窗口，原理是挺简单的，但是写的过程中还是遇到一些问题，记录一下。<br><a id="more"></a></p></blockquote><h3 id="先来看看效果图"><a href="#先来看看效果图" class="headerlink" title="先来看看效果图"></a>先来看看效果图</h3><p><img src="http://m.qpic.cn/psb?/V131x4904WMIoW/8oA8YneY5riROKOZYZesXy7dwsX0xuZjTV4mpHJGPYk!/b/dFEBAAAAAAAA&bo=DwaIAwAAAAADB6A!&rf=viewer_4"><br>做的不是很好看，因为目前只是把功能实现了，样式都还是测试用的。重点来讲讲功能。</p><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><h4 id="HTML代码"><a href="#HTML代码" class="headerlink" title="HTML代码"></a>HTML代码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"centerBox"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"log"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"searchWrap"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">svg</span> <span class="attr">class</span>=<span class="string">"icon sousuo"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">use</span> <span class="attr">xlink:href</span>=<span class="string">"#icon-sousuo"</span>&gt;</span><span class="tag">&lt;/<span class="name">use</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"searchInput"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"searchTips"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="JS代码："><a href="#JS代码：" class="headerlink" title="JS代码："></a>JS代码：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"./asset/font/iconfont.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"> &lt;script src=<span class="string">"./asset/js/jquery-3.4.1.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"> &lt;script&gt;</span><br><span class="line">   $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 百度搜索</span></span><br><span class="line">     &#123;</span><br><span class="line">       <span class="comment">// 搜索部分</span></span><br><span class="line">       <span class="keyword">const</span> searchInput = $(<span class="string">'.searchInput'</span>);</span><br><span class="line">       <span class="keyword">const</span> searchTips = $(<span class="string">'.searchTips'</span>);</span><br><span class="line">       <span class="keyword">let</span> tipItems = searchTips.children();</span><br><span class="line">       <span class="keyword">let</span> liList = <span class="string">``</span>;</span><br><span class="line">       <span class="keyword">let</span> query = searchInput.val();</span><br><span class="line">       <span class="keyword">let</span> timer;</span><br><span class="line">       <span class="keyword">let</span> tipIndex = <span class="number">-1</span>;</span><br><span class="line">       searchInput.keyup(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">         <span class="comment">// 按下回车进行搜索</span></span><br><span class="line">         <span class="keyword">if</span> (e.keyCode == <span class="number">13</span>) &#123;</span><br><span class="line">           query = $(<span class="keyword">this</span>).val();</span><br><span class="line">           <span class="built_in">window</span>.open(<span class="string">`https://www.baidu.com/s?ie=UTF-8&amp;wd=<span class="subst">$&#123;query&#125;</span>`</span>);</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;)</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 提示部分</span></span><br><span class="line">       searchInput.on(<span class="string">'input'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         tipIndex = <span class="number">-1</span>;</span><br><span class="line">         <span class="keyword">let</span> query = searchInput.val();</span><br><span class="line">         <span class="keyword">const</span> url = <span class="string">"https://sp0.baidu.com/5a1Fazu8AA54nxGko9WTAnF6hhy/su?wd="</span> + query + <span class="string">"&amp;cb=?"</span>;</span><br><span class="line">         $.getJSON(url, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(data.s);</span><br><span class="line">           data.s.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">             liList += <span class="string">`&lt;li&gt;<span class="subst">$&#123;item&#125;</span>&lt;/li&gt;`</span>;</span><br><span class="line">           &#125;);</span><br><span class="line">           searchTips.html(liList);</span><br><span class="line">           liList = <span class="string">``</span>;</span><br><span class="line">           tipItems = searchTips.children();</span><br><span class="line"></span><br><span class="line">           <span class="comment">// 单击提示进行搜索</span></span><br><span class="line">           tipItems.each(<span class="function">(<span class="params">index, item</span>) =&gt;</span> &#123;</span><br><span class="line">             $(item).mousedown(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">               <span class="built_in">window</span>.open(<span class="string">`https://www.baidu.com/s?ie=UTF-8&amp;wd=<span class="subst">$&#123;$(<span class="keyword">this</span>).text()&#125;</span>`</span>);</span><br><span class="line">             &#125;)</span><br><span class="line">           &#125;)</span><br><span class="line"></span><br><span class="line">           <span class="comment">// 鼠标经过时的变化</span></span><br><span class="line">           tipItems.each(<span class="function">(<span class="params">index, item</span>) =&gt;</span> &#123;</span><br><span class="line">             $(item).hover(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">               searchTips.show();</span><br><span class="line">               $(<span class="keyword">this</span>).addClass(<span class="string">'tipCur'</span>).siblings().removeClass(<span class="string">'tipCur'</span>);</span><br><span class="line">             &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">               $(<span class="keyword">this</span>).removeClass</span><br><span class="line">                 (<span class="string">'tipCur'</span>).siblings().removeClass(<span class="string">'tipCur'</span>);</span><br><span class="line">             &#125;)</span><br><span class="line">           &#125;)</span><br><span class="line"></span><br><span class="line">           <span class="comment">// 搜索框失去焦点时隐藏，获得焦点时显示</span></span><br><span class="line">           searchInput.blur(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">             searchTips.hide();</span><br><span class="line">           &#125;)</span><br><span class="line">           searchInput.focus(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">             searchTips.show();</span><br><span class="line">           &#125;)</span><br><span class="line"></span><br><span class="line">         &#125;)</span><br><span class="line"></span><br><span class="line">       &#125;)</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 通过上下箭头来控制搜索框内容</span></span><br><span class="line">       searchInput.keydown(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">         <span class="comment">// 方向键下</span></span><br><span class="line">         <span class="keyword">if</span> (e.keyCode == <span class="number">40</span>) &#123;</span><br><span class="line">           tipIndex++;</span><br><span class="line">           <span class="keyword">if</span> (tipIndex &gt;= tipItems.length) &#123;</span><br><span class="line">             tipIndex = <span class="number">0</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           tipItems.eq(tipIndex).addClass(<span class="string">'tipCur'</span>).siblings().removeClass(<span class="string">'tipCur'</span>);</span><br><span class="line">           searchInput.val(tipItems.eq(tipIndex).text());</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">// 方向键上</span></span><br><span class="line">         <span class="keyword">if</span> (e.keyCode == <span class="number">38</span>) &#123;</span><br><span class="line">           <span class="comment">// 要阻止方向键上光标跳到文字开头的默认行为，必须要在keydown阶段阻止</span></span><br><span class="line">           e.preventDefault();</span><br><span class="line">           tipIndex--;</span><br><span class="line">           <span class="keyword">if</span> (tipIndex &lt;= (<span class="number">-1</span>)) &#123;</span><br><span class="line">             tipIndex = (tipItems.length - <span class="number">1</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           tipItems.eq(tipIndex).addClass(<span class="string">'tipCur'</span>).siblings().removeClass(<span class="string">'tipCur'</span>);</span><br><span class="line">           searchInput.val(tipItems.eq(tipIndex).text());</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)</span><br><span class="line"> &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>这里主要讲一下这些功能的实现原理：</p><ul><li><p>使用百度进行跳转搜索<br>通过给百度的url传递 wd 字段的参数就可以跳转到相应的搜索结果，就像我上面写的那样。我这里通过open方法来跳转的目的是为了在新窗口中打开。但是有一点不好的是可能会被浏览器拦截，不过这是我自用的插件所以没影响。</p></li><li><p>关键字提示窗口<br>这里实现这个提示窗口主要是用到了jsonp向相应的API发起跨域请求（如上面代码所示），然后就可以拿到相应的数据。</p></li><li><p>单击提示进行搜索<br>这个其实就是在拿到数据并且添加进HTML中后对每条数据进行遍历，绑定一个单击事件，单击进行相应的跳转就可以了。</p></li></ul><blockquote><p>大部分代码都是很好理解的，这里就不做过多的解释了</p></blockquote><h4 id="CSS代码："><a href="#CSS代码：" class="headerlink" title="CSS代码："></a>CSS代码：</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.icon</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">vertical-align</span>: -<span class="number">0.15em</span>;</span><br><span class="line">  <span class="attribute">fill</span>: currentColor;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.icon</span><span class="selector-class">.sousuo</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">12.5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">"./asset/images/bg.jpeg"</span>) center center / cover no-repeat;</span><br><span class="line">  <span class="comment">/* height: 700px; */</span></span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.centerBox</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-50%);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.log</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: orange;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.searchWrap</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">45px</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(255, 255, 255, 0.8);</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">45px</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.searchInput</span> &#123;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">2px</span>;</span><br><span class="line">  <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">45px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(0, 0, 0, 0);</span><br><span class="line">  <span class="attribute">outline</span>: none;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.searchTips</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">98%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(255, 255, 255, 0.9);</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.searchTips</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tipCur</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(0, 0, 0, 1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>样式这里可以讲的一点就是如何使一个dom元素沾满整个屏幕：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">html,</span><br><span class="line">body &#123;</span><br><span class="line">  height: 100%;</span><br><span class="line">&#125;</span><br><span class="line">  .main &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 100%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>主要就是通过这些代码来实现，也非常好理解。</p><h3 id="开发过程中我遇到的一些问题以及解决办法"><a href="#开发过程中我遇到的一些问题以及解决办法" class="headerlink" title="开发过程中我遇到的一些问题以及解决办法"></a>开发过程中我遇到的一些问题以及解决办法</h3><h4 id="click-和-blur-事件的冲突"><a href="#click-和-blur-事件的冲突" class="headerlink" title="click 和 blur  事件的冲突"></a><strong>click</strong> 和 <strong>blur</strong>  事件的冲突</h4><p>  起初当我基本上完成大部分功能的之后进行测试，发现当点击提示框中的内容的时候竟然没有进行跳转，而是直接执行了失焦事件中的隐藏提示框的代码。我就猜想应该是由于单击的时候会使文本框失焦，并且 blur 会在 click 之前触发，进行一些尝试之后还是没有解决问题，后来百度了一下找到了解决问题的两种办法：</p><ol><li><p>第一种就是通过设置定时器，通过设置<code>setTimeout</code>来使 blur 事件中的代码晚一些执行：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">searchInput.blur(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    searchTips.hide();</span><br><span class="line">  &#125;, <span class="number">300</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p> 但是这种办法的缺点也很明显，就是延迟的时间要足够长，起码要长到 click 事件的代码执行完毕，我这里测试大概最少300ms,所以在执行 blur 事件的时候能感觉到很明显的延迟，体验并不是很好。</p></li><li><p>第二种就是使用 <strong>mousedown</strong>事件来替代 click 事件：<br> 我这里采用的就是这种方式，这种方式就很好的解决了问题，但是也不是没有缺点， mousedown 事件在鼠标按下时就会触发，所以触发次数也就和按下的事件有关系，如果只是快速的按一下那么没有区别，但是按久了就会触发非常多次，所以很多场景下不适用，不过我这里没有关系，因为只要按下去了就打开新窗口不在当前window环境下了，所以没有影响。</p><p> 这里再来讲一下 <strong>mousedown</strong>、<strong>mouseup</strong>、<strong>click</strong>这三个事件的主要区别及应用场景：</p><ul><li><p>click ：在同一元素上 相继触发 mousedown 和 mouseup 才会触发 click ，并且能够通过按下回车来触发。大部分场景下都是使用 click ，因为过程比较完整也不会重复触发。经测试右键不会触发。</p></li><li><p>mouseup ：释放鼠标时触发。右键可以触发。</p></li><li><p>mousedown：鼠标按下时触发。不过由于按下就触发的特性，比较的快，所以 mousedown 会在 blur 之前触发，这就是为什么使用 mousedown 可以解决冲突问题。</p></li></ul><p>这里总结一下：一次完整的鼠标单击就是这样一个过程 mousedown &gt; mouseup &gt; click 。 mousedown 和 mouseup 配合可以实现监听鼠标长按。具体怎么使用就看场景需求了。</p></li></ol><h4 id="异步问题"><a href="#异步问题" class="headerlink" title="异步问题"></a>异步问题</h4><p>当我完成了添加提示框功能之后，想要继续完成鼠标经过提示内容给其添加样式的功能，当我写完之后却发现了问题：我是直接将添加样式的代码放在了和文本框平级，我想这从逻辑上来说应该没有什么问题，但实际上却出现了问题，起初是报错提示框内容中的那个jQuery对象是空的，这就很奇怪了，我明明在每次的 input 事件执行时就给这个jQuery对象赋值了，出现这种情况也就意味着input事件发生在添加样式之后。</p><p>经过一段事件的思考我想明白了，主要是忽略了无论是 input 事件还是 Ajax 的请求，这二者都是异步的任务，而添加样式所用的过程是主线程上的同步操作，所以一定会在这两个异步任务之前生效，所以才会导致这种情况的出现，那么解决办法也就很简单了，将添加样式的代码在这两个异步任务之后执行就可以了，所以只需要将代码放进 Ajax 的回调中执行就可以了，那么这样就成功的解决了问题。同理，单击提示进行搜索的那部分代码也是一样的道理。</p><p>其后后面也有一部分代码（通过方向键控制要搜索的内容的那部分）涉及到操作提示框内容的jQuery对象，那为什么不会出现这种情况呢，到这里其实也很好理解了，因为这部分的代码也是由事件来触发的，也是异步的，并且是在最后面，所以一定是最后执行的。</p><p>关于异步单线程可以参考我的这篇文章:<a href="https://q32757468.github.io/2019/07/06/%E5%85%B3%E4%BA%8Ejs%E5%8D%95%E7%BA%BF%E7%A8%8B%E5%BC%82%E6%AD%A5%E4%B8%8E%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E6%9C%BA%E5%88%B6%E7%9A%84%E5%AD%A6%E4%B9%A0/">简单理解js单线程异步与事件循环机制</a></p><h4 id="阻止键盘方向键的默认行为"><a href="#阻止键盘方向键的默认行为" class="headerlink" title="阻止键盘方向键的默认行为"></a>阻止键盘方向键的默认行为</h4><p>在文本框中，键盘的方向键存在着默认行为，比如说是方向键上，这会使光标移动到文本框最前面，我们在搜索的提示框中就可以通过上下键来切换搜索内容，但是同时也会触发默认行为，使光标移动到文本框最前端，这样的结果很明显不是我们想要的。</p><p>百度了一下相关的解决办法，就是阻止上箭头的默认行为，但是发现好像不起作用，最后其实发现解决办法是和解决 click 和 blur 冲突问题的办法类似，更换触发事件，将按下的<strong>keyup</strong>事件修改为<strong>keydown</strong>事件，然后这时候阻止默认行为就有效了，应该也是触发先后的问题，这样修改之后发生的另一个变化就是按键可以”连发”了,不过这也不算坏处。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过制作这个简单的搜索小功能还是收获挺多的，能够完全理解的话也能进步挺多的，特别是异步问题那里，之前只有其概念，现在运用起来了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;这两天在开发一个自己的chrome插件，实现自定义新标签页，那么新标签页肯定少不了搜索的功能，因为我比较常用的搜索引擎是百度，所以会跳到百度的搜索结果，并且通过调用API来实现有一个提示的小窗口，原理是挺简单的，但是写的过程中还是遇到一些问题，记录一下。&lt;br&gt;
    
    </summary>
    
      <category term="页面小功能" scheme="https://q32757468.github.io/categories/%E9%A1%B5%E9%9D%A2%E5%B0%8F%E5%8A%9F%E8%83%BD/"/>
    
    
      <category term="JS" scheme="https://q32757468.github.io/tags/JS/"/>
    
      <category term="chrome插件开发" scheme="https://q32757468.github.io/tags/chrome%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
      <category term="chrome" scheme="https://q32757468.github.io/tags/chrome/"/>
    
  </entry>
  
  <entry>
    <title>vue实现轮播图组件</title>
    <link href="https://q32757468.github.io/2019/08/08/vue%E5%AE%9E%E7%8E%B0%E8%BD%AE%E6%92%AD%E5%9B%BE%E7%BB%84%E4%BB%B6/"/>
    <id>https://q32757468.github.io/2019/08/08/vue实现轮播图组件/</id>
    <published>2019-08-08T11:53:49.000Z</published>
    <updated>2019-09-25T02:29:02.106Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前面已经介绍实现过了常见的一些轮播图，也对其实现原理十分的了解了，那么在vue中要如何实现轮播图呢，其实也不难，因为原理都是一样的，只是实现的形式有所区别。这里就以实现淡入淡出轮播图为例。<br><a id="more"></a></p></blockquote><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>实现淡入淡出轮播图的原理其实也都是一样的，前面也提到了，就是将要轮播的所有图片都叠在一起，默认只显示第一张，然后通过定时器来控制图片的切换，并且加上淡入淡出的动画效果，在vue中实现起来还要更加的方便。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>template部分：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"banner"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bannerWrap"</span> @<span class="attr">mouseover</span>=<span class="string">"suspend"</span> @<span class="attr">mouseout</span>=<span class="string">"autoPlay"</span> @<span class="attr">blur</span>=<span class="string">"suspend"</span> @<span class="attr">focus</span>=<span class="string">"autoPlay"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"pre"</span> @<span class="attr">click</span>=<span class="string">"pre"</span>&gt;</span>PRE<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"next"</span> @<span class="attr">click</span>=<span class="string">"next"</span>&gt;</span>NEXT<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition-group</span> <span class="attr">tag</span>=<span class="string">"ul"</span> <span class="attr">class</span>=<span class="string">"imgList"</span> <span class="attr">name</span>=<span class="string">"fade"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-show</span>=<span class="string">"item.cur"</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in list"</span> <span class="attr">:key</span>=<span class="string">"item.src"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">item.src</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"optionList"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in list"</span> <span class="attr">:key</span>=<span class="string">"item.src"</span> @<span class="attr">click</span>=<span class="string">"jump(index)"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>js部分：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  components: &#123;</span><br><span class="line">    banner: &#123;</span><br><span class="line">      template: <span class="string">'#banner'</span>,</span><br><span class="line">      data() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          timer: <span class="literal">null</span>,</span><br><span class="line">          index: <span class="number">0</span>,</span><br><span class="line">          <span class="comment">// 图片的地址以及是否显示</span></span><br><span class="line">          list: [</span><br><span class="line">            &#123; <span class="string">'src'</span>: <span class="string">'./images/beach-exotic-holiday-248797.jpg'</span>, <span class="string">'cur'</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">            &#123; <span class="string">'src'</span>: <span class="string">'./images/blur-calm-waters-dawn-395198.jpg'</span>, <span class="string">'cur'</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">            &#123; <span class="string">'src'</span>: <span class="string">'./images/dark-flash-lightning-1114690.jpg'</span>, <span class="string">'cur'</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">            &#123; <span class="string">'src'</span>: <span class="string">'./images/mountain-range-mountains-114979.jpg'</span>, <span class="string">'cur'</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        <span class="comment">// 定义自动播放函数，通过调用next方法来实现</span></span><br><span class="line">        autoPlay() &#123;</span><br><span class="line">          clearInterval(<span class="keyword">this</span>.timer)<span class="comment">//还是一样，开启定时器之前需要先清除一下，防止bug</span></span><br><span class="line">          <span class="keyword">this</span>.timer = setInterval(<span class="keyword">this</span>.next, <span class="number">2000</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 定义切换到下一张图片的方法</span></span><br><span class="line">        next() &#123;</span><br><span class="line">          <span class="keyword">this</span>.index++;</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">this</span>.index &gt;= <span class="keyword">this</span>.list.length) &#123;</span><br><span class="line">            <span class="keyword">this</span>.index = <span class="number">0</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">this</span>.list.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            item.cur = <span class="literal">false</span>;</span><br><span class="line">          &#125;);</span><br><span class="line">          <span class="keyword">this</span>.list[<span class="keyword">this</span>.index].cur = <span class="literal">true</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 定义切换到前一张图片的方法</span></span><br><span class="line">        pre() &#123;</span><br><span class="line">          <span class="keyword">this</span>.index--;</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">this</span>.index &lt;= <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.index = <span class="keyword">this</span>.list.length - <span class="number">1</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">this</span>.list.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            item.cur = <span class="literal">false</span>;</span><br><span class="line">          &#125;);</span><br><span class="line">          <span class="keyword">this</span>.list[<span class="keyword">this</span>.index].cur = <span class="literal">true</span>;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="keyword">this</span>.index);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 暂停的方法</span></span><br><span class="line">        suspend() &#123;</span><br><span class="line">          clearInterval(<span class="keyword">this</span>.timer)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 点击选项圆点进行跳转的方法</span></span><br><span class="line">        jump(index) &#123;</span><br><span class="line">          <span class="keyword">this</span>.index = index;</span><br><span class="line">          <span class="keyword">this</span>.list.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            item.cur = <span class="literal">false</span>;</span><br><span class="line">          &#125;);</span><br><span class="line">          <span class="keyword">this</span>.list[index].cur = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      mounted() &#123;</span><br><span class="line">        <span class="comment">// 自动播放函数以及失焦暂定获焦开启都需要在mounted阶段设置</span></span><br><span class="line">        <span class="keyword">this</span>.autoPlay();</span><br><span class="line">        <span class="comment">// 直接在mounted中写聚焦以及失焦的函数</span></span><br><span class="line">        <span class="built_in">window</span>.blur = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          clearInterval(<span class="keyword">this</span>.timer)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">window</span>.focus = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          autoPlay()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>整体的思路和前面使用jQuery写的轮播图的思路是一致的，只不过是换了一种方式。</p><p>样式部分：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">  * &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.bannerWrap</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.imgList</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.imgList</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.imgList</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-50%);</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.pre</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50px</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.next</span> &#123;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">50px</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.optionList</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.optionList</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#fff</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 实现动画的两组类 */</span></span><br><span class="line">  <span class="selector-class">.fade-enter-active</span>,</span><br><span class="line">  <span class="selector-class">.fade-leave-active</span> &#123;</span><br><span class="line">    <span class="attribute">transition</span>: opacity .<span class="number">5s</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.fade-enter</span>,</span><br><span class="line">  <span class="selector-class">.fade-leave-to</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>样式部分要注意的就是实现动画效果的两组类，不能设置错了。</p><p>通过以上代码就可以实现一个淡入淡出的轮播图了，非常的简便，代码也相较不使用vue开发要少的多。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这次通过vue实现了一个淡入淡出的轮播图组件，原理都是一样的，只不过是使用vue来开发会更加简便。滑动轮播图也是类似的，这里就不演示了。重要的是熟悉vue的开发思路以及开发原理。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;前面已经介绍实现过了常见的一些轮播图，也对其实现原理十分的了解了，那么在vue中要如何实现轮播图呢，其实也不难，因为原理都是一样的，只是实现的形式有所区别。这里就以实现淡入淡出轮播图为例。&lt;br&gt;
    
    </summary>
    
      <category term="页面小功能" scheme="https://q32757468.github.io/categories/%E9%A1%B5%E9%9D%A2%E5%B0%8F%E5%8A%9F%E8%83%BD/"/>
    
    
      <category term="JS" scheme="https://q32757468.github.io/tags/JS/"/>
    
      <category term="动画" scheme="https://q32757468.github.io/tags/%E5%8A%A8%E7%94%BB/"/>
    
      <category term="VUE" scheme="https://q32757468.github.io/tags/VUE/"/>
    
  </entry>
  
  <entry>
    <title>详解使用jQuery实现滑动轮播图</title>
    <link href="https://q32757468.github.io/2019/08/07/%E8%AF%A6%E8%A7%A3%E4%BD%BF%E7%94%A8jQuery%E5%AE%9E%E7%8E%B0%E6%BB%91%E5%8A%A8%E8%BD%AE%E6%92%AD%E5%9B%BE/"/>
    <id>https://q32757468.github.io/2019/08/07/详解使用jQuery实现滑动轮播图/</id>
    <published>2019-08-07T13:48:50.000Z</published>
    <updated>2019-09-25T02:01:45.104Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;网页中的轮播图十分的常见，并且轮播图的动画样式也有很多种，前面已经有介绍过淡入淡出的轮播图了，比较的简单，这次来详细介绍一下滑动轮播图，并且优化了之前的很多细节，一起来看一看。<br><a id="more"></a></p></blockquote><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>在实现之前先介绍一下滑动轮播图实现的原理，这里分为两种来介绍，常见的滑动轮播图有两种，一种是无限循环滑动的，一种是会往滑回开始位置的，先来讲讲这二者的原理以及区别：</p><h4 id="会滑回的"><a href="#会滑回的" class="headerlink" title="会滑回的"></a>会滑回的</h4><p>通过图片来更好的理解：<br><img src="http://m.qpic.cn/psb?/V131x4904WMIoW/capaDv9kmW.wvAf0Nf.iNakYE9IUQ28dZJhLLcFol5k!/b/dL4AAAAAAAAA&bo=7gahAgAAAAADB2k!&rf=viewer_4"><br>通过这张图片我们就很好理解了，每次轮播其实就是将三张图片当成一个整体向左移一张图片的宽度实现，当到达最左边或者最右边的时候再通过动画滚回第一张或者是最后一张图片，这是一种比较常见的方式。</p><h4 id="无限滑动的"><a href="#无限滑动的" class="headerlink" title="无限滑动的"></a>无限滑动的</h4><p>也一样通过图片来更好的理解：<br><img src="http://m.qpic.cn/psb?/V131x4904WMIoW/3HPElTrJOiNc5U*AqwzOl13jpj.nXXQ9Ya8Im0Cyc.s!/b/dLYAAAAAAAAA&bo=cQXNAAAAAAADB5s!&rf=viewer_4"><br>其实无限滑动的基本原理都是和上面的会滑回的是一样的，最大的区别就在于当到达最左边或者最右边时，这次就不是通过动画来过渡了，而是通过在图片列表的开头添加一张最后的图片以及列表末尾添加一张开头的图片，当轮播到最后一张图片的时候通过修改css样式跳回到第一张图片，由于在末尾添加了一张开头的图片，所以看不出来这个跳转的过程，这样就实现了无限滑动的效果。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="普通版"><a href="#普通版" class="headerlink" title="普通版"></a>普通版</h4><p>HTML部分：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bannerWrap"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"pre"</span>&gt;</span>PRE<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"next"</span>&gt;</span>NEXT<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"imgList"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./images/cool-wallpaper-dawn-hd-wallpaper-66997.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./images/flowers-4352530_1280.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./images/hd-wallpaper-mountain-range-mountains-114979.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"optionList"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>html部分没有什么好讲的，按照结构布局好就可以了。</p><p>js部分：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"./js/jquery-3.4.1.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> bannerWrap = $(<span class="string">'.bannerWrap'</span>);</span><br><span class="line">    <span class="keyword">const</span> imgList = $(<span class="string">'.imgList'</span>);</span><br><span class="line">    <span class="keyword">const</span> optionList = $(<span class="string">'.optionList'</span>);</span><br><span class="line">    <span class="keyword">const</span> preBt = $(<span class="string">'.pre'</span>);</span><br><span class="line">    <span class="keyword">const</span> nextBt = $(<span class="string">'.next'</span>);</span><br><span class="line">    <span class="keyword">let</span> timer;</span><br><span class="line">    <span class="keyword">const</span> imgWidth = bannerWrap.width();</span><br><span class="line">    <span class="keyword">const</span> len = imgList.children().length;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自动轮播的函数，通过调用向右滑动的函数来实现轮播</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">autoSlide</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      timer = setInterval(next, <span class="number">3000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    autoSlide();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当鼠标经过轮播图时暂停的函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">suspend</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      bannerWrap.hover(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        clearInterval(timer)</span><br><span class="line">      &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 在每次重新开启定时器之前都需要将定时器清除一遍，防止由于特殊情况定时器并未真正关闭而导致重复开启定时器</span></span><br><span class="line">        clearInterval(timer)</span><br><span class="line">        autoSlide();</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    suspend();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 滑动到下一张的函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      index = index &gt;= len - <span class="number">1</span> ? <span class="number">0</span> : index + <span class="number">1</span>;</span><br><span class="line">      <span class="comment">// 在新的动画开始之前都需要停止一下之前的动画</span></span><br><span class="line">      imgList.stop().animate(&#123;</span><br><span class="line">        <span class="string">'marginLeft'</span>: -imgWidth * index</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 滑动到前一张的函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">pre</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      index = index &lt;= <span class="number">0</span> ? (len - <span class="number">1</span>) : (index - <span class="number">1</span>);<span class="comment">//这里的 index-1 一定要打上括号，否则可能会引发bug</span></span><br><span class="line">      imgList.stop().animate(&#123;</span><br><span class="line">        <span class="string">'marginLeft'</span>: -imgWidth * index</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    nextBt.click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      next();</span><br><span class="line">    &#125;)</span><br><span class="line">    preBt.click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      pre();</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 小圆点跳转的函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">jump</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        optionList.children().eq(i).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          imgList.stop().animate(&#123;</span><br><span class="line">            <span class="string">'marginLeft'</span>: -imgWidth * i</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    jump();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//失去焦点以及获得焦点时</span></span><br><span class="line">    $(<span class="built_in">window</span>).blur(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      clearInterval(timer)</span><br><span class="line">    &#125;)</span><br><span class="line">    $(<span class="built_in">window</span>).focus(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      clearInterval(timer)</span><br><span class="line">      autoSlide();</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>js部分最重要的就是思路，都在注释中有写，应该比较好理解</p><p>css部分：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.bannerWrap</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.imgList</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-50%);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pre</span> &#123;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.next</span> &#123;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.optionList</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.optionList</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>也都是一些基本的样式设置，没有什么好讲的。这里相比于以前写的轮播图来说有优化的地方就是这里并没有直接写一个自动轮播的函数，而是通过调用下一站图片的函数来实现自动轮播，这样就减少了重复代码。</p><h4 id="无限版"><a href="#无限版" class="headerlink" title="无限版"></a>无限版</h4><p>html部分的代码和普通版的是一样的就不放出来了</p><p>css部分代码就只有一下这一部分和普通版有所区别：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="selector-class">.imgList</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">800px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>区别就是调整 margin-left 以显示真正的第一张图片。</p><p>重点就是js部分：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"./js/jquery-3.4.1.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> bannerWrap = $(<span class="string">'.bannerWrap'</span>);</span><br><span class="line">    <span class="keyword">const</span> imgList = $(<span class="string">'.imgList'</span>);</span><br><span class="line">    <span class="keyword">const</span> optionList = $(<span class="string">'.optionList'</span>);</span><br><span class="line">    <span class="keyword">const</span> preBt = $(<span class="string">'.pre'</span>);</span><br><span class="line">    <span class="keyword">const</span> nextBt = $(<span class="string">'.next'</span>);</span><br><span class="line">    <span class="keyword">let</span> timer;</span><br><span class="line">    <span class="keyword">const</span> imgWidth = bannerWrap.width();</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//通过js来添加两张图片</span></span><br><span class="line">    imgList.prepend(imgList.children().last().get(<span class="number">0</span>).outerHTML)<span class="comment">//一定要写在获取长度之前</span></span><br><span class="line">    imgList.append(imgList.children().get(<span class="number">1</span>).outerHTML)<span class="comment">//一定要写在获取长度之前</span></span><br><span class="line">    <span class="keyword">const</span> len = imgList.children().length;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">autoSlide</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      timer = setInterval(next, <span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    autoSlide();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">suspend</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      bannerWrap.hover(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        clearInterval(timer)</span><br><span class="line">      &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        clearInterval(timer)</span><br><span class="line">        autoSlide();</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    suspend();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 滑动到下一张的函数，由于多了两张图片，所以要注意index的值</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      index++;</span><br><span class="line">      <span class="comment">// 这里的stop方法要格外注意一下，必须像这样加参数</span></span><br><span class="line">      imgList.stop(<span class="literal">false</span>, <span class="literal">true</span>).animate(&#123;</span><br><span class="line">        <span class="string">'marginLeft'</span>: -imgWidth * index</span><br><span class="line">      &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= (len - <span class="number">1</span>)) &#123;</span><br><span class="line">          index = <span class="number">1</span>;</span><br><span class="line">          <span class="comment">// 重点就是这个动画执行完毕后的回调，通过这个回调来讲图片重新调回想要的位置以实现无限</span></span><br><span class="line">          imgList.css(&#123;</span><br><span class="line">            <span class="string">'marginLeft'</span>: -imgWidth</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="built_in">console</span>.log(index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 滑动到前一张的函数，与next函数类似</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">pre</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      index--;</span><br><span class="line">      <span class="keyword">if</span> (index &lt;= (<span class="number">-1</span>)) &#123;</span><br><span class="line">        index = (len - <span class="number">2</span>);</span><br><span class="line">        imgList.css(&#123;</span><br><span class="line">          <span class="string">'marginLeft'</span>: -imgWidth * (index)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      imgList.stop(<span class="literal">false</span>, <span class="literal">true</span>).animate(&#123;</span><br><span class="line">        <span class="string">'marginLeft'</span>: -imgWidth * index</span><br><span class="line">      &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">          index = (len - <span class="number">2</span>);</span><br><span class="line">          imgList.css(&#123;</span><br><span class="line">            <span class="string">'marginLeft'</span>: -imgWidth * (index)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    nextBt.click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      next();</span><br><span class="line">    &#125;)</span><br><span class="line">    preBt.click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      pre();</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 小圆点跳转的函数，这里由于多了两张图片，所以也要稍微修改一下</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">jump</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len - <span class="number">2</span>; i++) &#123;</span><br><span class="line">        optionList.children().eq(i).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          imgList.stop().animate(&#123;</span><br><span class="line">            <span class="string">'marginLeft'</span>: -imgWidth * (i + <span class="number">1</span>)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    jump();</span><br><span class="line"></span><br><span class="line">    $(<span class="built_in">window</span>).blur(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      clearInterval(timer)</span><br><span class="line">    &#125;)</span><br><span class="line">    $(<span class="built_in">window</span>).focus(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      clearInterval(timer)</span><br><span class="line">      autoSlide();</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>与普通版不一样的地方都注释出来了，与普通版思路都是差不多的，区别就在于处理最后一张图片回到第一张（或者相反）的方式上有所区别。</p><p>这里再详细讲一下<code>stop()</code>方法为什么要加参数：</p><ul><li><p>如果不加参数的话默认是停止当前动画继续后面的动画，当快速点击下一张图片到最后一张图片通过修改 css 跳回第一张时由于停止了动画就不会执行回调，所以就会持续出现空白。</p></li><li><p>而通过给stop()方法传递参数就可以解决这一问题，<code>stop(false, true)</code>则表示立即完成当前动画，继续后面动画，这样传递参数以后就不会因为停止了动画而导致不执行回调函数了，进而就解决了问题。</p></li></ul><h3 id="一些要十分注意的问题"><a href="#一些要十分注意的问题" class="headerlink" title="一些要十分注意的问题"></a>一些要十分注意的问题</h3><p>轮播图思路比较简单，但是在实现过程中要是忽略一些细节就有可能会导致意想不到的结果，这里提出来要十分注意：</p><ul><li><p>在开启新的动画之前一定要调用<strong>stop()</strong>方法讲之前的动画停止，防止作出不必要的动画。</p></li><li><p>在开启重新调用自动轮播函数之前一定要先清除一遍定时器，否则可能会导致重复开启定时器。</p></li><li><p>由于setInterval在后台运行时会自动停止，当重新运行时会一次性将在后台时的全部运行完，所以当重新切回轮播图时会疯狂滑动，为了避免这种情况就需要手动设置在页面失去焦点时暂停定时器，获取焦点时重新开启。</p></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>前面有写过淡入淡出的轮播图，原理更加的简单，实现起来也更加的简单，这次通过写滑动轮播图来练练手，并且优化了代码，写的过程中也遇到了很多的问题，也都解决了，进而学习到了很多的细节。下次尝试使用vue来写一个轮播图组件。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;网页中的轮播图十分的常见，并且轮播图的动画样式也有很多种，前面已经有介绍过淡入淡出的轮播图了，比较的简单，这次来详细介绍一下滑动轮播图，并且优化了之前的很多细节，一起来看一看。&lt;br&gt;
    
    </summary>
    
    
      <category term="JS" scheme="https://q32757468.github.io/tags/JS/"/>
    
      <category term="jQuery" scheme="https://q32757468.github.io/tags/jQuery/"/>
    
      <category term="动画" scheme="https://q32757468.github.io/tags/%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
</feed>
