<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ranshan丶</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://q32757468.github.io/"/>
  <updated>2019-07-04T01:36:28.289Z</updated>
  <id>https://q32757468.github.io/</id>
  
  <author>
    <name>hsl</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue-js的学习（路由的学习与使用）</title>
    <link href="https://q32757468.github.io/2019/07/02/vue-js%E7%9A%84%E5%AD%A6%E4%B9%A0%EF%BC%88%E8%B7%AF%E7%94%B1%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%89/"/>
    <id>https://q32757468.github.io/2019/07/02/vue-js的学习（路由的学习与使用）/</id>
    <published>2019-07-02T10:07:13.000Z</published>
    <updated>2019-07-04T01:36:28.289Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这次来学习vue中的路由，那么什么是前端路由，前端路由就是在单页面中通过url地址的hash来进行单页面的跳转的，而且并不会重新请求页面，这就是前端路由，一般都是通过 # 来实现的。这次来具体学习以下vue-router这个库来实现vue中的路由功能。<br><a id="more"></a></p></blockquote><h3 id="如何使用vue-router"><a href="#如何使用vue-router" class="headerlink" title="如何使用vue-router"></a>如何使用vue-router</h3><h4 id="首先是要引入vue-router包"><a href="#首先是要引入vue-router包" class="headerlink" title="首先是要引入vue-router包"></a>首先是要引入vue-router包</h4><p>那么，其实引入的方式有很多种，可以直接下载到本地引入，也可以使用npm之类的，具体可以看官方网站的介绍<a href="https://router.vuejs.org/zh/installation.html" target="_blank" rel="noopener">介绍</a>。</p><h4 id="创建一个组件构造器"><a href="#创建一个组件构造器" class="headerlink" title="创建一个组件构造器"></a>创建一个组件构造器</h4><p>这里要注意的是这里创建的不是一个组件，而是一个构造器，虽然路由是在不同的组件之间进行切换，但是这里先是创建构造器，也就是通过<code>Vue.extend</code>来创建构造器，最后通过路由router将构造器注册成为组件。就像下面这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var login=Vue.extend(&#123;</span><br><span class="line">      template: &apos;&lt;h1&gt;登录组件&lt;/h1&gt;&apos;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>可以看出这就是我们在学习前面的创建组件的时候的创建构造器的方式，所以这个也可以简写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var register=&#123;</span><br><span class="line">      template: &apos;&lt;h1&gt;注册组件&lt;/h1&gt;&apos;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure></p><p>直接用一个对象来表示构造器。而构造其中的模板就是我们之后路由组件中的内容。</p><h4 id="通过VueRouter来创建路由实例及定义路由规则"><a href="#通过VueRouter来创建路由实例及定义路由规则" class="headerlink" title="通过VueRouter来创建路由实例及定义路由规则"></a>通过VueRouter来创建路由实例及定义路由规则</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const router = new VueRouter(&#123;      //创建一个路由对象</span><br><span class="line">    routes: [&#123;                      //routes的意思就是道路的意思，这个数组里面就放我们所要定义的路由规则</span><br><span class="line">                                 //这个数组里面用对象来表示每个路由规则，两个对象就是两条路由规则</span><br><span class="line">            path: '/login',     //对象里面的path表示路由的地址</span><br><span class="line">            component: login    //component表示对应的路由组件</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            path: '/register',</span><br><span class="line">            component: register</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>这里要注意的是这里的routes是一个数组，写的时候不要写错了。</p></blockquote><h4 id="挂在到vue实例中"><a href="#挂在到vue实例中" class="headerlink" title="挂在到vue实例中"></a>挂在到vue实例中</h4><p>在实例中挂载过来路由规则才会生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line">      el: &apos;#app&apos;,</span><br><span class="line">      router: router // 使用 router 属性来使用路由规则,可以直接简写成一个router，因为键和值都是一样的。</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h4 id="使用-router-link-来对路由组件进行导航"><a href="#使用-router-link-来对路由组件进行导航" class="headerlink" title="使用 router-link 来对路由组件进行导航"></a>使用 router-link 来对路由组件进行导航</h4><p>其实可以通过HTML本身自带的 a 标签来设置url地址来设置hash来实现导航跳转的目的，但是在vue-router中也提供了进行导航的方式，并且更加的实用。<br>就是使用 router-link ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-link to=&quot;/login&quot;&gt;登录&lt;/router-link&gt;</span><br><span class="line">    &lt;router-link to=&quot;/register&quot;&gt;注册&lt;/router-link&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>router-link标签默认在页面上是渲染成 a 标签的，同样，这个也可以通过 <code>tag</code>  属性来进行修改。</p><h4 id="使用-router-view-将路由组件挂载到页面中"><a href="#使用-router-view-将路由组件挂载到页面中" class="headerlink" title="使用 router-view 将路由组件挂载到页面中"></a>使用 router-view 将路由组件挂载到页面中</h4><p>前面都只是创建路由组件，但是创建好了没有放到页面里面去也相当于没有什么用，这里就需要通过 router-view 标签将前面定义过的路由组件放到页面中去。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 默认一个 router-view 只会显示一条平级的路由规则 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>要注意的一件事情是一个 router-view 默认只显示当前url地址匹配到的路由组件的内容，如果没有匹配到那么就不会显示出来，比如前面都没有设置根路径的路由那么页面初始的状态下是什么都不会显示的，只有在路由切换到相应的地址的时候才会有显示。</p></blockquote><h3 id="设置路由重定向"><a href="#设置路由重定向" class="headerlink" title="设置路由重定向"></a>设置路由重定向</h3><p>在很多时候我们需要将一个路由地址可以对应多种路径，比如让上面的页面在根路径下默认显示 login 那么这个时候就需要使用路由重定向来将根路径重定向到 login<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    path: &apos;/&apos;,</span><br><span class="line">    //这里要注意的是这里redirect后面跟的是重定向的路径</span><br><span class="line">    redirect: &apos;/login&apos; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们只需要给我们需要重定向的路径添加一条路由规则并且给它重定向到我们想要的路径就可以了。</p><h3 id="设置路由链接激活样式"><a href="#设置路由链接激活样式" class="headerlink" title="设置路由链接激活样式"></a>设置路由链接激活样式</h3><p>有时候我们需要给当前所在位置的 router-link 设置高亮，那么这个时候我们就可以通过给 <code>router-link-active</code>这个类设置样式来实现我们想要的效果，因为我们每次切换路由vue每次都会自动的将这个类放到当前所在的 router-link 上，所以只需要修改这个类的样式就可以了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    .router-link-active &#123;</span><br><span class="line">        color: red;</span><br><span class="line">        font-size: 20px;</span><br><span class="line">        background-color: aqua;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><img src="http://m.qpic.cn/psb?/V131x4904WMIoW/T*wp.OVMRn7cJA0qmNP*P6Z6JqkexmQw0C4wpB85sMg!/b/dDABAAAAAAAA&bo=AQOoAQAAAAADB4k!&rf=viewer_4"></p><p>可以看出这个样式成功应用上去了。</p><p>当然，这个类的名称是可以自定义修改的，我们只需要在创建路由对象的时候设置 <code>linkActiveClass</code>就可以来全局配置这个链接激活状态的类名。<br>就像这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    <span class="comment">// 这里设置链接激活的类</span></span><br><span class="line">    linkActiveClass: <span class="string">'myclass'</span>,     <span class="comment">//设置过后就需要通过修改我们自定义的类来设置链接激活样式了</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里设置路由规则</span></span><br><span class="line">    routes: [&#123;</span><br><span class="line">            path: <span class="string">'/'</span>,</span><br><span class="line">            redirect: <span class="string">'/login'</span> </span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            path: <span class="string">'/login'</span>,</span><br><span class="line">            component: login</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            path: <span class="string">'/register'</span>,</span><br><span class="line">            component: register</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="设置路由组件切换动时画效果"><a href="#设置路由组件切换动时画效果" class="headerlink" title="设置路由组件切换动时画效果"></a>设置路由组件切换动时画效果</h3><p>设置路由组件间的动画切换效果也很简单，只需要将 <code>router-view</code>标签 放进动画的 <code>transition</code>标签里面并且设置动画的两组类（或者直接用第三方的库）就可以了。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">    <span class="selector-class">.myclass</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: red;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: aqua;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.v-enter</span>,</span><br><span class="line">    <span class="selector-class">.v-leave-to</span> &#123;</span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translateX</span>(150px);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.v-enter-active</span>,</span><br><span class="line">    <span class="selector-class">.v-leave-active</span> &#123;</span><br><span class="line">        <span class="attribute">transition</span>: all <span class="number">1s</span> ease;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">mode</span>=<span class="string">"out-in"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过这样的设置就可以使组件在切换的时候拥有动画效果了。</p><h3 id="路由嵌套"><a href="#路由嵌套" class="headerlink" title="路由嵌套"></a>路由嵌套</h3><p>假如如有组件中还嵌套有路由,那么要实现一层一层的显示路由就要用到路由嵌套，在需要嵌套的路由规则中通过 <code>children</code> 来实现路由嵌套。</p><ul><li><p>首先是在一个路由构造器中嵌套有子路由</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/login"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/register"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition</span> <span class="attr">mode</span>=<span class="string">"out-in"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是登录组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/login/son"</span>&gt;</span>点这里切换到子组件<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>然后是定义了子路由,并且将其嵌套在父级的路由规则中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> son = &#123;</span><br><span class="line">    template: <span class="string">"&lt;h1&gt;这是嵌套在里面的子组件&lt;/h1&gt;"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    linkActiveClass: <span class="string">'myclass'</span>,</span><br><span class="line">    routes: [&#123;</span><br><span class="line">            path: <span class="string">'/'</span>,</span><br><span class="line">            redirect: <span class="string">'/login'</span> <span class="comment">//这里要注意的是这里redirect后面跟的是重定向的路径</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            path: <span class="string">'/login'</span>,</span><br><span class="line">            component: login,</span><br><span class="line">            <span class="comment">// children是父组件规则中的一个属性的值，并且这是一个数组，这个数组里面放的就是子路由的路径规则，相当于是在一条路由规则里面来定义新的路由规则</span></span><br><span class="line">            children: [</span><br><span class="line">                <span class="comment">// 这里一样可以写很多条的子路由规则</span></span><br><span class="line">                &#123;</span><br><span class="line">                    path: <span class="string">'son'</span>,  <span class="comment">//这里使用的相对路径</span></span><br><span class="line">                    component: son</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            path: <span class="string">'/register'</span>,</span><br><span class="line">            component: register</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>这里要注意的一点是子路由中的路由规则中的路径使用的是相对路径，并且是相对于父级路由的相对路径，如果使用的是从根路径开始的绝对路径，那么就只会显示子路由中的内容，就不会显示父级路由中的内容。</p></blockquote><ul><li>这里也可以看到效果，当我们切换到子路由，显示了从父级路由开始的路由组件：<br><img src="http://m.qpic.cn/psb?/V131x4904WMIoW/6hUG*9YVk7hmAeE59TRW.VwtRkvFbw21GYJYweNhOzo!/b/dL8AAAAAAAAA&bo=dgQMAgAAAAADB14!&rf=viewer_4"></li></ul><h3 id="路由参数的传递及获取的两种方式"><a href="#路由参数的传递及获取的两种方式" class="headerlink" title="路由参数的传递及获取的两种方式"></a>路由参数的传递及获取的两种方式</h3><p>我们经常会有需求在url地址中传递参数，那么在vue中拿到参数以及获取参数的方式有两种：</p><h4 id="第一种，通过query"><a href="#第一种，通过query" class="headerlink" title="第一种，通过query"></a>第一种，通过query</h4><p>传递参数的方式像是在学php时用get方式传递数据时使用的方法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/login?id=1&amp;name=csz"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><p>获取参数的方法：</p><ul><li><p>首先我们要知道在我们创建的vue实例中有一个$route属性，这个属性中就包含了我们的路由信息，通过展开这个属性，我们可以发现有一个 query 属性，而这个属性是一个对象，包含了我们通过查询字符串所传递的参数，我们就可以通过调用这个对象来拿到我们的参数。<br><img src="http://m.qpic.cn/psb?/V131x4904WMIoW/gRrhsGcI.*0vtKmQ59Vuz4G8xc3xaZR5uigGv20OQs0!/b/dFIBAAAAAAAA&bo=EwQkAQAAAAADBxA!&rf=viewer_4"></p></li><li><p>通过这种方式我们可以很轻松的拿到我们想要的参数并且使用它</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;这是登录组件---&#123;&#123;this.$route.query.id&#125;&#125;&lt;/h1&gt;</span><br></pre></td></tr></table></figure></li></ul><p>那么此时当我们切换到登录组件的时候就还会额外显示我们传递的id参数了。</p><h4 id="第二种，通过params"><a href="#第二种，通过params" class="headerlink" title="第二种，通过params"></a>第二种，通过params</h4><p>这种方式与query有很明显的区别：</p><ul><li><p>首先是传递参数的方式有所区别</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=&quot;/register/2/csz2&quot;&gt;注册&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><ul><li>可以看出这里在url地址上只设置了参数的值，并没有对参数设置名称。</li><li>参数的名称还需要在设置路由路径的时候进行设置：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        path: &apos;/register/:id/:name&apos;,</span><br><span class="line">        component: register</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>通过这种方式也能实现一样的效果，并且拿到参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;这是注册组件---&#123;&#123;this.$route.params.id&#125;&#125;&lt;/h1&gt;</span><br></pre></td></tr></table></figure></li></ul><p>也可以成功拿到我们想要的值。</p><h3 id="命名视图"><a href="#命名视图" class="headerlink" title="命名视图"></a>命名视图</h3><p>在有些场景我们希望同时展示多个视图，也就是多个 <code>&lt;router-view&gt;&lt;/router-view&gt;</code> ，但是默认情况下我们在页面中使用多个 <router-view></router-view> 的话也不会显示多个视图，那么这个时候我们就需要通过对视图来进行命名来显示我们想要的视图了。</p><h4 id="首先是对视图进行命名"><a href="#首先是对视图进行命名" class="headerlink" title="首先是对视图进行命名"></a>首先是对视图进行命名</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>只要对视图进行了命名就可以指定这个视图显示什么路由组件了。</p><h4 id="创建构造器以及创建路由实例"><a href="#创建构造器以及创建路由实例" class="headerlink" title="创建构造器以及创建路由实例"></a>创建构造器以及创建路由实例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">var top1 = &#123; //这里还有一个大问题，一个bug，就是组件构造器的名字不能够使用 top 否则直接会找不到这个构造器从而报错</span><br><span class="line">    template: &apos;&lt;h3 class=&quot;top1&quot;&gt;这是上边部分&lt;/h3&gt;&apos;</span><br><span class="line">&#125;</span><br><span class="line">var left = &#123;</span><br><span class="line">    template: &apos;&lt;h3 class=&quot;left&quot;&gt;这是左边部分&lt;/h3&gt;&apos;</span><br><span class="line">&#125;</span><br><span class="line">var right = &#123;</span><br><span class="line">    template: &apos;&lt;h3 class=&quot;right&quot;&gt;这是右边部分&lt;/h3&gt;&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const router = new VueRouter(&#123;</span><br><span class="line">    routes: [&#123;</span><br><span class="line">        path: &apos;/&apos;,</span><br><span class="line">        components: &#123;       //这里使用的是components而不是component</span><br><span class="line">            default: top1, //没有设置name的默认就是用default</span><br><span class="line">            right,</span><br><span class="line">            left,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>需要在同一级路径显示多个路由组件就需要在配置这条路径的路由规则的时候使用  <code>components</code> 来配置显示的路由组件，这里面是一个对象，是 视图  <code>name:构造器名字</code> 的这种形式，对于没有命名的视图则使用 default 来进行配置。</p><p><img src="http://m.qpic.cn/psb?/V131x4904WMIoW/8yPBUkHvZsoDoT*Gz01W2KTd5fihtXgxL0GqK9iFORU!/b/dL8AAAAAAAAA&bo=gAcSBAAAAAADB7M!&rf=viewer_4"></p><blockquote><p>这里要注意的是这里因为配置的是多个路由组件，所以使用的是 components 而不是前面只显示单个组件时的 component。</p></blockquote><p>这里我发现一个vue中的bug，起初我在定义三个路由组件的构造器的时候使用了 top left right 这三个名字，最后在页面中查看，只显示了后面两个组件，然后控制台报了一个错误，说有一个组件没有定义，然后我猜想是不是定义top的时候哪里写错了，后面发现并不是，后面我只能猜测难道是因为名字的问题？然后我改了一个名字，果真是名字的问题。这里值得注意以下。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这是是对vue router学习的一些笔记，有一些问题需要注意</p><ul><li><p>两种方式都可以传递参数并且获取到参数，但是二者有明显的区别，要注意区分，使用哪种方式看个人习惯就好了，我比较习惯于使用query来传递和获取参数。</p></li><li><p>在命名视图的时候有一个bug，要多注意，以后对组件命名尽量不要使用 top 这个名字来命名。 </p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;这次来学习vue中的路由，那么什么是前端路由，前端路由就是在单页面中通过url地址的hash来进行单页面的跳转的，而且并不会重新请求页面，这就是前端路由，一般都是通过 # 来实现的。这次来具体学习以下vue-router这个库来实现vue中的路由功能。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue-js的学习（ref的学习）</title>
    <link href="https://q32757468.github.io/2019/07/02/vue-js%E7%9A%84%E5%AD%A6%E4%B9%A0%EF%BC%88ref%E7%9A%84%E5%AD%A6%E4%B9%A0%EF%BC%89/"/>
    <id>https://q32757468.github.io/2019/07/02/vue-js的学习（ref的学习）/</id>
    <published>2019-07-02T03:10:09.000Z</published>
    <updated>2019-07-02T03:35:25.528Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在vue中是不提倡操作dom元素的,但是很多时候还是需要去操作dom元素的,那么这个时候该如何去获取dom元素,并且对他进行操作呢,如果直接通过原生js的各种选择器来操作的话其实也行,用jQuery也可以,但是在vue中都不提倡这样操作,其实我们就可以通过vue中的ref来获取以及操作dom元素.<br><a id="more"></a></p></blockquote><h3 id="来看一个简单的例子"><a href="#来看一个简单的例子" class="headerlink" title="来看一个简单的例子"></a>来看一个简单的例子</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- ref就像是一个id一样可以设置在元素身上，也可以设置在组件的引用标签上 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 设置在dom元素上那么在vue中拿到的就是dom元素原生对象 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span> <span class="attr">ref</span>=<span class="string">"test"</span>&gt;</span>这是vue实例中的一句话<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"myalert"</span>&gt;</span>点击我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"myalert2"</span>&gt;</span>点击我2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 如果设置在组件的引用标签上拿到的就是一个vue实例的对象 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">test</span> <span class="attr">ref</span>=<span class="string">"test2"</span>&gt;</span><span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./../../js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">            data() &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            methods: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 可以成功对一个原生的dom对象进行了操作,输出了它里面的文本</span></span></span><br><span class="line"><span class="undefined">                myalert() &#123;</span></span><br><span class="line"><span class="javascript">                    alert(<span class="keyword">this</span>.$refs.test.innerText);</span></span><br><span class="line"><span class="undefined">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 成功的对一个vue实例对象进行了操作，输出了它里面的属性</span></span></span><br><span class="line"><span class="undefined">                myalert2() &#123;</span></span><br><span class="line"><span class="javascript">                    alert(<span class="keyword">this</span>.$refs.test2.mgs);</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            components: &#123;</span></span><br><span class="line"><span class="undefined">                test: &#123;</span></span><br><span class="line"><span class="xml">                    template: "<span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是一个子组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>",</span></span><br><span class="line"><span class="undefined">                    data() &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                            mgs: <span class="string">'这是子组件中的一句话'</span>,</span></span><br><span class="line"><span class="undefined">                        &#125;</span></span><br><span class="line"><span class="undefined">                    &#125;,</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过以上例子我们就可以看出:</p><ul><li><p>通过在标签上设置ref来注册<code>$refs</code>对象</p></li><li><p>注册在组件引用标签上与注册在dom元素上是有差别的,如果是注册在组件上那么拿到的就是一个组件实例,如果注册在dom元素上拿到的就是一个原生的dom对象.</p></li><li><p>可以通过给子组件注册ref来获取到子组件中的属性以及方法并进行操作.</p></li></ul><p><img src="http://m.qpic.cn/psb?/V131x4904WMIoW/udRf.GDUfo.MCwlGajd42SwgHrKsEJ0QfsqWaf7W81M!/b/dL4AAAAAAAAA&bo=sQRxAQAAAAADB.c!&rf=viewer_4"></p><p>通过在控制台中的查看我们也可以看出$refs是一个对象,里面保存了注册了ref的dom对象或者组件实例.</p><blockquote><p>注意是通过<code>this.$refs</code>来使用,s不能漏了,因为里面可以保存许多的内容.</p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>ref的使用比较简单,但是感觉作用很强大,以后开发要灵活运用.</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在vue中是不提倡操作dom元素的,但是很多时候还是需要去操作dom元素的,那么这个时候该如何去获取dom元素,并且对他进行操作呢,如果直接通过原生js的各种选择器来操作的话其实也行,用jQuery也可以,但是在vue中都不提倡这样操作,其实我们就可以通过vue中的ref来获取以及操作dom元素.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue.js的学习（向子组件传递属性以及方法）</title>
    <link href="https://q32757468.github.io/2019/07/01/vue-js%E7%9A%84%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%90%91%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E9%80%92%E5%B1%9E%E6%80%A7%E4%BB%A5%E5%8F%8A%E6%96%B9%E6%B3%95%EF%BC%89/"/>
    <id>https://q32757468.github.io/2019/07/01/vue-js的学习（向子组件传递属性以及方法）/</id>
    <published>2019-07-01T09:46:37.000Z</published>
    <updated>2019-07-01T14:41:13.259Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前面学习了创建组件的几种方式，那么这次来学习以下父组件如何向子组件传递属性以及方法，，因为父组件只能使用父组件中的值和方法，子组件也是一样，那么有时子组件就需要用到父组件的方法该如何做呢，我发现虽然父组件无法获取到子组件内部的东西，但是子组件和父组件其实是有交叉的地方的，也就是在页面中引用子组件的那个标签，那么vue中就是通过这个标签作为中间桥梁来给子组件传递属性的，那么来试一试。<br><a id="more"></a></p></blockquote><h3 id="向子组件传递属性"><a href="#向子组件传递属性" class="headerlink" title="向子组件传递属性"></a>向子组件传递属性</h3><p>向子组件传递属性值主要给组件的引用标签绑定一个中间值来实现，下面是一个例子：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 创建好一个子组件 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 我们可以通过test这个桥梁来传递父组件的属性，这个属性只需要绑定在这个标签上面就好了 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">test</span> <span class="attr">:pmsg</span>=<span class="string">'msg'</span>&gt;</span><span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是子组件---&#123;&#123;pmsg&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./../../js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        Vue.component(<span class="string">'test'</span>, &#123;</span></span><br><span class="line"><span class="javascript">            template: <span class="string">'#test'</span>,</span></span><br><span class="line"><span class="undefined">            data() &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> &#123;&#125;</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 然后通过props来拿到绑定的属性</span></span></span><br><span class="line"><span class="javascript">            props: [<span class="string">'pmsg'</span>], <span class="comment">//注意props是一个只读不可写的数组</span></span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">            data() &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                    msg: <span class="string">'这是父组件中的一句话'</span>,</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p><blockquote><p>要注意的一件事情是props是一个只读不可写的数组</p></blockquote><p><img src="http://m.qpic.cn/psb?/V131x4904WMIoW/xGjaqlSBIzLiRLeW9HraUqS5GhBkqpwL.hP60gLb6eo!/b/dL4AAAAAAAAA&bo=CwN6AQAAAAADB1E!&rf=viewer_4"><br>可以看出子组件成功拿到了父组件的变量并且将其渲染到页面中。</p><h3 id="子组件触发父组件的方法"><a href="#子组件触发父组件的方法" class="headerlink" title="子组件触发父组件的方法"></a>子组件触发父组件的方法</h3><p>子组件既然可以获取到父组件的属性，那么也可以触发到父组件的方法，触发的方式与获取父组件的属性的方式类似。<br>下面看演示：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 创建好一个子组件 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 我们可以通过test这个桥梁来传递父组件的方法，这个属性只方法绑定在这个标签上面就好了 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">test</span> @<span class="attr">sonalert</span>=<span class="string">"myalert"</span>&gt;</span><span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"myclick"</span>&gt;</span>单击我<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./../../js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        Vue.component(<span class="string">'test'</span>, &#123;</span></span><br><span class="line"><span class="javascript">            template: <span class="string">'#test'</span>,</span></span><br><span class="line"><span class="undefined">            data() &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                    msg: <span class="string">'这是子组件中的一句话'</span>,</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            methods: &#123;</span></span><br><span class="line"><span class="undefined">                myclick() &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// emit英文的意思就是触发的意思，这里就可以通过emit来触发前面绑定过的方法，并且后面的参数是作为要触发的方法的参数</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">this</span>.$emit(<span class="string">'sonalert'</span>, <span class="keyword">this</span>.msg)</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">            data() &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                    msg: <span class="string">'这是父组件中的一句话'</span>,</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            methods: &#123;</span></span><br><span class="line"><span class="undefined">                myalert(str) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 最终执行出来的结果这里的this.msg使父组件中的</span></span></span><br><span class="line"><span class="javascript">                    alert(<span class="keyword">this</span>.msg + str);</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>可以看出传递方法的方式与传递属性的方式类似，都是将要传递的东西绑定在引用标签上，只不过绑定方法是用<code>@</code>来绑定，调用的方法也有区别，是用<code>this.$emit(&#39;sonalert&#39;, this.msg)</code>这种方式来触发。</p><p><img src="http://m.qpic.cn/psb?/V131x4904WMIoW/7PE.j8CxBZEBE1Ys4JBrRJaurnXCzXSusP*diYpnBuc!/b/dMMAAAAAAAAA&amp;bo=GQbIAQAAAAADB*Q!&amp;rf=viewer_4" alt="调用成功"></p><blockquote><p>还有要注意的两点是</p><ul><li>通过上面的例子我们也可以看出，虽然这个传递过来的方法是在子组件中执行的，但是实际的执行者是父组件，相当于是通过让子组件来使父组件执行它自己的方法。</li><li>可以通过这种方式来给父组件传递参数，通过上面的例子我们也可以看出，我们在子组件中触发父组件的方法的时候传递了参数，而在方法执行的时候也把子组件传递的参数当作方法的参数执行了。</li></ul></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>灵活运用好父子组件之间传值或者传递方法对开发有很大的帮助，这也是我必须学习的，通过这一些的小demo也算是把这俩搞清楚了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;前面学习了创建组件的几种方式，那么这次来学习以下父组件如何向子组件传递属性以及方法，，因为父组件只能使用父组件中的值和方法，子组件也是一样，那么有时子组件就需要用到父组件的方法该如何做呢，我发现虽然父组件无法获取到子组件内部的东西，但是子组件和父组件其实是有交叉的地方的，也就是在页面中引用子组件的那个标签，那么vue中就是通过这个标签作为中间桥梁来给子组件传递属性的，那么来试一试。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue.js的学习（创建组件的三种方式以及一些问题）</title>
    <link href="https://q32757468.github.io/2019/07/01/vue-js%E7%9A%84%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%88%9B%E5%BB%BA%E7%BB%84%E4%BB%B6%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F%EF%BC%89/"/>
    <id>https://q32757468.github.io/2019/07/01/vue-js的学习（创建组件的三种方式）/</id>
    <published>2019-07-01T08:37:40.000Z</published>
    <updated>2019-07-01T10:12:36.048Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;学习vue也有一段时间了，前面学习了vue中的一些基础的只是，由于期末的原因忙于期末作业就暂停了vue的学习，现在放假了，有时间了就继续学习vue，今天来学习以下vue中的组件，我们都知道其实vue是组件化开发，运用好组件可以大大的提高我们开发的效率。<br><a id="more"></a></p></blockquote><h3 id="创建组件的三种方式"><a href="#创建组件的三种方式" class="headerlink" title="创建组件的三种方式"></a>创建组件的三种方式</h3><h4 id="使用extend来创建组件"><a href="#使用extend来创建组件" class="headerlink" title="使用extend来创建组件"></a>使用extend来创建组件</h4><p>vue中的extend可以创建一个组件构造器，注意这个创建的不是组件，而是组件构造器，还要通过component注册之后才是组件实例，下面是演示：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ext = Vue.extend(&#123;</span><br><span class="line">            template: <span class="string">"&lt;p&gt;这是一段文字&lt;/p&gt;"</span></span><br><span class="line">        &#125;)</span><br><span class="line"><span class="comment">//component方法有两个参数，第一个参数就是将来我们组件在html中的标签名，就是我们要以什么标签名去将组件应用到网页中，第二个参数就是一个构造器，这个构造器中的template就是我们的组件的模板。</span></span><br><span class="line">Vue.component(<span class="string">'test'</span>, ext);</span><br></pre></td></tr></table></figure></p><p>也可以直接这样写：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'test'</span>, Vue.extend(&#123;</span><br><span class="line">            template: <span class="string">"&lt;p&gt;这是一段文字&lt;/p&gt;"</span></span><br><span class="line">        &#125;));</span><br></pre></td></tr></table></figure></p><p>这样写会更加的简便一些。</p><h4 id="省略extend"><a href="#省略extend" class="headerlink" title="省略extend"></a>省略extend</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'test'</span>, &#123;</span><br><span class="line">            template: <span class="string">"&lt;p&gt;这是一段文字&lt;/p&gt;"</span></span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>vue中也可以将extend省略掉，来创建组件，这样会更加的方便一些</p><h4 id="在html中书写模板"><a href="#在html中书写模板" class="headerlink" title="在html中书写模板"></a>在html中书写模板</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">test</span>&gt;</span><span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在html中在template标签中书写模板，然后通过id值或者类名在component引用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"tem"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一段文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./../../js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        Vue.component(<span class="string">'test'</span>, &#123;</span></span><br><span class="line"><span class="javascript">            template: <span class="string">"#tem"</span></span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br></pre></td></tr></table></figure><p>通过这种方式来创建组件有一个最大的优势就是因为模板中的代码不是在字符串中书写的，而是在html中书写的，所以书写起来会比较的方便，有代码提示。</p><h3 id="创建局部组件"><a href="#创建局部组件" class="headerlink" title="创建局部组件"></a>创建局部组件</h3><p>前面都是创建的全局组件，这里来演示以下如何创建一个局部组件，其实现在我学过的所有的局部的东西都有一个特点就是名称都相比于全局组件会带s后缀，因为局部components这个对象中可以创建很多个的局部组件，而且因为是在一个对象中，所以创建的局部组件也是通过一个对象来定义的.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line">    el: '#app',</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">&lt;!-- 这里的components本身也是一个对象的键值对，然后它的值又是一个对象，而这个对象的键就是组件的引用名，值是一个模板对象。 --&gt;</span></span><br><span class="line">                components: &#123;</span><br><span class="line">        // 局部组件一</span><br><span class="line">        test: &#123;</span><br><span class="line">            template: "#tem",</span><br><span class="line">            data() &#123;</span><br><span class="line">                return &#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        // 局部组件二</span><br><span class="line">        test2: &#123;</span><br><span class="line">            template: "#tem",</span><br><span class="line">            data() &#123;</span><br><span class="line">                return &#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><blockquote><p>要注意的是既然创建的是局部的组件这就以为着它只能在相应的全局组件内有效</p></blockquote><h3 id="要注意的事情"><a href="#要注意的事情" class="headerlink" title="要注意的事情"></a>要注意的事情</h3><ul><li>如果使用 Vue.component 定义全局组件的时候，组件名称使用了 驼峰命名，则在引用组件的时候，需要把 大写的驼峰改为小写的字母，同时，两个单词之前，使用 <code>-</code> 符号连接；如果不使用驼峰,则直接拿名称来使用即可;<ul><li>不论是哪种方式创建出来的组件,组件的 template 属性指向的模板内容,必须有且只能有唯一的一个根元素<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&apos;test&apos;, &#123;</span><br><span class="line">            template: &quot;&lt;p&gt;这是一段文字&lt;/p&gt;&lt;p&gt;这是另一段文字&lt;/p&gt;&quot;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>像是这样就会报错，也很好理解，如果需要多个根元素直接创建多个组件就好了。</p><ul><li>我们创建的组件也可以有自己的属性以及方法，因为我们的vue本身就是组件化开发，但是要注意的一件事情是我们创建的组件的data的写法有要求，必须是函数返回值的形式，像下面这样：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ul><p>那为什么要这样呢，如果不这样的话我们给所有组件都用相同名字的data来存放属性，那么当属性的值发生改变的时候，其他的组件的也会受到影响，很显然这不是我们想要的，如果通过函数返回值的这种方式就可以避免这种情况。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>组件在vue中是非常重要的，因为vue就是组建化开发，那么这里就先学习如何创建组件，下一篇介绍组件之间的一些其他知识。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;学习vue也有一段时间了，前面学习了vue中的一些基础的只是，由于期末的原因忙于期末作业就暂停了vue的学习，现在放假了，有时间了就继续学习vue，今天来学习以下vue中的组件，我们都知道其实vue是组件化开发，运用好组件可以大大的提高我们开发的效率。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>jQuery+php实现一个购物车的功能</title>
    <link href="https://q32757468.github.io/2019/06/30/jQuery-php%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%B4%AD%E7%89%A9%E8%BD%A6%E7%9A%84%E5%8A%9F%E8%83%BD/"/>
    <id>https://q32757468.github.io/2019/06/30/jQuery-php实现一个购物车的功能/</id>
    <published>2019-06-30T10:23:06.000Z</published>
    <updated>2019-07-01T02:24:49.031Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在前面学习jQuery的时候，就学习过ajax如何与后端进行交互，虽然学习过php，但是平时使用的比较少，练的也比较少，Ajax也是，虽然实现动态网站上的各种功能的思路都比较清楚，但是写起来还是比较费劲啊，动不动就报错，特别是这次由于比赛需要，需要在一个静态页面的基础上实现动态的添加购物车的功能，就进行了一次尝试着写，按照我自己的思路，最终经过比较长的时间完成了这一功能，特此来记录一下。<br><a id="more"></a></p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>先来说说实现的思路：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其实我觉得思路是非常简单的，无非就是在前端通过添加购物车的按钮发送Ajax请求，然后将需要添加到购物车的商品的信息提交到后台，然后后台再拿到前端发过来的数据，将数据存放到数据表中，然后前端再在购物车页面通过Ajax请求后台，后台将所有数据表中的数据返回前端，然后前端将获取到的数据拼接到页面中，虽然原理非常的简单，但是实现的过程还是不容易啊，不过为了比赛，还是需要更加的熟练。</p><h3 id="这过程中遇到的问题"><a href="#这过程中遇到的问题" class="headerlink" title="这过程中遇到的问题"></a>这过程中遇到的问题</h3><ul><li>第一个问题就是对MySQL的语句不是很熟练，每次写语句的时候都是投机取巧的写，并不是完全手打，而且MySQL的很多命令都忘了，即使没忘的也不是很熟</li><li>第二个问题就是在前端发送请求之前需要拿到一些元素，需要使用到jQuery中的很多筛选元素的方法，这里之前用的也比较少，需要先去查文档才会用，比如像<code>parents()</code>之类的。</li><li>第三个就是php方面对语句不熟。</li></ul><h3 id="最终实现功能的主要代码"><a href="#最终实现功能的主要代码" class="headerlink" title="最终实现功能的主要代码"></a>最终实现功能的主要代码</h3><p>其中很重要的一个也是我想了很久的就是后端究竟要返回什么样的数据，前端又该如何拿到数据。</p><ul><li><p>PHP部分：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">'conn.php'</span>;</span><br><span class="line"><span class="comment">// 通过加这条header语句就可以配合后面的函数将输出的结果转化为json格式</span></span><br><span class="line">header(<span class="string">'Content-Type:application/json; charset=utf-8'</span>);</span><br><span class="line">$res = mysqli_query($conn, <span class="string">'select * from cart'</span>);</span><br><span class="line"><span class="comment">// 将数据先放到一个数组中</span></span><br><span class="line">$data = <span class="keyword">array</span>();</span><br><span class="line"><span class="keyword">while</span> ($row = mysqli_fetch_array($res)) &#123;</span><br><span class="line">    <span class="comment">// 每次循环都将结果存放到这个数组中，由于这里是一个二维表，所以也要用二维数组来存放，一开始没有想明白怎么创建一个键值对的二维数组，折腾了一会就明白了</span></span><br><span class="line">    $data[] = [<span class="string">'name'</span> =&gt; <span class="string">"$row[name]"</span>, <span class="string">'quantity'</span> =&gt; <span class="string">"$row[quantity]"</span>, <span class="string">'price'</span> =&gt; <span class="string">"$row[price]"</span>,];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 然后将数组转化为json格式，这样返回给前端的数据就是一个对象数组了，前端就可以通过jQuery中的``$.each()``方法来对数组进行遍历，然后拿到想要的东西</span></span><br><span class="line"><span class="keyword">echo</span> json_encode($data);</span><br></pre></td></tr></table></figure></li><li><p>前端部分</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> cart_item = $(<span class="string">'.cart_item'</span>);</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type: <span class="string">'get'</span>,</span><br><span class="line">            url: <span class="string">'./php/cart_item.php'</span>,</span><br><span class="line">            success: <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</span><br><span class="line">                <span class="comment">// 通过循环就可以拿到所有的数据，并且将每条数据都拼接到页面中去</span></span><br><span class="line">                $.each(msg, <span class="function"><span class="keyword">function</span> (<span class="params">index, obj</span>) </span>&#123;</span><br><span class="line">                    <span class="comment">// 这里进行拼接，说实话我觉得拼接真是一件麻烦的事情，不知道有没有更简单的方法</span></span><br><span class="line">                    <span class="keyword">var</span> item = <span class="string">'&lt;tr class="t_body"&gt;&lt;td&gt;&lt;input type="checkbox"&gt;&lt;/td&gt;&lt;td&gt; &lt;img src="'</span> + obj.name + <span class="string">'" alt=""&gt;&lt;/td&gt;&lt;td&gt;shoes&lt;/td&gt;&lt;td class="item_pri"&gt;$2400&lt;/td&gt;&lt;td class="item_num"&gt;&lt;input value="1" type="number"&gt;&lt;/td&gt;&lt;td class="item_total"&gt;2222.00$&lt;/td&gt;&lt;/tr&gt;'</span>;</span><br><span class="line">                    $(<span class="string">'tbody'</span>).prepend(item);</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">            error: <span class="function"><span class="keyword">function</span> (<span class="params">xhr</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(xhr);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)();</span><br></pre></td></tr></table></figure></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>感觉上面说了一堆废话，其实就是对Ajax和php还不是很熟练所导致的，写的不是很顺，以后多写应该会有所改观。不过通过这几次的写交互页面，也学到了很多，比如如何在php中返回一个对象（通过数组，然后将数组转化为json），以及前端如何较好的处理后端的数据，还有就是后端的一些逻辑处理也想明白了。以后要多回来看前面写过的代码，</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在前面学习jQuery的时候，就学习过ajax如何与后端进行交互，虽然学习过php，但是平时使用的比较少，练的也比较少，Ajax也是，虽然实现动态网站上的各种功能的思路都比较清楚，但是写起来还是比较费劲啊，动不动就报错，特别是这次由于比赛需要，需要在一个静态页面的基础上实现动态的添加购物车的功能，就进行了一次尝试着写，按照我自己的思路，最终经过比较长的时间完成了这一功能，特此来记录一下。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue.js的学习（vue中的动画）</title>
    <link href="https://q32757468.github.io/2019/06/20/vue-js%E7%9A%84%E5%AD%A6%E4%B9%A0%EF%BC%88vue%E4%B8%AD%E7%9A%84%E5%8A%A8%E7%94%BB%EF%BC%89/"/>
    <id>https://q32757468.github.io/2019/06/20/vue-js的学习（vue中的动画）/</id>
    <published>2019-06-20T12:28:09.000Z</published>
    <updated>2019-07-03T09:03:33.906Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一开始在使用vue中的动画的时候我没有太明白究竟是个怎么样的机制，以及如何高度的定义一些动画，经过我的尝试，现在终于算是弄明白时怎么一回事了<a href="https://cn.vuejs.org/v2/guide/transitions.html#CSS-%E5%8A%A8%E7%94%BB" target="_blank" rel="noopener">这里是官方文档</a>。<br><a id="more"></a></p></blockquote><h3 id="vue中动画的特点"><a href="#vue中动画的特点" class="headerlink" title="vue中动画的特点"></a>vue中动画的特点</h3><p>vue中的动画主要分为两部分，一是进场动画，二是离场动画，vue中的动画主要是监听了设置动画的元素的显示和隐藏，当元素在页面中被显示的时候就会执行进场动画，当元素被隐藏的时候就会执行离场动画，我们可以通过设置两组类来设置离场动画和进场动画。</p><p><strong>一个简单的小例子</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="comment">/* 这两个类一个是动画的起始位置,一个是动画结束的时候的位置 */</span></span></span><br><span class="line"><span class="css">    <span class="selector-class">.dh1-enter</span>,</span></span><br><span class="line"><span class="css">    <span class="selector-class">.dh1-leave-to</span> &#123;</span></span><br><span class="line"><span class="undefined">        transform: translateX(40px);</span></span><br><span class="line"><span class="undefined">        opacity: 0;</span></span><br><span class="line"><span class="undefined">    &#125;  </span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="css">      <span class="comment">/* 这两个类一个是进入时候的动画效果，一个是离开时候的动画效果 */</span></span></span><br><span class="line"><span class="css">    <span class="selector-class">.dh1-enter-active</span>,</span></span><br><span class="line"><span class="css">    <span class="selector-class">.dh1-leave-active</span> &#123;</span></span><br><span class="line"><span class="undefined">        transition: all 1s ease;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- vue中的动画可以分为两部分，一部分是进入的动画，一部分是离开的动画，当元素被隐藏的时候会触发离开的动画，出现的时候会触发进入的动画 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这是通过这种transition和两个种类来设置动画 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"flag=!flag"</span>&gt;</span>点击切换状态<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"flag2=!flag2"</span>&gt;</span>点击切换状态2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 通过添加appear 可以使动画在渲染到页面的时候就执行一次 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">"dh1"</span> <span class="attr">appear</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">"flag"</span>&gt;</span>这是一段话第一段话<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">"dh2"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">"flag2"</span> <span class="attr">:class</span>=<span class="string">"&#123;animated:true,bounce:true&#125;"</span>&gt;</span>这是一段话第二段话<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./../../js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">            data() &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                    flag: <span class="string">'true'</span>,</span></span><br><span class="line"><span class="javascript">                    flag2: <span class="string">'false'</span>,</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            methods: &#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="单元素过渡"><a href="#单元素过渡" class="headerlink" title="单元素过渡"></a>单元素过渡</h3><ul><li><p>可以看出其实vue中将动画主要分成了两部分</p><ul><li>一部分是入场时的动画，也就是动画从隐藏到显示的这个过程中所执行的动画</li><li>另一部分是离场动画也就是元素从显示到隐藏这个过程中所执行的动画</li></ul></li><li><p>可以通过4个类来分别控制动画，就像上面的例子中的那样</p></li><li><p>也可以通过vue来添加类来引用动画库中的动画</p></li></ul><h3 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h3><p>vue中的钩子函数将进场动画和离场动画进行了细分，包括进场前和执行动画时，以及动画结束后，通过设置钩子函数就可以对动画的各个时机进行详细的设置。<br>可以通过钩子函数来设置只进行进场动画或者离场动画，以及对外部引用的动画进行很好的控制。</p><p>可以通过这个例子看出来：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.ball</span> &#123;</span></span><br><span class="line"><span class="undefined">        width: 30px;</span></span><br><span class="line"><span class="undefined">        height: 30px;</span></span><br><span class="line"><span class="undefined">        background-color: bisque;</span></span><br><span class="line"><span class="undefined">        border-radius: 50%;</span></span><br><span class="line"><span class="undefined">        margin-top: 10px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通过钩子函数来实现动画就不再是通过设置样式来实现动画效果，而是通过js来设置样式来实现动画效果 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 也是分为几个阶段，主要是两部分，一是进场动画，一是离场动画 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 进场动画又分为 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 进场前：主要是通过设置style来设置起始时的样式位置之类的 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 进场时：主要通过设置style来设置动画结束时的位置，以及动画属性的设置如动画时常 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 进场后：动画完成后所执行的东西 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 其实钩子函数的原理还是对单元素的过渡做了封装，只不过是可以通过js来控制只进行进场动画或者只进行离场动画 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"flag=!flag"</span>&gt;</span>单击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transition</span> <span class="attr">v-on:before-enter</span>=<span class="string">"beforeEnter"</span> <span class="attr">v-on:enter</span>=<span class="string">"enter"</span> <span class="attr">v-on:after-enter</span>=<span class="string">"afterEnter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">"flag"</span> <span class="attr">class</span>=<span class="string">"ball"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./../../js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">            data() &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                    flag: <span class="literal">false</span>,</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            methods: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 所有的钩子函数都必须传一个el参数，表示操作的原生dom对象</span></span></span><br><span class="line"><span class="undefined">                beforeEnter(el) &#123;</span></span><br><span class="line"><span class="javascript">                    el.style.transform = <span class="string">"translate(0,0)"</span>;</span></span><br><span class="line"><span class="undefined">                &#125;,</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">                enter(el, done) &#123; <span class="comment">//在单纯的使用js钩子函数设置动画时必须传一个done参数来执行完成后的操作，这个done实际上是after-enter所绑定的方法</span></span></span><br><span class="line"><span class="javascript">                    el.offsetWidth; <span class="comment">//这个必须加，不加出bug，没有为什么</span></span></span><br><span class="line"><span class="javascript">                    el.style.transform = <span class="string">"translate(40px,100px)"</span>;</span></span><br><span class="line"><span class="javascript">                    el.style.transition = <span class="string">"all 1s ease"</span>;</span></span><br><span class="line"><span class="undefined">                    done();</span></span><br><span class="line"><span class="undefined">                &#125;,</span></span><br><span class="line"><span class="undefined">                afterEnter(el) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 这里因为只需要重复这个半场动画，这个从隐藏到出现从上到下的过程，所以将元素设置为不显示，下次再单击的时候就又是执行的是从上到下的动画了</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">this</span>.flag = !<span class="keyword">this</span>.flag;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="列表动画"><a href="#列表动画" class="headerlink" title="列表动画"></a>列表动画</h3><p>在前面的所有例子都是设置的单元素动画，不能用于设置列表中的动画，但我们需要设置一个列表动画，让其中的所有元素都有动画效果的时候，我们就可以使用<code>transition-group</code>这个标签来包裹我们想要设置动画的列表。<br>就像下面这个例子这样：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    span &#123;</span></span><br><span class="line"><span class="undefined">        margin: 5px;</span></span><br><span class="line"><span class="css">        <span class="comment">/* 这里要注意一件事情，必须设置为inline-block,不然元素不会从下面出来，或者使用弹性布局也可以 */</span></span></span><br><span class="line"><span class="undefined">        display: inline-block;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.v-enter-active</span>,</span></span><br><span class="line"><span class="css">    <span class="selector-class">.v-leave-active</span> &#123;</span></span><br><span class="line"><span class="undefined">        opacity: 1;</span></span><br><span class="line"><span class="undefined">        transition: all 1s ease;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.v-enter</span>,</span></span><br><span class="line"><span class="css">    <span class="selector-class">.v-leave-to</span> &#123;</span></span><br><span class="line"><span class="undefined">        transform: translateY(30px);</span></span><br><span class="line"><span class="undefined">        opacity: 0;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="comment">/* 要实现其他元素位移时有动画必须添加下面这个类，并且设置动画 */</span></span></span><br><span class="line"><span class="css">    <span class="selector-class">.v-move</span> &#123;</span></span><br><span class="line"><span class="undefined">        transition: all 1s ease;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="comment">/* 而且还必须单独给v-leave-active这个类设置绝对定位才可以实现效果 */</span></span></span><br><span class="line"><span class="css">    <span class="selector-class">.v-leave-active</span> &#123;</span></span><br><span class="line"><span class="undefined">        position: absolute;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">style</span>=<span class="string">"margin-left: 10px"</span> @<span class="attr">click</span>=<span class="string">"addnum"</span>&gt;</span>add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">style</span>=<span class="string">"margin-left: 10px"</span> @<span class="attr">click</span>=<span class="string">"delnum"</span>&gt;</span>del<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transition-group</span> <span class="attr">tag</span>=<span class="string">"div"</span> <span class="attr">:style</span>=<span class="string">"&#123;margin:'10px'&#125;"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 如果要让原来元素再插入的过程中保持位置不变，就需要设置key --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in list"</span> <span class="attr">:key</span>=<span class="string">"item"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./../../js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">            data() &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="undefined">                    list: [1, 2, 3, 4, 5, 6, 7, 8, 9],</span></span><br><span class="line"><span class="undefined">                    num: 10,</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            methods: &#123;</span></span><br><span class="line"><span class="undefined">                randomIndex() &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// Math.floor()的作用是返回一个小于等于参数的整数</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="keyword">this</span>.list.length)</span></span><br><span class="line"><span class="undefined">                &#125;,</span></span><br><span class="line"><span class="undefined">                addnum() &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// splice方法还可以用来在指定位置添加元素，第三个参数就是要添加的元素</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">this</span>.list.splice(<span class="keyword">this</span>.randomIndex(), <span class="number">0</span>, <span class="keyword">this</span>.num++)</span></span><br><span class="line"><span class="undefined">                &#125;,</span></span><br><span class="line"><span class="undefined">                delnum() &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">this</span>.list.splice(<span class="keyword">this</span>.randomIndex(), <span class="number">1</span>)</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p><ul><li>这里要注意的几件事是：<ul><li>如果要使动画生效，必须将要设置动画的元素设置为块级元素或者行内块级元素，如果是行内元素则不会有动画效果。</li><li>如果要使其他元素在发生位置移动也拥有动画过渡的效果这需要添加一个<code>v-move</code>这个类，当然，这个名称也是一样可以修改的，然后在这个类中设置动画过渡效果，像上面的这个例子这样。</li><li>但是其实只<code>v-move</code>这个类其实是还不够的，还需要在<code>v-leave-active</code>中设置绝对定位，这里要注意的一件事情是，这里必须单独只给这一个类设置，否则也不会有动画效果，一开始的时候我贪图方便就直接在设置active这组动画的时候设置上绝对定位，也就是给两个类都加上了绝对定位，结果发现这样并没有效果，只有单独给一个类设置的时候才有效果。</li></ul></li></ul><h3 id="追加，使用第三方库的动画"><a href="#追加，使用第三方库的动画" class="headerlink" title="追加，使用第三方库的动画"></a>追加，使用第三方库的动画</h3><p>在最刚开始的时候我认为在vue中给元素添加动画必须要用到vue中提供的控制动画的那几个类或者是钩子函数来实现动画，因为刚接触vue，不是特别熟悉，所以我认为如果要使用第三方的库来给元素添加动画的话应该是通过通过钩子函数来直接控制，但是今天看到了一个别人的用法，有一种恍然大悟的感觉，其实可以直接通过下面的这种方式来设置：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"flag=!flag"</span>&gt;</span>单击切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transition</span> <span class="attr">appear</span> <span class="attr">:duration</span>=<span class="string">"&#123; enter: 2000, leave: 1000 &#125;"</span> <span class="attr">enter-active-class</span>=<span class="string">"bounceInLeft"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">leave-active-class</span>=<span class="string">"bounceOutRight"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"animated "</span> <span class="attr">v-show</span>=<span class="string">"flag"</span>&gt;</span>这是一段测试文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./../../js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">            data() &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                    flag: <span class="literal">true</span>,</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            methods: &#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p><blockquote><p>直接通过设置两个<code>active</code>类就可以实现动画的效果了，一个是进场动画，一个是离场动画，可以通过<code>:duration=&quot;2000&quot;</code>来设置动画的时间，可以像这样直接只传一个时间来设置两个动画的时间，也可以像上面的例子一样通过一个对象来设置两个动画的不同时间。</p></blockquote><p>而在此之前我都是想通过钩子函数来给元素添加类来实现动画的效果，很显然不如上面的这种方式方便，当时在遇到比较复杂的情况的时候还是要使用钩子函数。不得不说vue真是一款很好的框架！</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>要熟练设置vue中的动画就必须要理解vue中动画的运作机制，理解进场和离场这两个过程，然后可以通过设置两组类来设置动画的效果，当这种方法无法满足需求的时候就可以通过钩子函数来满足我们的需求。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;一开始在使用vue中的动画的时候我没有太明白究竟是个怎么样的机制，以及如何高度的定义一些动画，经过我的尝试，现在终于算是弄明白时怎么一回事了&lt;a href=&quot;https://cn.vuejs.org/v2/guide/transitions.html#CSS-%E5%8A%A8%E7%94%BB&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这里是官方文档&lt;/a&gt;。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue.js的学习（vue实例的生命周期）</title>
    <link href="https://q32757468.github.io/2019/06/18/vue-js%E7%9A%84%E5%AD%A6%E4%B9%A0%EF%BC%88vue%E5%AE%9E%E4%BE%8B%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%EF%BC%89/"/>
    <id>https://q32757468.github.io/2019/06/18/vue-js的学习（vue实例的生命周期）/</id>
    <published>2019-06-18T10:17:08.000Z</published>
    <updated>2019-06-18T10:26:43.210Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过学习了解vue实例的生命周期对vue的学习十分的有帮助，所以这次来了解学习以下vue中vue实例的生命周期。<br><a id="more"></a></p></blockquote><ul><li>什么是生命周期：从Vue实例创建、运行、到销毁期间，总是伴随着各种各样的事件，这些事件，统称为生命周期！</li><li><a href="https://cn.vuejs.org/v2/api/#选项-生命周期钩子" target="_blank" rel="noopener">生命周期钩子</a>：就是生命周期事件的别名而已；</li><li>生命周期钩子 = 生命周期函数 = 生命周期事件</li><li>主要的生命周期函数分类：<ul><li>创建期间的生命周期函数：<ul><li>beforeCreate：实例刚在内存中被创建出来，此时，还没有初始化好 data 和 methods 属性</li><li>created：实例已经在内存中创建OK，此时 data 和 methods 已经创建OK，此时还没有开始 编译模板</li><li>beforeMount：此时已经完成了模板的编译，但是还没有挂载到页面中</li><li>mounted：此时，已经将编译好的模板，挂载到了页面指定的容器中显示</li></ul></li><li>运行期间的生命周期函数：<ul><li>beforeUpdate：状态更新之前执行此函数， 此时 data 中的状态值是最新的，但是界面上显示的 数据还是旧的，因为此时还没有开始重新渲染DOM节点</li><li>updated：实例更新完毕之后调用此函数，此时 data 中的状态值 和 界面上显示的数据，都已经完成了更新，界面已经被重新渲染好了！</li></ul></li><li>销毁期间的生命周期函数：<ul><li>beforeDestroy：实例销毁之前调用。在这一步，实例仍然完全可用。</li><li>destroyed：Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。</li></ul></li></ul></li></ul><p>可以通过这张图来形象的了解以下生命周期的含义：<br><img src="http://m.qpic.cn/psb?/V131x4904WMIoW/EYaNPTHs3lpnpvXBr.oeMlvn097Pjgbjp37EqCZYl8k!/b/dLgAAAAAAAAA&bo=OAS5BAAAAAADB6M!&rf=viewer_4"></p><p>这次的vue的生命周期的学习就到这里了，通过这张图可以有比较完整的了解。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;通过学习了解vue实例的生命周期对vue的学习十分的有帮助，所以这次来了解学习以下vue中vue实例的生命周期。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue.js的学习（自定义指令）</title>
    <link href="https://q32757468.github.io/2019/06/18/vue-js%E7%9A%84%E5%AD%A6%E4%B9%A0%EF%BC%88%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4%EF%BC%89/"/>
    <id>https://q32757468.github.io/2019/06/18/vue-js的学习（自定义指令）/</id>
    <published>2019-06-18T01:59:41.000Z</published>
    <updated>2019-06-18T02:45:16.130Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在vue中很多时候现有的指令都是不够我们用的，那么vue中是允许我们自定义指令的，那么我们就可以通过自定义指令来实现我们想要的功能。通过 directive 来定义。<br><a id="more"></a></p></blockquote><h3 id="一个简单的例子"><a href="#一个简单的例子" class="headerlink" title="一个简单的例子"></a>一个简单的例子</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>  <span class="attr">v-focus</span>=<span class="string">'1+1'</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./../../js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        Vue.directive(<span class="string">'focus'</span>,&#123;</span></span><br><span class="line"><span class="javascript">            inserted:<span class="function"><span class="keyword">function</span>(<span class="params">el,binding</span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">                el.focus();</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(binding.name);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(binding.value);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(binding.expression);                </span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">        data() &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="undefined">                </span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        methods: &#123;</span></span><br><span class="line"><span class="undefined">            </span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看出这样就通过定义了一个全局指令来使一个文本框自动获得了焦点。</p><h3 id="定义全局指令"><a href="#定义全局指令" class="headerlink" title="定义全局指令"></a>定义全局指令</h3><p>上面的例子就是定义的一个全局指令</p><p>###定义局部指令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">directives: &#123;</span><br><span class="line">  focus: &#123;</span><br><span class="line">    // 指令的定义</span><br><span class="line">    inserted: function (el) &#123;</span><br><span class="line">      el.focus()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>像这样就可以定义一个局部指令，局部指令是通过一个对象来定义。，并且名称后面带有s。</p><h3 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h3><p>在上面的例子中以下代码就是用的<code>inserted</code>这个钩子函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inserted:function(el,binding)&#123;</span><br></pre></td></tr></table></figure></p><p>钩子函数的类别：</p><ul><li>bind：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。<br>这是在dom树还没有渲染到页面中之前，还在内存中的时候会调用，那么对于大部分js中的行为来说肯定是不会生效的，但对于比如像设置样式这种一直存在的东西来说，渲染到页面之后也还会有效</li></ul><ul><li>inserted：被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)。<br>当dom元素被插入到页面时触发，对于js中的行为也能触发</li></ul><ul><li><p>update：所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新 (详细的钩子函数参数见下)。</p></li><li><p>componentUpdated：指令所在组件的 VNode 及其子 VNode 全部更新后调用。</p></li><li><p>unbind：只调用一次，指令与元素解绑时调用。</p></li></ul><h3 id="钩子函数的参数"><a href="#钩子函数的参数" class="headerlink" title="钩子函数的参数"></a>钩子函数的参数</h3><ul><li>el：指令所绑定的元素，可以用来直接操作 DOM 。</li></ul><ul><li>binding：一个对象，包含以下属性：<br>  -name：指令名，不包括 v- 前缀。<br>  -value：指令的绑定值，例如：v-my-directive=”1 + 1” 中，绑定值为 2。<br>  -oldValue：指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用。无论值是否改变都可用。<br>  -expression：字符串形式的指令表达式。例如 v-my-directive=”1 + 1” 中，表达式为 “1 + 1”。<br>  -arg：传给指令的参数，可选。例如 v-my-directive:foo 中，参数为 “foo”。<br>  -modifiers：一个包含修饰符的对象。例如：v-my-directive.foo.bar 中，修饰符对象为 { foo: true, bar: true }。</li><li>vnode：Vue 编译生成的虚拟节点。移步 VNode API 来了解更多详情。</li><li>oldVnode：上一个虚拟节点，仅在 update 和 componentUpdated 钩子中可用。</li></ul><p>在上面的例子中就演示了这些参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Vue.directive(&apos;focus&apos;,&#123;</span><br><span class="line">    inserted:function(el,binding)&#123;</span><br><span class="line">        el.focus();</span><br><span class="line">        console.log(binding.name); //focus</span><br><span class="line">        console.log(binding.value);//2</span><br><span class="line">        console.log(binding.expression);//1+1                </span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在vue中很多时候现有的指令都是不够我们用的，那么vue中是允许我们自定义指令的，那么我们就可以通过自定义指令来实现我们想要的功能。通过 directive 来定义。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue.js的学习（按键修饰符及自定义按键修饰符）</title>
    <link href="https://q32757468.github.io/2019/06/18/vue%E4%B8%AD%E7%9A%84%E9%94%AE%E7%9B%98%E4%BF%AE%E9%A5%B0%E7%AC%A6%E4%BB%A5%E5%8F%8A%E8%87%AA%E5%AE%9A%E4%B9%89%E9%94%AE%E7%9B%98%E4%BF%AE%E9%A5%B0%E7%AC%A6/"/>
    <id>https://q32757468.github.io/2019/06/18/vue中的键盘修饰符以及自定义键盘修饰符/</id>
    <published>2019-06-18T01:13:28.000Z</published>
    <updated>2019-06-18T01:59:13.809Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在vue中可以通过键盘修饰符来控制元素在按下相应按键时的动作。vue中提供了部分内置的键盘修饰符按键码的别名，但是不是很多，那么在vue中也是可以自定义的。<br><a id="more"></a></p></blockquote><h3 id="案件修饰符的使用"><a href="#案件修饰符的使用" class="headerlink" title="案件修饰符的使用"></a>案件修饰符的使用</h3><p>在监听键盘事件时，我们经常需要检查详细的按键。Vue 允许为 v-on 在监听键盘事件时添加按键修饰符：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input v-on:keyup.enter=&quot;test()&quot;&gt;</span><br></pre></td></tr></table></figure></p><h3 id="可以通过按键码来实现"><a href="#可以通过按键码来实现" class="headerlink" title="可以通过按键码来实现"></a>可以通过按键码来实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input v-on:keyup.13=&quot;test()&quot;&gt;</span><br></pre></td></tr></table></figure><p>enter键的按键码就是13，所以等同于上面那个例子。</p><h3 id="vue中自带的别名"><a href="#vue中自带的别名" class="headerlink" title="vue中自带的别名"></a>vue中自带的别名</h3><ul><li>.enter</li><li>.tab</li><li>.delete (捕获“删除”和“退格”键)</li><li>.esc</li><li>.space</li><li>.up</li><li>.down</li><li>.left</li><li>.right</li></ul><h3 id="自定义案件修饰符"><a href="#自定义案件修饰符" class="headerlink" title="自定义案件修饰符"></a>自定义案件修饰符</h3><p>可以通过这样的方式来自定义按键修饰符：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Vue.config.keyCodes.f2 = 113;</span><br></pre></td></tr></table></figure></p><p>然后就可以通过按下f2来触发了。</p><h3 id="系统修饰符"><a href="#系统修饰符" class="headerlink" title="系统修饰符"></a>系统修饰符</h3><ul><li>.ctrl</li><li>.alt</li><li>.shift</li><li>.meta</li></ul><p>通过系统修饰符可以控制系统按键与其他事件的组合：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; @keyup.13.ctrl=&quot;test()&quot; &gt;</span><br></pre></td></tr></table></figure></p><p>以上代码就需要同时按回车以及control键才能触发。</p><h3 id="鼠标按钮修饰符"><a href="#鼠标按钮修饰符" class="headerlink" title="鼠标按钮修饰符"></a>鼠标按钮修饰符</h3><p>2.2.0 新增</p><ul><li>.left</li><li>.right</li><li>.middle</li></ul><p>像是这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; @click.left=&quot;test()&quot; &gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在vue中可以通过键盘修饰符来控制元素在按下相应按键时的动作。vue中提供了部分内置的键盘修饰符按键码的别名，但是不是很多，那么在vue中也是可以自定义的。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue.js的学习（七）过滤器filter的使用</title>
    <link href="https://q32757468.github.io/2019/06/17/vue-js%E7%9A%84%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%83%EF%BC%89%E8%BF%87%E6%BB%A4%E5%99%A8filter%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://q32757468.github.io/2019/06/17/vue-js的学习（七）过滤器filter的使用/</id>
    <published>2019-06-17T12:46:29.000Z</published>
    <updated>2019-06-18T01:11:59.720Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filter过滤器可以用来格式化数据，只能用在插值表达式或者v-model之类的组件上面。分为全局过滤器和私有过滤器，在定义的方法上稍有区别。<br><a id="more"></a></p></blockquote><h3 id="定义全局过滤器"><a href="#定义全局过滤器" class="headerlink" title="定义全局过滤器"></a>定义全局过滤器</h3><p>Vue.js 允许你自定义过滤器，可被用于一些常见的文本格式化。过滤器可以用在两个地方：双花括号插值和 v-bind 表达式 (后者从 2.1.0+ 开始支持)。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符号指示：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.time | dateformat&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Vue.filter(<span class="string">'dateformat'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">date</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> dt=<span class="keyword">new</span> <span class="built_in">Date</span>(date);</span><br><span class="line">            <span class="keyword">var</span> y=dt.getFullYear();</span><br><span class="line">            <span class="keyword">var</span> m=dt.getMonth()+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">var</span> d=dt.getDate();</span><br><span class="line">            <span class="keyword">var</span> h=dt.getHours();</span><br><span class="line">            <span class="keyword">var</span> min=dt.getMinutes();</span><br><span class="line">            <span class="keyword">var</span> s=dt.getSeconds();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;y&#125;</span>-<span class="subst">$&#123;m&#125;</span>-<span class="subst">$&#123;d&#125;</span> <span class="subst">$&#123;h&#125;</span>:<span class="subst">$&#123;min&#125;</span>:<span class="subst">$&#123;s&#125;</span>`</span>;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>过滤器可以串联：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; message | filterA | filterB &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>在这个例子中，filterA 被定义为接收单个参数的过滤器函数，表达式 message 的值将作为参数传入到函数中。然后继续调用同样被定义为接收单个参数的过滤器函数 filterB，将 filterA 的结果传递到 filterB 中。</p><p>过滤器是 JavaScript 函数，因此可以接收参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;td&gt;&#123;&#123;item.time | dateformat(&apos;yyyy-mm-dd&apos;)&#125;&#125;&lt;/td&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Vue.filter(<span class="string">'dateformat'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">date,agr=<span class="string">''</span></span>)</span>&#123;<span class="comment">//最好给参数设置一个默认值，防止出现bug</span></span><br><span class="line">           <span class="keyword">var</span> dt=<span class="keyword">new</span> <span class="built_in">Date</span>(date);</span><br><span class="line">           <span class="keyword">var</span> y=dt.getFullYear();</span><br><span class="line">           <span class="keyword">var</span> m=dt.getMonth()+<span class="number">1</span>;</span><br><span class="line">           <span class="keyword">var</span> d=dt.getDate();</span><br><span class="line">           <span class="keyword">var</span> h=dt.getHours();</span><br><span class="line">           <span class="keyword">var</span> min=dt.getMinutes();</span><br><span class="line">           <span class="keyword">var</span> s=dt.getSeconds();</span><br><span class="line">           <span class="keyword">if</span>(agr==<span class="string">'yyyy-mm-dd'</span>)&#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;y&#125;</span>-<span class="subst">$&#123;m&#125;</span>-<span class="subst">$&#123;d&#125;</span>`</span>; </span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">else</span></span><br><span class="line">           <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;y&#125;</span>-<span class="subst">$&#123;m&#125;</span>-<span class="subst">$&#123;d&#125;</span> <span class="subst">$&#123;h&#125;</span>:<span class="subst">$&#123;min&#125;</span>:<span class="subst">$&#123;s&#125;</span>`</span>;</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure><h3 id="定义私有过滤器"><a href="#定义私有过滤器" class="headerlink" title="定义私有过滤器"></a>定义私有过滤器</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">filters:&#123;</span><br><span class="line">    dateformat(date,agr=<span class="string">''</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> y=dt.getFullYear();</span><br><span class="line">        <span class="keyword">var</span> m=(dt.getMonth()+<span class="number">1</span>).toString().padStart(<span class="number">2</span>,<span class="string">'0'</span>);</span><br><span class="line">        <span class="keyword">var</span> d=dt.getDate().toString().padStart(<span class="number">2</span>,<span class="string">'0'</span>);</span><br><span class="line">        <span class="keyword">var</span> h=dt.getHours().toString().padStart(<span class="number">2</span>,<span class="string">'0'</span>);</span><br><span class="line">        <span class="keyword">var</span> min=dt.getMinutes().toString().padStart(<span class="number">2</span>,<span class="string">'0'</span>);</span><br><span class="line">        <span class="keyword">var</span> s=dt.getSeconds().toString().padStart(<span class="number">2</span>,<span class="string">'0'</span>);</span><br><span class="line">        <span class="keyword">if</span>(agr==<span class="string">'yyyy-mm-dd'</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;y&#125;</span>-<span class="subst">$&#123;m&#125;</span>-<span class="subst">$&#123;d&#125;</span>`</span>; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;y&#125;</span>-<span class="subst">$&#123;m&#125;</span>-<span class="subst">$&#123;d&#125;</span> <span class="subst">$&#123;h&#125;</span>:<span class="subst">$&#123;min&#125;</span>:<span class="subst">$&#123;s&#125;</span>`</span>;                    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>通过一个对象来设置，整体与全局设置的方法差不多。</p><h3 id="学习到的一些知识"><a href="#学习到的一些知识" class="headerlink" title="学习到的一些知识"></a>学习到的一些知识</h3><ul><li>可以通过<code>`${y}-${m}-${d} ${h}:${min}:${s}`</code>像这样的方式来格式化数据，<code>${}</code>为占位符。</li></ul><ul><li>可以通过padStart(len, str)与padEnd(len, str)这两个方法来补全字符串，但是要注意只能补全字符串，所以通常需要先通过tostring()方法转化为字符串<ul><li>根据给定长度自动在字符串的前面补充想补充的字符串（只返回修改后的字符串，不修改原字符串）</li><li>len 给定的长度，转换后</li><li>str 想补充的字符串<br>类似这样：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var s=dt.getSeconds().toString().padStart(2,&apos;0&apos;);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过定义filter可以很方便的来格式化数据，这里还有一个小细节，就是带s的就是私有的，不带s的就是全局的。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;filter过滤器可以用来格式化数据，只能用在插值表达式或者v-model之类的组件上面。分为全局过滤器和私有过滤器，在定义的方法上稍有区别。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>通过vue来做一个可以简单操作的页面</title>
    <link href="https://q32757468.github.io/2019/06/17/%E9%80%9A%E8%BF%87vue%E6%9D%A5%E5%81%9A%E4%B8%80%E4%B8%AA%E5%8F%AF%E4%BB%A5%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C%E7%9A%84%E9%A1%B5%E9%9D%A2/"/>
    <id>https://q32757468.github.io/2019/06/17/通过vue来做一个可以简单操作的页面/</id>
    <published>2019-06-17T08:42:47.000Z</published>
    <updated>2019-06-17T12:24:41.554Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;经过学习了vue的一些简单基本的东西，现在讲前面学过的这些东西简单的引用一下，做一个可以简单操作页面元素的页面，同时来熟悉vue的操作。<br><a id="more"></a></p></blockquote><h3 id="代码和效果图"><a href="#代码和效果图" class="headerlink" title="代码和效果图"></a>代码和效果图</h3><p>html:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-header"</span>&gt;</span></span><br><span class="line">                    相关操作</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-body"</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 给表单添加v-model来实现数据的双向绑定 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form-inline"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>id：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control mr-md-2 "</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">v-model</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>name：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">v-model</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary ml-md-1 mr-md-3"</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">'add'</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 实现搜索功能 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>输入关键字进行搜索：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-light mt-5 table-bordered table-striped"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">thead</span> <span class="attr">class</span>=<span class="string">"thead-light"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Id<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Time<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">th</span>&gt;</span>opration<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 通过v-for的循环来将我们的数据来渲染到页面中 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">"(item) in info"</span> <span class="attr">:key</span>=<span class="string">"item.id"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.id&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.time&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> @<span class="attr">click.prevent</span>=<span class="string">'rm(item.id)'</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>js:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            id: <span class="string">''</span>,</span><br><span class="line">            name: <span class="string">''</span>,</span><br><span class="line">            time: <span class="string">''</span>,</span><br><span class="line">            keywords:<span class="string">''</span>,</span><br><span class="line">            <span class="comment">// 将我们页面中的数据放在这俩面</span></span><br><span class="line">            info: [&#123;</span><br><span class="line">                    id: <span class="string">'1'</span>,</span><br><span class="line">                    name: <span class="string">'aaa'</span>,</span><br><span class="line">                    time: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    id: <span class="string">'2'</span>,</span><br><span class="line">                    name: <span class="string">'bbb'</span>,</span><br><span class="line">                    time: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">                &#125;,</span><br><span class="line">            ],</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        <span class="comment">// 通过自己构建函数来控制添加和删除</span></span><br><span class="line">        add() &#123;<span class="comment">//这是添加的函数</span></span><br><span class="line">            <span class="keyword">this</span>.info.push(&#123;</span><br><span class="line">                id: <span class="keyword">this</span>.id,</span><br><span class="line">                name: <span class="keyword">this</span>.name,</span><br><span class="line">                time: <span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">this</span>.id = <span class="keyword">this</span>.name = <span class="string">''</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        rm(id) &#123;<span class="comment">//这是删除的函数，我用了两种写法</span></span><br><span class="line">            <span class="comment">// this.info.forEach((item,index) =&gt; &#123;</span></span><br><span class="line">            <span class="comment">//     if(id=item.id)&#123;</span></span><br><span class="line">            <span class="comment">//         this.info.splice(index,1)</span></span><br><span class="line">            <span class="comment">//         return ;</span></span><br><span class="line">            <span class="comment">//     &#125;                  </span></span><br><span class="line">            <span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 这一种代码会更简便一些</span></span><br><span class="line">            <span class="keyword">this</span>.info.splice(<span class="keyword">this</span>.info.findIndex(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> item.id == id;</span><br><span class="line">            &#125;), <span class="number">1</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        searchList(keywords)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.info.filter(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> item.name.includes(keywords);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>最后的效果图：<br><img src="http://m.qpic.cn/psb?/V131x4904WMIoW/oTLF7.aDPoIaR6KZSqfT7Y7ICMF43yoVYspA5rV52MM!/b/dL4AAAAAAAAA&bo=CgW3AQAAAAADB5s!&rf=viewer_4"></p><p>通过页面上的增加和删除就可以实现页面的修改</p><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>在vue中更看重于业务逻辑，所以很多方面的工作我们不需要去关心，也不需要去操作dom对象就可以轻松的修改页面上的内容</p><ul><li><p>我们通过<code>v-for</code>的循环将我们的数据渲染到页面中</p></li><li><p>我们通过<code>v-model</code>数据双向绑定来将用户在页面中输入的数据放到我们存放数据的地方，因为vue的特性，只要数据有更新，那么页面就会跟着一起更新，这是十分方便的一件事情</p></li><li><p>再通过数组的一些操作方法将我们想要删除的数据进行删除，那么页面中相应的内容也会被删除。</p></li><li><p>搜索功能是通过<code>v-model</code>数据的双向绑定来拿到用户需要搜索的数据，然后通过filter()这个方法来设置条件进行过滤，然后返回一个新的数组，过滤的条件可以通过inclues来设置。</p></li></ul><h3 id="学习到的一些知识"><a href="#学习到的一些知识" class="headerlink" title="学习到的一些知识"></a>学习到的一些知识</h3><p>正如我上一篇博客介绍的那样，在特定的情况下使用filter之类的方法会更加的便捷，这次在写搜索的那个函数的时候我就用到了filter这个方法，使代码更加的精简，这里可以使用foreach，但这会有更加多的代码量，所以我没有这么做。</p><h3 id="我遇到的一些坑与问题"><a href="#我遇到的一些坑与问题" class="headerlink" title="我遇到的一些坑与问题"></a>我遇到的一些坑与问题</h3><ul><li><p>第一个花费时间比较久的地方是当我完成了数据的添加的这个功能之后发现了一个问题就是当我向页面中添加完数据之后，我再修改输入框中的数据，已经渲染在页面之中的数据也会跟着一起修改，很显然这不是我想要的效果，后面发现是我将一个带着变量的对象直接push到数组当中，而不是在单击事件的时候通过变量创建一个新的对象再push进去。<strong>也就是说应该需要一个中间的变量来将一个会实时变化的变量变成一个固定的变量。</strong></p></li><li><p>第二个问题就是在使用findIndex方法的时候将<code>return item.id == id</code>写成了<code>return item.id = id</code> 导致在操作的时候出现了问题</p></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这次写这些东西让我对vue有了更加清晰的概念，并且也用了一些以前没有用过的方法来使代码更加的简单，同时要记住写代码犯的一些错误，要记住在进行比较的时候判断是否相等要用<code>==</code>，千万不能永成赋值符号<code>=</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;经过学习了vue的一些简单基本的东西，现在讲前面学过的这些东西简单的引用一下，做一个可以简单操作页面元素的页面，同时来熟悉vue的操作。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>js中的some、find、findindex、includes、filter的使用</title>
    <link href="https://q32757468.github.io/2019/06/17/js%E4%B8%AD%E7%9A%84some%E3%80%81find%E3%80%81findindex%E3%80%81includes%E3%80%81filter%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://q32757468.github.io/2019/06/17/js中的some、find、findindex、includes、filter的使用/</id>
    <published>2019-06-17T02:55:46.000Z</published>
    <updated>2019-06-17T12:22:08.185Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最近在学习中学习到一些以前接触的比较少的一些方法，其中很多是es6新增的方法，这次就来对所有的这些方法来进行一个探究，看看这些方法究竟是什么作用。<br><a id="more"></a></p></blockquote><h3 id="类似于foreach的方法"><a href="#类似于foreach的方法" class="headerlink" title="类似于foreach的方法"></a>类似于foreach的方法</h3><p>为什么把这类方法归到一起讲，因为我在使用的过程中发现其实这些方法的用法和参数其实都是一样的，底层应该都是和foreach差不多，差别只是在于返回的东西不一样，那么再来看看这些方法的差别以及用法。</p><ul><li>语法</li></ul><p>array.方法名(function(currentValue, index, arr),thisValue)</p><ul><li>参数</li></ul><table class="tecspec">   <tbody><tr>    <th style="width:25%">参数</th>    <th>描述</th>  </tr>    <tr>    <td><em>function(currentValue, index,arr)</em></td>    <td>必需。数组每个元素需要执行的函数。<br>函数参数:<table class="tecspec">   <tbody><tr>    <th style="width:25%">参数</th>    <th>描述</th>  </tr>    <tr>    <td><em>currentValue</em></td>    <td>必需。当前元素</td>  </tr>  <tr>    <td><em>index</em></td>    <td>可选。当前元素的索引值</td>  </tr>    <tr>    <td><em>arr</em></td>    <td>可选。当前元素所属的数组对象</td>  </tr></tbody></table>   </td>  </tr>    <tr>    <td><em>thisValue</em></td>    <td>可选。 传递给函数的值一般用 "this" 值。<br>如果这个参数为空， "undefined" 会传递给 "this" 值</td>  </tr></tbody></table><p>以上是这些方法共同的基本的语法以及参数</p><p>那么再来看看这些方法的不同点</p><h4 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h4><p>forEach() 方法用于调用数组的每个元素，并将元素传递给回调函数。</p><p>注意: forEach() 对于空数组是不会执行回调函数的。</p><blockquote><p>也就是说 forEach() 这个方法是没有任何限制的，回调函数最终返回的值是完全由自己决定的，也就是说其实后面介绍到的所有的方法其实也都可以通过forEach()来实现相同的功能，只不过要自己写更多的代码量。<br>forEach()可以通过return来提前退出循环，同时返回相应的值</p></blockquote><h4 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h4><p>map() 方法返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。</p><p>map() 方法按照原始数组元素顺序依次处理元素。</p><p>注意： map() 不会对空数组进行检测。</p><p>注意： map() 不会改变原始数组。</p><blockquote><p>map和foreach很像，差别就在于map所得到的所有符合条件的结果都会通过一个数组来返回。在我们需要将结果放到一个数组中的时候直接使用map就会更加的方便。<br>在map()中return无论如何都会返回一个数组，可以通过return来对原数组进行操作返回一个新数组<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line">    <span class="built_in">console</span>.log(arr.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;     <span class="comment">//[[true, true, true, true, true, true, true, true, true]]</span></span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(arr.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> item*<span class="number">2</span>;     <span class="comment">//[2, 4, 6, 8, 10, 12, 14, 16, 18]</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="some"><a href="#some" class="headerlink" title="some()"></a>some()</h4><p>some() 方法用于检测数组中的元素是否满足指定条件（函数提供）。</p><p>some() 方法会依次执行数组的每个元素：</p><ul><li>如果有一个元素满足条件，则表达式返回true , 剩余的元素不会再执行检测。</li><li>如果没有满足条件的元素，则返回false。<br>注意： some() 不会对空数组进行检测。</li></ul><p>注意： some() 不会改变原始数组。</p><blockquote><p>也就是说some并不一定会遍历完数组中全部的元素，当遍历到由符合条件的元素时就会返回true并终止，否则返回false，所以也就可以通过利用此特性来对数组中特定一部分的元素进行操作。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.some(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 通过some可以对数组中符合要求的之前的元素进行操作</span></span><br><span class="line">            <span class="built_in">console</span>.log(item);</span><br><span class="line">            <span class="keyword">return</span> item &gt; <span class="number">5</span>;  <span class="comment">//可以通过return来设置返回值的条件</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><p><strong>还有一个相对的方法叫做  every() ,条件时数组中所有的元素都满足条件。</strong></p><h4 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h4><p>find() 方法返回通过测试（函数内判断）的数组的第一个元素的值。</p><p>find() 方法为数组中的每个元素都调用一次函数执行：</p><ul><li>当数组中的元素在测试条件时返回 true 时, find() 返回符合条件的元素，之后的值不会再调用执行函数。</li><li>如果没有符合条件的元素返回 undefined<br>注意: find() 对于空数组，函数是不会执行的。</li></ul><p>注意: find() 并没有改变数组的原始值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 通过find也可以对数组中符合要求的之前的元素进行操作</span></span><br><span class="line">    <span class="built_in">console</span>.log(item);</span><br><span class="line">    <span class="keyword">return</span> item&gt;<span class="number">5</span>;</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><h3 id="findIndex"><a href="#findIndex" class="headerlink" title="findIndex()"></a>findIndex()</h3><p>findIndex() 方法返回传入一个测试条件（函数）符合条件的数组第一个元素位置。</p><p>findIndex() 方法为数组中的每个元素都调用一次函数执行：</p><ul><li>当数组中的元素在测试条件时返回 true 时, findIndex() 返回符合条件的元素的索引位置，之后的值不会再调用执行函数。</li><li>如果没有符合条件的元素返回 -1<br>注意: findIndex() 对于空数组，函数是不会执行的。</li></ul><p>注意: findIndex() 并没有改变数组的原始值。</p><blockquote><p>与find方法类似，区别只在于这个方法返回的时元素在数组中的索引。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.findIndex(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item);</span><br><span class="line">    <span class="keyword">return</span> item&gt;<span class="number">5</span>;          </span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><h4 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h4><p>filter() 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。</p><p>注意： filter() 不会对空数组进行检测。</p><p>注意： filter() 不会改变原始数组。</p><blockquote><p>这个方法与map方法类似，map方法没有返回的条件，而这个方法可以直接通过rerun来设置过滤条件。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.filter(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> item &gt;<span class="number">2</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="includes"><a href="#includes" class="headerlink" title="includes()"></a>includes()</h3><p>这个方法是es6中新增的一个方法，可以用来判断一个数组或者是字符串中是否包含某一元素，如果是返回 true，否则false。</p><p><strong>语法</strong><br>arr.includes(searchElement)<br>arr.includes(searchElement, fromIndex)</p><p>参数<br>searchElement    必须。需要查找的元素值。<br>fromIndex        可选。从该索引处开始查找 searchElement。如果为负值，则按升序从 array.length + fromIndex 的索引开始搜索。默认为 0。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.includes(<span class="number">5</span>)); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>以前只是对这些方法有了解，但是了解的不是很多，也会使用foreach这样的方法，但是现在知道了这么多方法，就应该在适当的情况下用相应的方法来减少代码量和工作量。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;最近在学习中学习到一些以前接触的比较少的一些方法，其中很多是es6新增的方法，这次就来对所有的这些方法来进行一个探究，看看这些方法究竟是什么作用。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue.js的学习（六）v-if和v-show</title>
    <link href="https://q32757468.github.io/2019/06/16/vue-js%E7%9A%84%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%85%AD%EF%BC%89v-if%E5%92%8Cv-show/"/>
    <id>https://q32757468.github.io/2019/06/16/vue-js的学习（六）v-if和v-show/</id>
    <published>2019-06-16T09:19:12.000Z</published>
    <updated>2019-06-16T10:16:03.681Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这次来学习vue中隐藏元素的两种方法，一种是v-if，另一种是v-show，同时明白二者之间的区别，一件分别适用于哪种情况。<br><a id="more"></a></p></blockquote><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 通过两种方式都可以实现元素的隐藏，但是我们从控制台检查元素就可以看出二者之间的区别 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"flag=!flag"</span>&gt;</span>点击显示/不显示<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"flag"</span>&gt;</span></span><br><span class="line">            这是用v-if控制的元素</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">"flag"</span>&gt;</span></span><br><span class="line">            这是用v-show控制的元素</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./../../js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">            data() &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                    flag:<span class="literal">true</span>,</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            methods: &#123;</span></span><br><span class="line"><span class="undefined">                toggle ()&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">this</span>.flag=!<span class="keyword">this</span>.flag;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过以上代码，我们在页面中单击切换按钮就可以隐藏或者显示两个分别被<code>v-if</code>和<code>v-show</code>控制的元素。</p><h3 id="二者之间的区别"><a href="#二者之间的区别" class="headerlink" title="二者之间的区别"></a>二者之间的区别</h3><ul><li>通过检查元素我们可以清除的看到，当我们将元素进行隐藏的时候，<code>v-if</code>是将元素进行删除，而<code>v-show</code>是将元素的<code>display</code>设置为none，从而将元素隐藏。</li></ul><ul><li>那么我们什么时候用<code>v-if</code>什么时候用<code>v-show</code>呢<ul><li>因为<code>v-if</code>是将元素进行添加和删除，所以在进行这个过程的时候会比较消耗资源，所以不推荐在频繁要触发<code>v-if</code>的时候使用</li><li>而<code>v-show</code>是设置元素的display，那么无论元素一开始是否显示在页面上都需要创建元素，所以在渲染页面的时候会相较于<code>v-if</code>更加占用资源，所以不推荐在很少需要用到<code>v-show</code>来进行切换的时候使用。</li></ul></li></ul><h3 id="学到的一些新东西"><a href="#学到的一些新东西" class="headerlink" title="学到的一些新东西"></a>学到的一些新东西</h3><p>当我们需要频繁的在两种状态之间进行切换的时候我们可以使用下面这种方法来控制<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag:true,</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.flag=!this.flag;</span><br></pre></td></tr></table></figure><p>就不需要像以前的思路那样设置一个数字的循环，然后判断是否能被2整除来进行两种状态之间的切换。</p><p>当函数的代码连非常的小的时候我们就可以直接在调用的时候写，像下面这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=&quot;flag=!flag&quot;&gt;点击显示/不显示&lt;/button&gt;</span><br></pre></td></tr></table></figure></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>二者之间的区别在于渲染的方式不一样，在切换不频繁的情况下使用<code>v-if</code>，在切换频繁的情况下使用<code>v-show</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;这次来学习vue中隐藏元素的两种方法，一种是v-if，另一种是v-show，同时明白二者之间的区别，一件分别适用于哪种情况。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue.js的学习（五）v-for 和key</title>
    <link href="https://q32757468.github.io/2019/06/16/vue-js%E7%9A%84%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%94%EF%BC%89v-for/"/>
    <id>https://q32757468.github.io/2019/06/16/vue-js的学习（五）v-for/</id>
    <published>2019-06-16T07:39:18.000Z</published>
    <updated>2019-06-16T08:27:14.374Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这次学习一下vue中的循环v-for和key,以及通过他们来遍历数组以及遍历对象并且将他们渲染到页面中.<br><a id="more"></a></p></blockquote><h3 id="v-for的使用"><a href="#v-for的使用" class="headerlink" title="v-for的使用"></a>v-for的使用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 遍历数组 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in arr"</span>&gt;</span></span><br><span class="line">            数组中的值是:&#123;&#123;item&#125;&#125;---索引是:&#123;&#123;index&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 遍历对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"(item, key, index) in obj "</span>&gt;</span></span><br><span class="line">        &#123;&#123;key&#125;&#125;---&#123;&#123;item&#125;&#125;---索引是:&#123;&#123;index&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./../../js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">        data() &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="undefined">                arr:[1,2,3,4,5,6],</span></span><br><span class="line"><span class="undefined">                obj:&#123;</span></span><br><span class="line"><span class="javascript">                    name:<span class="string">'zs'</span>,</span></span><br><span class="line"><span class="undefined">                    age:18,</span></span><br><span class="line"><span class="javascript">                    gender:<span class="string">'男'</span></span></span><br><span class="line"><span class="undefined">                &#125;            </span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">      </span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>可以看出v-for的使用非常的简单</p></li><li><p>在遍历数组的时候传递两个参数，那么第一个参数就是数组里面的值，第二个参数就是索引</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;p v-for=&quot;(item, index) in arr&quot;&gt;</span><br><span class="line">            数组中的值是:&#123;&#123;item&#125;&#125;---索引是:&#123;&#123;index&#125;&#125;</span><br><span class="line">    &lt;/p&gt;</span><br></pre></td></tr></table></figure><ul><li>遍历对象的时候，传递两个参数，那么第一个参数是对象键值对中的值，第二个参数是对象中的键，如果有第三个参数那么第三个参数就是索引</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;p v-for=&quot;(item, key, index) in obj &quot;&gt;</span><br><span class="line">        &#123;&#123;key&#125;&#125;---&#123;&#123;item&#125;&#125;---索引是:&#123;&#123;index&#125;&#125;</span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></table></figure><h3 id="key的使用"><a href="#key的使用" class="headerlink" title="key的使用"></a>key的使用</h3><p>在遍历的时候可以不加<code>key</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p v-for=&quot;(item, index) in items&quot;&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure></p><p>也可以加<code>key</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p v-for=&quot;(item, index) in items&quot; :key=&quot;index&quot;&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure></p><p>那么二者之间有什么区别呢，在我上面的例子中没有什么区别，</p><p><strong>具体的区别可以参考 <a href="https://www.jianshu.com/p/4bd5e745ce95" target="_blank" rel="noopener">这个帖子</a> 。解释的十分形象</strong></p><blockquote><p>注意：key最好是唯一标识符<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p v-for=&quot;(item, index) in items&quot; :key=&quot;index&quot;&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure></p></blockquote><p>并且最好不要像这样设置，因为在排序的时候索引也是跟着一起在变化的，那像这样设置了基本上也等于没设置。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;这次学习一下vue中的循环v-for和key,以及通过他们来遍历数组以及遍历对象并且将他们渲染到页面中.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue.js的学习（四）添加样式</title>
    <link href="https://q32757468.github.io/2019/06/16/vue-js%E7%9A%84%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89%E6%B7%BB%E5%8A%A0%E6%A0%B7%E5%BC%8F/"/>
    <id>https://q32757468.github.io/2019/06/16/vue-js的学习（四）添加样式/</id>
    <published>2019-06-16T07:01:03.000Z</published>
    <updated>2019-06-16T07:31:21.109Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这次学习了通过vue来给元素添加样式,前面我们已经学习过了给元素绑定属性,我们就可以通过这种方法来给元素添加样式.主要通过两种方法,一种是给元素绑定class,一种是给元素绑定style.<br><a id="more"></a></p></blockquote><p>先看页面代码:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.big</span>&#123;</span></span><br><span class="line"><span class="undefined">    font-size: 40px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.color</span>&#123;</span></span><br><span class="line"><span class="undefined">    color: red;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.thin</span>&#123;</span></span><br><span class="line"><span class="undefined">    font-weight: 200;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 第一种添加样式类 ,注意要加引号--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">"['big','thin']"</span>&gt;</span>这是一段测试文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 第二种 数组中嵌套对象，通过对象来控制是否引用相应的类   ,在对象中可以省略引号，除非有 -   --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">"['big',&#123;thin:true,color:flag&#125;]"</span>&gt;</span>这是一段测试文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 第三种，直接使用对象 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">"&#123;thin:true,big:flag&#125;"</span>&gt;</span>这是一段测试文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 也可以直接在变量中写对象,直接调用变量 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">"mclass"</span>&gt;</span>这是一段测试文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 通过绑定style来添加样式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">:style</span>=<span class="string">"&#123;color:'red','font-size':'40px'&#125;"</span>&gt;</span>这是一段测试文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">:style</span>=<span class="string">"mstyle"</span>&gt;</span>这是一段测试文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">:style</span>=<span class="string">"[mstyle,mstyle2]"</span>&gt;</span>这是一段测试文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./../../js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">        data:&#123;</span></span><br><span class="line"><span class="javascript">            flag:<span class="literal">true</span>,</span></span><br><span class="line"><span class="undefined">            mclass:&#123;</span></span><br><span class="line"><span class="javascript">                thin:<span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">                color:<span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">                big:<span class="literal">true</span>,</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            mstyle:&#123;</span></span><br><span class="line"><span class="javascript">                color:<span class="string">'red'</span>,</span></span><br><span class="line"><span class="javascript">                <span class="string">'font-size'</span>:<span class="string">'40px'</span>,</span></span><br><span class="line"><span class="javascript">                <span class="string">'font-weight'</span>:<span class="number">200</span>,</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        methods: &#123;        </span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">    &#125;)     </span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="绑定class来添加样式"><a href="#绑定class来添加样式" class="headerlink" title="绑定class来添加样式"></a>绑定class来添加样式</h3><h4 id="通过数组"><a href="#通过数组" class="headerlink" title="通过数组"></a>通过数组</h4><p>通过给元素绑定class来添加样式:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p :class=&quot;[&apos;big&apos;,&apos;thin&apos;]&quot;&gt;这是一段测试文字&lt;/p&gt;</span><br></pre></td></tr></table></figure></p><p>给通过给class绑定一个数组来添加class样式</p><blockquote><p>注意,数组里面的元素都需要加上引号</p></blockquote><h4 id="通过数组中嵌套对象"><a href="#通过数组中嵌套对象" class="headerlink" title="通过数组中嵌套对象"></a>通过数组中嵌套对象</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p :class=&quot;[&apos;big&apos;,&#123;thin:true,color:flag&#125;]&quot;&gt;这是一段测试文字&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>通过对象来添加class需要通过<code>true</code>或者是<code>false</code>来控制是否绑定相应class类</p><blockquote><p>这里可以直接给<code>true</code>或者是<code>false</code>也可以通过变量来传递<code>true</code>或者是<code>false</code>,比如这里通过了一个变量<code>flag</code></p></blockquote><h4 id="通过对象"><a href="#通过对象" class="headerlink" title="通过对象"></a>通过对象</h4><p>既然可以通过数组中嵌套对象,那么就可以直接使用对象来绑定class<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p :class=&quot;&#123;thin:true,big:flag&#125;&quot;&gt;这是一段测试文字&lt;/p&gt;</span><br></pre></td></tr></table></figure></p><p>直接通过对象来绑定class也可以将对象设置在一个变量中,通过直接绑定这个变量也可以实现.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p :class=&quot;mclass&quot;&gt;这是一段测试文字&lt;/p&gt;</span><br></pre></td></tr></table></figure></p><blockquote><p>在对象中的键值对中的键可以加引号也可以不加引号,但是名字中有<code>-</code>就必须要加引号.</p></blockquote><h3 id="绑定style来添加样式"><a href="#绑定style来添加样式" class="headerlink" title="绑定style来添加样式"></a>绑定style来添加样式</h3><ul><li>通过对象来设置:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p :style=&quot;&#123;color:&apos;red&apos;,&apos;font-size&apos;:&apos;40px&apos;&#125;&quot;&gt;这是一段测试文字&lt;/p&gt;</span><br></pre></td></tr></table></figure><ul><li><p>将对象设置到变量通过变量来设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p :style=&quot;mstyle&quot;&gt;这是一段测试文字&lt;/p&gt;</span><br></pre></td></tr></table></figure></li><li><p>通过数组来同时设置多个变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p :style=&quot;[mstyle,mstyle2]&quot;&gt;这是一段测试文字&lt;/p&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="来看看设置之后的效果"><a href="#来看看设置之后的效果" class="headerlink" title="来看看设置之后的效果"></a>来看看设置之后的效果</h3><p><img src="http://m.qpic.cn/psb?/V131x4904WMIoW/yIavscNRQ9xSYRiKT2*Wtft3fQGq8zmitSDApwflzYk!/b/dL8AAAAAAAAA&bo=vQavAwAAAAADBzU!&rf=viewer_4"><br>可以看到全部都生效了</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>以上就是在vue中设置样式的一些方法</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;这次学习了通过vue来给元素添加样式,前面我们已经学习过了给元素绑定属性,我们就可以通过这种方法来给元素添加样式.主要通过两种方法,一种是给元素绑定class,一种是给元素绑定style.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue.js的学习（三）数据的双向绑定</title>
    <link href="https://q32757468.github.io/2019/06/16/vue-js%E7%9A%84%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89%E6%95%B0%E6%8D%AE%E7%9A%84%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A/"/>
    <id>https://q32757468.github.io/2019/06/16/vue-js的学习（三）数据的双向绑定/</id>
    <published>2019-06-16T05:14:24.000Z</published>
    <updated>2019-06-16T05:43:27.637Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这次来学习vue中的双向数据绑定的一种方法，使用v-model来进行数据的双向绑定，并通过其来实现一个超级简单的计算器。<br><a id="more"></a></p></blockquote><h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><p>通过v-model可以实现数据的双向绑定，我们前面学习过的v-text以及v-html都只能是实现数据的单项绑定，就是将M绑定到V，有时候需要实现数据的双向绑定，这个时候就需要用到v-model来实现，基本的用法：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"n1"</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><blockquote><p>指的注意的一件事情就是v-model只对表单有效，对其他元素无效，因为其他元素无法双向修改数据，只有表单可以做到用户可以修改其中的数据。</p></blockquote><h3 id="通过v-model来实现一个简单的计算器"><a href="#通过v-model来实现一个简单的计算器" class="headerlink" title="通过v-model来实现一个简单的计算器"></a>通过v-model来实现一个简单的计算器</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"n1"</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"sign"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"+"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"-"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"*"</span>&gt;</span>*<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"/"</span>&gt;</span>/<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"n2"</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"compute"</span>&gt;</span>=<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"res"</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./../../js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">        data:&#123;</span></span><br><span class="line"><span class="undefined">            n1:0,</span></span><br><span class="line"><span class="undefined">            n2:0,</span></span><br><span class="line"><span class="javascript">            sign:<span class="string">'+'</span>,</span></span><br><span class="line"><span class="undefined">            res:0,</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        methods: &#123;</span></span><br><span class="line"><span class="undefined">            compute () &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 这是一种方法，使用switch来判断条件</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">switch</span> (<span class="keyword">this</span>.sign)&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">case</span> <span class="string">"+"</span> : <span class="keyword">this</span>.res= <span class="built_in">parseFloat</span>(<span class="keyword">this</span>.n1) + <span class="built_in">parseFloat</span>(<span class="keyword">this</span>.n2); <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">case</span> <span class="string">"-"</span> : <span class="keyword">this</span>.res= <span class="built_in">parseFloat</span>(<span class="keyword">this</span>.n1) - <span class="built_in">parseFloat</span>(<span class="keyword">this</span>.n2); <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">case</span> <span class="string">"*"</span> : <span class="keyword">this</span>.res= <span class="built_in">parseFloat</span>(<span class="keyword">this</span>.n1) * <span class="built_in">parseFloat</span>(<span class="keyword">this</span>.n2); <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">case</span> <span class="string">"/"</span> : <span class="keyword">this</span>.res= <span class="built_in">parseFloat</span>(<span class="keyword">this</span>.n1) / <span class="built_in">parseFloat</span>(<span class="keyword">this</span>.n2); <span class="keyword">break</span>;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">                <span class="comment">// 还有一种投机取巧的办法，但是不推荐使用</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// var str=this.n1+this.sign+this.n2;</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// this.res=eval(str);</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,               </span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>写的时候要注意不要把this给忘了。</p><p><img src="http://m.qpic.cn/psb?/V131x4904WMIoW/9m0ADQTKmcWcvkNKtGgqc*mJpN9hFmxgPMFXOS3EI9I!/b/dL8AAAAAAAAA&bo=6gKNAAAAAAADB0c!&rf=viewer_4"></p><p>通过两种方法都能成功实现了一个简单的计算器。</p><blockquote><p>但是要注意的一件事情是尽量不要使用第二种方法，因为第二种方法中使用的<code>eval()</code>函数会将字符串解析成代码，所以其实这是很不安全的一件事情，坏人就有机可乘可以搞破坏。</p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这次学习的是vue中的<code>v-model</code>,使用这个方法可以十分轻松的实现数据的双向绑定。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;这次来学习vue中的双向数据绑定的一种方法，使用v-model来进行数据的双向绑定，并通过其来实现一个超级简单的计算器。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue.js的学习（二）事件修饰符</title>
    <link href="https://q32757468.github.io/2019/06/16/vue-js%E7%9A%84%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6/"/>
    <id>https://q32757468.github.io/2019/06/16/vue-js的学习（二）事件修饰符/</id>
    <published>2019-06-16T03:03:05.000Z</published>
    <updated>2019-06-16T03:32:42.876Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这次的笔记来学些一下vue中的事件修饰符，通过事件修饰符可是实现一些简单的功能，比如阻止冒泡之类的。<br><a id="more"></a></p></blockquote><p>一下是一段运用了事件修饰符的代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">div&#123;</span></span><br><span class="line"><span class="undefined">    padding: 50px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">'outerclick'</span> <span class="attr">id</span>=<span class="string">"app"</span> <span class="attr">style</span>=<span class="string">"background-color: blue"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">'innerclick'</span> <span class="attr">style</span>=<span class="string">"background-color: red"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'btnclick'</span>&gt;</span>这是一个测试按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> @<span class="attr">click.prevent.once</span> <span class="attr">href</span>=<span class="string">"https://www.baidu.com"</span>&gt;</span>这是去百度的链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./../../js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">'#app'</span>,</span></span><br><span class="line"><span class="javascript">        data:&#123;<span class="comment">// 通过在data中设置变量      </span></span></span><br><span class="line"><span class="javascript">            msg:<span class="string">'这是一个测试内容'</span>,</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        methods: &#123;</span></span><br><span class="line"><span class="undefined">           btnclick()&#123;</span></span><br><span class="line"><span class="javascript">               alert(<span class="string">'这是一个按钮'</span>);</span></span><br><span class="line"><span class="undefined">           &#125;,</span></span><br><span class="line"><span class="undefined">           innerclick()&#123;</span></span><br><span class="line"><span class="javascript">               alert(<span class="string">'这是里面的div'</span>)</span></span><br><span class="line"><span class="undefined">           &#125;,</span></span><br><span class="line"><span class="undefined">           outerclick()&#123;</span></span><br><span class="line"><span class="javascript">               alert(<span class="string">'这是外面的div'</span>)</span></span><br><span class="line"><span class="undefined">           &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">    &#125;) </span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="stop"><a href="#stop" class="headerlink" title=".stop"></a>.stop</h3><p> 通过<code>.stop</code>可以阻止事件向上冒泡</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click.stop=&apos;btnclick&apos;&gt;这是一个测试按钮&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>我们只需要这样设置就可以阻止事件向上冒泡</p><h3 id="self"><a href="#self" class="headerlink" title=".self"></a>.self</h3><p> 通过<code>.self</code>可以阻止事件向上冒泡<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div @click.self=&apos;innerclick&apos; style=&quot;background-color: red&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>我们只需要这样设置就使这个里面的div在按钮进行事件冒泡的时候不会触发它的单击事件，只会触发自己的事件。</p><h3 id="prevent"><a href="#prevent" class="headerlink" title=".prevent"></a>.prevent</h3><p>通过<code>.prevent</code>就可以阻止默认行为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a @click.prevent href=&quot;https://www.baidu.com&quot;&gt;这是去百度的链接&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>通过以上代码就可以实现阻止默认行为，但我们单击超链接的时候就不会进行跳转</p><h3 id="once"><a href="#once" class="headerlink" title=".once"></a>.once</h3><p>通过<code>.once</code>就可以使事件修饰符只起作用一次<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a @click.prevent.once href=&quot;https://www.baidu.com&quot;&gt;这是去百度的链接&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>通过以上代码，当我们单击超链接的时候第一次不会进行跳转，但是再次单击的时候就会进行跳转了</p><blockquote><p>其他事件修饰符也适用</p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这次学习了vue中的事件修饰符</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;这次的笔记来学些一下vue中的事件修饰符，通过事件修饰符可是实现一些简单的功能，比如阻止冒泡之类的。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>通过vue做一个简单的跑马灯</title>
    <link href="https://q32757468.github.io/2019/06/15/%E9%80%9A%E8%BF%87vue%E5%81%9A%E4%B8%80%E4%B8%AA%E8%B7%91%E9%A9%AC%E7%81%AF/"/>
    <id>https://q32757468.github.io/2019/06/15/通过vue做一个跑马灯/</id>
    <published>2019-06-15T14:38:59.000Z</published>
    <updated>2019-06-16T03:00:25.893Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前面简单的学习了vue中的一些简单的东西以及入门，这次通过vue来做一个简单的跑马灯来试一试.<br><a id="more"></a></p></blockquote><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>其实实现原理非常的简单，只需要将我们需要跑起来的字符串的首个字符拼接到字符串尾部，再通过定时器将新的字符串渲染到页面就可以了，只不过这些都是通过vue框架来实现的。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-cloak</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'pmd'</span>&gt;</span>跑起来<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'stoppmd'</span>&gt;</span>停止<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">"msg"</span>&gt;</span>  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./../../js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">'#app'</span>,</span></span><br><span class="line"><span class="javascript">        data:&#123;<span class="comment">// 通过在data中设置变量      </span></span></span><br><span class="line"><span class="javascript">            msg:<span class="string">'这是一个测试内容'</span>,</span></span><br><span class="line"><span class="javascript">            timer:<span class="literal">null</span>,<span class="comment">//通过timer这个变量来控制只有第一次单击有效</span></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        methods: &#123;</span></span><br><span class="line"><span class="undefined">           pmd()&#123;</span></span><br><span class="line"><span class="javascript">               <span class="keyword">if</span>(<span class="keyword">this</span>.timer!=<span class="literal">null</span>)</span></span><br><span class="line"><span class="javascript">                   <span class="keyword">return</span> ;  <span class="comment">//如果timer为null，那么就直接调出函数</span></span></span><br><span class="line"><span class="javascript">               <span class="keyword">this</span>.timer=setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                   <span class="keyword">var</span> start=<span class="keyword">this</span>.msg.substr(<span class="number">0</span>,<span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">                   <span class="keyword">var</span> end=<span class="keyword">this</span>.msg.substr(<span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">                   <span class="keyword">this</span>.msg=end+start;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//    console.log(this.msg);       </span></span></span><br><span class="line"><span class="undefined">               &#125;, 500);</span></span><br><span class="line"><span class="undefined">           &#125;,</span></span><br><span class="line"><span class="undefined">           stoppmd()&#123;</span></span><br><span class="line"><span class="javascript">            clearInterval(<span class="keyword">this</span>.timer);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.timer=<span class="literal">null</span>;</span></span><br><span class="line"><span class="undefined">           &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">    &#125;) </span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="学习到的一些知识以及遇到的一些问题"><a href="#学习到的一些知识以及遇到的一些问题" class="headerlink" title="学习到的一些知识以及遇到的一些问题"></a>学习到的一些知识以及遇到的一些问题</h3><ul><li><p>学习到的第一个就是箭头函数，通过使用es6中的箭头函数就可以解决this的问题，就不用重新去指定this</p></li><li><p>第二个就是return的使用，过去我只知道return只能够返回函数值，现在我知道了return不仅仅能够返回函数值，还能够提前跳出函数返回函数值，配合条件表达式就能很好的实现一些功能。</p></li><li><p>第三个就是可以设置一个变量将定时器函数传给这个变量，然后就可以通过比如清除函数来清空定时器之类的以及重新开启定时器。</p></li></ul><h3 id="遇到的一些问题"><a href="#遇到的一些问题" class="headerlink" title="遇到的一些问题"></a>遇到的一些问题</h3><p>一个就是对象中的this的指向问题，如果是对象中定义的方法，就可以直接通过this拿到当前对象，但是如果在对象中的方法中调用了其他方法，并在这个方法中写函数的话，那么这个时候的this就指向调用的外部函数，如果要重新让this指向对象就需要在自己定义的方法中声明<code>this=this</code>，或者使用es6中的箭头函数。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在这次的学习中学习到很多es6中的新知识，下次要系统的完整的去学习es6中的知识。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;前面简单的学习了vue中的一些简单的东西以及入门，这次通过vue来做一个简单的跑马灯来试一试.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue.js的学习（一）</title>
    <link href="https://q32757468.github.io/2019/06/15/vue-js%E7%9A%84%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://q32757468.github.io/2019/06/15/vue-js的学习（一）/</id>
    <published>2019-06-15T13:31:48.000Z</published>
    <updated>2019-06-15T14:15:59.447Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最近开始学习现在最火的前端开发框架vue.js，这篇博客记录我的学习过程以及学习笔记。<br><a id="more"></a></p></blockquote><h3 id="vue-js的使用"><a href="#vue-js的使用" class="headerlink" title="vue.js的使用"></a>vue.js的使用</h3><p>先去官网下载好vue.js的文件，然后在项目中引入js文件就可以开始使用vue来进行开发了，例如这样：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"./../../js/vue.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>然后这是一个vue的基本模板：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这是一个普通的块 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-cloak</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./../../js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">'#app'</span>,<span class="comment">// 在vue中对id为app的元素进行操作</span></span></span><br><span class="line"><span class="javascript">        data:&#123;<span class="comment">//这里面写数据</span></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="javascript">        methods: &#123;<span class="comment">//这里面写各种方法 </span></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="插值表达式和v-text"><a href="#插值表达式和v-text" class="headerlink" title="插值表达式和v-text"></a>插值表达式和v-text</h3><p>在vue中想要对元素输入数值是非常简单的，不需要通过js或者jQuery拿到对象再通过函数进行传入数据，直接在dom元素中直接通过插值表达式就可以将vue中data中的值给到dom元素中。<br>比如这样：</p><h4 id="通过插值表达式"><a href="#通过插值表达式" class="headerlink" title="通过插值表达式"></a>通过插值表达式</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-cloak</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        &#123;&#123;msg&#125;&#125;12314</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm=<span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el:<span class="string">'#app'</span>,</span><br><span class="line">        data:&#123;</span><br><span class="line">            <span class="comment">//这里定义一个变量来我们想要的值</span></span><br><span class="line">            msg:<span class="string">'这是一个测试'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;           </span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>我们只需要通过插值表达式将我们创建的vue对象中的data中的变量写到dom元素中就可以将变量渲染出来。</p><p><img src="http://m.qpic.cn/psb?/V131x4904WMIoW/qQYbwi0yWJNzAlWrAIsaadH9epSrbH*kG3HLHHqbIDc!/b/dDIBAAAAAAAA&bo=VgV1AgAAAAADBwY!&rf=viewer_4"></p><p>可以看到我们定义的变量的值成功被渲染出来了</p><blockquote><p>但是注意这样会有一个问题，就是在网速较慢的时候vue.js这个文件就会加载的比较慢，那么插值表达式就不会生效，而是直接将整个表达式当做字符串输出出来，那么这个时候我们可以通过给相应的dom元素加上<code>v-cloak</code>,然后再设置样式<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[v-cloak]</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h4><p>使用<code>v-text</code>也可以将数据渲染到dom元素，但是用法不一样<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span>=<span class="string">"msg+'123423'"</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这样就可以实现了插值表达式一样的效果了。</p><blockquote><p>注意：v-text 后面可以通过<code>+</code>来拼接字符串</p></blockquote><h3 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h3><p>这个用法和<code>v-text</code>一致，作用也相似，只是<code>v-html</code>可以解析html标签，但是<code>v-text</code>不能</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">"msg+'123423'"</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><p><code>v-bind</code>可以给dom元素绑定属性值</p><p><code>v-bind</code>可以简写成<code>:</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-cloak</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"这是一个按钮"</span> <span class="attr">v-bind:title</span>=<span class="string">"mtitle"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm=<span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el:<span class="string">'#app'</span>,</span><br><span class="line">        data:&#123;</span><br><span class="line">            msg:<span class="string">'这是一个测试'</span>,</span><br><span class="line">            mtitle:<span class="string">'这是一个测试'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;           </span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p><img src="http://m.qpic.cn/psb?/V131x4904WMIoW/oWoqza.oQdO.y45D6CeNA*JLzGxuQVGoQebnZ0AN*4M!/b/dLgAAAAAAAAA&bo=7ACBAAAAAAADB08!&rf=viewer_4"><br>可以看到，成功给这个按钮加上了一个我们在vue中定义的title</p><blockquote><p><code>v-bind:title=</code>后面跟的是一个变量，所以后面也是可以拼接字符串的，许多vue中的属性也都是如此</p></blockquote><h3 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h3><p><code>v-on</code>与<code>v-bind</code>类似，只不过绑定的不是dom元素的属性，而是各种事件，</p><p><code>v-on</code>可以简写成<code>@</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-cloak</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"mclick"</span>&gt;</span>这又是一个按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm=<span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">'#app'</span>,</span><br><span class="line">    data:&#123;</span><br><span class="line">        msg:<span class="string">'这是一个测试'</span>,</span><br><span class="line">        mtitle:<span class="string">'这是一个测试'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        mclick () &#123;</span><br><span class="line">            alert(<span class="string">'单击了这个按钮'</span>);</span><br><span class="line">        &#125;           </span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="http://m.qpic.cn/psb?/V131x4904WMIoW/Mgh9tbxP89uT9zaEpNevDAzu*KeR5w9asUwwp0IokCM!/b/dLgAAAAAAAAA&bo=DgcsAQAAAAADBwY!&rf=viewer_4"></p><p>可以看到成功触发了我们自己定义的单击事件。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这篇博客记录学习了vue最简单初始的一些东西，一个小小的入门。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;最近开始学习现在最火的前端开发框架vue.js，这篇博客记录我的学习过程以及学习笔记。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Chrome-调试大全</title>
    <link href="https://q32757468.github.io/2019/06/15/Chrome-%E8%B0%83%E8%AF%95%E5%A4%A7%E5%85%A8/"/>
    <id>https://q32757468.github.io/2019/06/15/Chrome-调试大全/</id>
    <published>2019-06-15T04:14:17.000Z</published>
    <updated>2019-06-15T04:27:19.197Z</updated>
    
    <content type="html"><![CDATA[<p></p><h2>引言</h2><p></p><blockquote><p></p><p>原文出处：&nbsp;&nbsp;&nbsp;&nbsp;<a href="http://www.igeekbar.com/igeekbar/post/156.htm" rel="nofollow" target="_blank">Cayley的编程之路</a></p>“工欲善其事，必先利其器” <br>没错，这句话个人觉得说的特别有道理，举个例子来说吧，厉害的化妆师都有一套非常专业的刷子，散粉刷负责定妆，眼影刷负责打眼影，各司其职，有了专业的工具才能干专业的事，这个灵感要来源于之前我想买化妆品时，店里的海报标语，由此联想到，如果你想在某个事情上做好<a id="more"></a>，并且做的专业，那么你一定要把你的工具用好，这样才能事半功倍，我见过很多师兄师姐，写了很多代码，能够很快的完成工作，能够处理很多复杂的业务逻辑，但是对于浏览器的调试掌握的并不全面和深入，说说本姑娘吧，我的编程调试起源于自学滴前端课程，因为学习的时候看的都是基础的教学视频，对于调试也只是掌握了alert和console, 请大家别笑话，认真看完再说话，试问谁当初入门时候不是走的这条路呢，当你不再限于做静态页面，古老而经典的调试方式肯定不能帮你完成日常调试，日后我进入到了大公司去实习，才真正开始接触专业开发业务，开始跟着师兄和师傅一起上路，那时我才有了“js断点调试“的意识，开始一步步调试我的js代码~<p></p></blockquote><p><br></p><br><hr class="section-divider"><br><p><br></p><p>下面总结一下一些常用调试方法，这些方法能让开发的工作顺利并且高效，这里小女子拿出来总结一下，与各位程序猿同仁分享一下 ~ （此处应有掌声…… ^_^）</p><br><p><br></p><br><h2>一. 先来认识一下这些按钮</h2><br><div><br> <a href="http://igeekbar.com/igeekbar/networks/uploadimg/52af2165-aa3b-41ea-acdf-4c3fb7ba3b27.png" target="_blank" rel="noopener"><img src="http://igeekbar.com/igeekbar/networks/uploadimgthumb/52af2165-aa3b-41ea-acdf-4c3fb7ba3b27.png" class="img-responsive center-block"></a><br></div><br><div><br> <br><br></div><br><div><br> 先来看这张图最上头的一行是一个功能菜单，每一个菜单都有它相应的功能和使用方法，依次从左往右来看<br> <br><br></div><br><p><b>1.箭头按钮</b>：用于在页面选择一个元素来审查和查看它的相关信息，当我们在<b>Elements</b>这个按钮页面下点击某个Dom元素时，箭头按钮会变成选择状态</p><br><p><br></p><br><p><b>2.设备图标</b>：点击它可以切换到不同的终端进行开发模式，移动端和pc端的一个切换，可以选择不同的移动终端设备，同时可以选择不同的尺寸比例，chrome浏览器的模拟移动设备和真实的设备相差不大，是非常好的选择</p><br><p><br></p><br><div><br> <a href="http://igeekbar.com/igeekbar/networks/uploadimg/51d40eb1-3e74-4e27-9583-b3b50f332510.png" target="_blank" rel="noopener"><img src="http://igeekbar.com/igeekbar/networks/uploadimgthumb/51d40eb1-3e74-4e27-9583-b3b50f332510.png" class="img-responsive center-block"></a><br> <div><br>  可选择的适配<br> </div><br></div><br><p><br></p><br><p><b>3.Elements</b>&nbsp;功能标签页：用来查看，修改页面上的元素，包括DOM标签，以及css样式的查看，修改，还有相关盒模型的图形信息，下图我们可以看到当我鼠标选择id 为lg_tar的div元素时，右侧的css样式对应的会展示出此id 的样式信息，此时可以在右侧进行一个修改，修改即可在页面上生效， 灰色的element.style样式同样可以进行添加和书写，唯一的区别是，在这里添加的样式是添加到了该元素内部，实现方式即：该div元素的style属性，这个页面的功能很强大，在我们做了相关的页面后，修改样式是一块很重要的工作，细微的差距都需要调整，但是不可能说做到每修改一点即编译一遍代码，再刷新浏览器查看效果，这样很低效，一次性在浏览器中修改之后，再到代码中进行修改</p><br><p><br></p><br><div><br> <a href="http://igeekbar.com/igeekbar/networks/uploadimg/b548b239-eb00-447d-be60-29c1c3b3ce9b.png" target="_blank" rel="noopener"><img src="http://igeekbar.com/igeekbar/networks/uploadimgthumb/b548b239-eb00-447d-be60-29c1c3b3ce9b.png" class="img-responsive center-block"></a><br></div><br><div><br> <div><br>  <br><br> </div><br> <ul><br>  <li>对应的样式</li><br> </ul><br> <div><br>  <br><br> </div><br></div><br><div><br> <a href="http://igeekbar.com/igeekbar/networks/uploadimg/54802412-70df-4c69-8adb-cea9c52b2b09.png" target="_blank" rel="noopener"><img src="http://igeekbar.com/igeekbar/networks/uploadimgthumb/54802412-70df-4c69-8adb-cea9c52b2b09.png" class="img-responsive center-block"></a><br></div><br><div><br> <br><br> <ul><br>  <li>盒模型信息</li><br> </ul><br></div><br><p>同时，当我们浏览网站看到某些特别炫酷的效果和难做的样式时候，打开这个功能，我们即可看到别人是如何实现的，学会它这知识就是你的了，仔细钻研也会有意想不到的收获</p><br><p><br></p><br><p><b>4.Console控制台</b>：用于打印和输出相关的命令信息，其实console控制台除了我们熟知的报错，打印console.log信息外，还有很多相关的功能，下面简单介绍几个：</p><br><p>a: 一些对页面数据的指令操作，比如打断点正好执行到获取的数据上，由于数据都是层层嵌套的对象，这个时候查看里面的key/value不是很方便，即可用这个指令开查看，obj的json string 格式的key/value，我们对于数据里面有哪些字段和属性即可一目了然</p><br><p><br></p><br><div><br> <a href="http://igeekbar.com/igeekbar/networks/uploadimg/ac4fc806-f29a-44e2-bcf0-95b28c401790.png" target="_blank" rel="noopener"><img src="http://igeekbar.com/igeekbar/networks/uploadimgthumb/ac4fc806-f29a-44e2-bcf0-95b28c401790.png" class="img-responsive center-block"></a><br> <div><br>  其他功能<br> </div><br></div><br><p>b: 除了console.log还有其他相关的指令可用</p><br><p><br></p><br><div><br> <a href="http://igeekbar.com/igeekbar/networks/uploadimg/6e7f7867-9422-4238-a23b-d463e1f799d5.png" target="_blank" rel="noopener"><img src="http://igeekbar.com/igeekbar/networks/uploadimgthumb/6e7f7867-9422-4238-a23b-d463e1f799d5.png" class="img-responsive center-block"></a><br> <div><br>  console也有相关的API<br> </div><br> <div><br>  <br><br> </div><br></div><br><p><b>5.Sources</b>&nbsp;js资源页面：这个页面内我们可以找到当然浏览器页面中的js 源文件，方便我们查看和调试，在我还没有走出校园时候，我经常看一些大站的js代码，那时候其实基本都看不懂，但是最起码可以看看人家的代码风格，人家的命名方式，所有的代码都是压缩之后的代码，我们可以点击下面的{}大括号按钮将代码转成可读格式</p><br><p>Sources Panel 的左侧分别是 Sources 和 Content scripts和Snippets<br></p><br><div><br> <a href="http://igeekbar.com/igeekbar/networks/uploadimg/a147d491-68bd-45d7-8403-6c25ce99201e.png" target="_blank" rel="noopener"><img src="http://igeekbar.com/igeekbar/networks/uploadimgthumb/a147d491-68bd-45d7-8403-6c25ce99201e.png" class="img-responsive center-block"></a><br> <div><br>  <br><br> </div><br> <ul><br>  <li>对应的源代码</li><br> </ul><br></div><br><p><br></p><br><div><br> <a href="http://igeekbar.com/igeekbar/networks/uploadimg/a8e61566-e44e-4a92-95e0-c872cf9a2cbb.png" target="_blank" rel="noopener"><img src="http://igeekbar.com/igeekbar/networks/uploadimgthumb/a8e61566-e44e-4a92-95e0-c872cf9a2cbb.png" class="img-responsive center-block"></a><br> <div><br>  <br><br> </div><br> <ul><br>  <li>格式化后的代码</li><br> </ul><br> <div><br>  <br><br> </div><br></div><br><p>关于打断点调试的内容，下面介绍，先来说一些，其他平时基本没人用但是很有用的小点，比如当我们想不起某个方法的具体使用时候，会打开控制台随意写一些测试代码，或者想测试一下刚刚写的方法是否会出现期待的样子，但是控制台一打回车本想换行但是却执行刚写的半截代码，所以推荐使用<b>Sources</b>下面的左侧的Sinppets代码片段按钮，这时候点击创建一个新的片段文件，写完测试代码后把鼠标放在新建文件上run，再结合控制台查看相关信息（<b>新建了一个名叫：app.js的片段代码，在你的项目环境页面内，该片段可执行项目内的方法</b>）</p><br><p><br></p><br><div><br> <a href="http://igeekbar.com/igeekbar/networks/uploadimg/f56570d0-2ec4-4970-8ba5-c1bf2b8abf2d.png" target="_blank" rel="noopener"><img src="http://igeekbar.com/igeekbar/networks/uploadimgthumb/f56570d0-2ec4-4970-8ba5-c1bf2b8abf2d.png" class="img-responsive center-block"></a><br> <div><br>  <br><br> </div><br> <ul><br>  <li>自己书写的片段</li><br> </ul><br> <div><br>  <br><br> </div><br></div><br><p>Content scripts 是 Chrome 的一种扩展程序，它是按照扩展的ID来组织的，这些文件也是嵌入在页面中的资源，这类文件可以读写和操作我们的资源，需要调试这些扩展文件，则可以在这个目录下打开相关文件调试，但是几乎我们的项目还没有相关的扩展文件，所以啥也看不到，平时也不需要关心这块</p><br><div><br> <a href="http://igeekbar.com/igeekbar/networks/uploadimg/e93f193c-3bf2-41ef-b300-e199a8a60d27.png" target="_blank" rel="noopener"><img src="http://igeekbar.com/igeekbar/networks/uploadimgthumb/e93f193c-3bf2-41ef-b300-e199a8a60d27.png" class="img-responsive center-block"></a><br> <div><br>  无结果<br> </div><br> <div><br>  <br><br> </div><br></div><br><p><b>6.Network&nbsp;</b>网络请求标签页：可以看到所有的资源请求，包括网络请求，图片资源，html,css，js文件等请求，可以根据需求筛选请求项，一般多用于网络请求的查看和分析，分析后端接口是否正确传输，获取的数据是否准确，请求头，请求参数的查看</p><br><div><br> <div><br>  <a href="http://igeekbar.com/igeekbar/networks/uploadimg/83a9003a-434c-4f11-a7d6-6ce2f5965106.png" target="_blank" rel="noopener"><img src="http://igeekbar.com/igeekbar/networks/uploadimgthumb/83a9003a-434c-4f11-a7d6-6ce2f5965106.png" class="img-responsive center-block"></a><br> </div><br> <ul><br>  <li>所有的资源</li><br> </ul><br> <div><br>  <br><br> </div><br></div><br><p>以上我选择了All，就会把该页面所有资源文件请求下来，如果只选择XHR 异步请求资源，则我们可以分析相关的请求信息</p><br><div><br> <a href="http://igeekbar.com/igeekbar/networks/uploadimg/a36f5b9e-2e06-4593-9c77-a50d798bc8ea.png" target="_blank" rel="noopener"><img src="http://igeekbar.com/igeekbar/networks/uploadimgthumb/a36f5b9e-2e06-4593-9c77-a50d798bc8ea.png" class="img-responsive center-block"></a><br> <div><br>  <br><br> </div><br> <ul><br>  <li>请求的相关信息</li><br> </ul><br> <div><br>  <br><br> </div><br></div><br><p>打开一个Ajax异步请求，可以看到它的请求头信息，是一个POST请求，参数有哪些，还可以预览它的返回的结果数据，这些数据的使用和查看有利于我们很好的和后端工程师们联调数据，也方便我们前端更直观的分析数据</p><br><div><br> <a href="http://igeekbar.com/igeekbar/networks/uploadimg/90ebfadd-e79a-4837-9873-5cbb0cd1b0f2.png" target="_blank" rel="noopener"><img src="http://igeekbar.com/igeekbar/networks/uploadimgthumb/90ebfadd-e79a-4837-9873-5cbb0cd1b0f2.png" class="img-responsive center-block"></a><br> <div><br>  <br><br> </div><br> <ul><br>  <li>预览请求的数据</li><br> </ul><br> <div><br>  <br><br> </div><br></div><br><p><b>7.Timeline</b>标签页可以显示JS执行时间、页面元素渲染时间，不做过多介绍</p><br><p><br></p><br><p><b>8.Profiles</b>标签页可以<b>查看</b>CPU执行时间与内存占用，不做过多介绍</p><br><p><br></p><br><p><b>9.Resources</b>标签页会列出所有的资源，以及HTML5的Database和LocalStore等，你可以对存储的内容编辑和删除 不做过多介绍</p><br><p><br></p><br><p><b>10.Security</b>标签页 可以告诉你这个网站的安全性，查看有效的证书等</p><br><p><br></p><br><p><b>11.Audits</b>标签页 可以帮你分析页面性能，有助于优化前端页面，分析后得到的报告</p><br><div><br> <a href="http://igeekbar.com/igeekbar/networks/uploadimg/2e0393c9-cc86-4a20-905e-3f80154f4f2f.png" target="_blank" rel="noopener"><img src="http://igeekbar.com/igeekbar/networks/uploadimgthumb/2e0393c9-cc86-4a20-905e-3f80154f4f2f.png" class="img-responsive center-block"></a><br> <div><br>  <br><br> </div><br> <ul><br>  <li>分析结果</li><br> </ul><br> <p><br></p><br></div><br><h2>二.Sources资源页面的断点调试</h2><br><p><b>1.如何调试</b>：</p><br><p>调试js代码，肯定是我们常用的功能，那么如何打断点，找到要调试的文件，然后在内容源代码左侧的代码标记行处点击即可打上一个断点<br></p><br><div><br> <a href="http://igeekbar.com/igeekbar/networks/uploadimg/0d2066b5-e10e-4562-b5f7-eef9ff2e9a02.png" target="_blank" rel="noopener"><img src="http://igeekbar.com/igeekbar/networks/uploadimgthumb/0d2066b5-e10e-4562-b5f7-eef9ff2e9a02.png" class="img-responsive center-block"></a><br></div><br><p><b>2.断点与 js代码修改</b></p><br><p>看下面这张图，我在一个名为toggleTab的方法下打了两个断点，当开始执行我们的点击切换tab行为后，代码会在执行的断点出停下来，并把相关的数据展示一部分，此时可以在已经执行过得代码处，把鼠标放上去，即可查看相关的具体数据信息，同时我们可以使用右侧的功能键进行调试，右侧最上面一排分别是：暂停/继续、单步执行(<b>F10快捷键</b>)、单步跳入此执行块(<b>F11快捷键</b>)、单步跳出此执行块、禁用/启用所有断点。下面是各种具体的功能区</p><br><div><br> <a href="http://igeekbar.com/igeekbar/networks/uploadimg/980c6de1-f378-48c3-90a5-6d865b46881f.png" target="_blank" rel="noopener"><img src="http://igeekbar.com/igeekbar/networks/uploadimgthumb/980c6de1-f378-48c3-90a5-6d865b46881f.png" class="img-responsive center-block"></a><br> <div><br>  <br><br> </div><br> <ul><br>  <li>在代码中打断点</li><br> </ul><br></div><br><p><br></p><br><p>在当前的代码执行区域，在调试中如果发现需要修改的地方，也是可以立即修改的，修改后保存即可生效，这样就免去了再到代码中去书写，再刷新回看了</p><br><div><br> <a href="http://igeekbar.com/igeekbar/networks/uploadimg/cce6a3d6-e055-43ea-9687-e3f1fa6854cf.png" target="_blank" rel="noopener"><img src="http://igeekbar.com/igeekbar/networks/uploadimgthumb/cce6a3d6-e055-43ea-9687-e3f1fa6854cf.png" class="img-responsive center-block"></a><br></div><br><div><br> <br><br> <div><br>  临时修改<br> </div><br></div><br><p><b><br></b></p><br><p><b>3.快速进入调试的方法</b></p><br><p>当我们的代码执行到某个程序块方法处，这个方法上可能你并没有设置相关的断点，此时你可以F11进入此程序块，但是往往我们的项目都是经过很多源代码封装好的方法，有时候进入后，会走很多底层的封装方法，需要很多步骤才能真正进入这个函数块，此时将鼠标放在此函数上，会出现相关提示，会告诉你在该文件的哪一行代码处，点击即可直接看到这个函数，然后临时打上断点，按F10或者点击右上角的第二个按钮即可直接进入此函数的断点处</p><br><div><br> <a href="http://igeekbar.com/igeekbar/networks/uploadimg/5130e68e-74c7-4b1a-9a12-7f5e7f5ceb6d.png" target="_blank" rel="noopener"><img src="http://igeekbar.com/igeekbar/networks/uploadimgthumb/5130e68e-74c7-4b1a-9a12-7f5e7f5ceb6d.png" class="img-responsive center-block"></a><br></div><br><p><b><br></b></p><br><p><b>4.调试的功能区域</b></p><br><p>每一个功能区，都有它相关的左右，先来看一张图，它都有哪些功能</p><br><div><br> <a href="http://igeekbar.com/igeekbar/networks/uploadimg/bdb50caf-0484-47b9-a3ed-ec0aa9d38e67.png" target="_blank" rel="noopener"><img src="http://igeekbar.com/igeekbar/networks/uploadimgthumb/bdb50caf-0484-47b9-a3ed-ec0aa9d38e67.png" class="img-responsive center-block"></a><br></div><br><p><b>Call Stack调用栈</b>：当断点执行到某一程序块处停下来后，右侧调试区的 Call Stack 会显示当前断点所处的方法调用栈，从上到下由最新调用处依次往下排列，Call Stack 列表的下方是Scope Variables列表可以查看此时局部变量和全局变量的值。图中可以看出，我们最先走了toggleTab这个方法，然后走到了一个更新对象的方法上，当前调用在哪里，箭头会帮你指向哪里，同时我们可以点击，调用栈列表上的任意一处，即可回头再去看看代码</p><br><div><br> <a href="/igeekbar/networks/uploadimg/8dd4193f-f723-4597-9633-1c789fbf474b.png"><img src="/igeekbar/networks/uploadimgthumb/8dd4193f-f723-4597-9633-1c789fbf474b.png" class="img-responsive center-block"></a><br></div><br><p>但是若你想从新从某个调用方法出执行，可以右键Restart Frame， 断点就会跳到此处开头重新执行，<b>Scope</b>&nbsp;中的变量值也会依据代码从新更改，这样就可以回退来从新调试，错过的调试也可以回过头来反复查看</p><br><div><br> <a href="http://igeekbar.com/igeekbar/networks/uploadimg/c7ba0acc-7305-4a55-9790-6bc637922989.png" target="_blank" rel="noopener"><img src="http://igeekbar.com/igeekbar/networks/uploadimgthumb/c7ba0acc-7305-4a55-9790-6bc637922989.png" class="img-responsive center-block"></a><br></div><br><p><b>Breakpoints</b>关于断点：所有当前js的断点都会展示在这个区域，你可以点击按钮用来“去掉/加上”此处断点，也可以点击下方的代码表达式，调到相应的程序代码处，来查看</p><br><div><br> <a href="http://igeekbar.com/igeekbar/networks/uploadimg/1cd4281f-4170-40e4-8bfa-cc0050af9a53.png" target="_blank" rel="noopener"><img src="http://igeekbar.com/igeekbar/networks/uploadimgthumb/1cd4281f-4170-40e4-8bfa-cc0050af9a53.png" class="img-responsive center-block"></a><br></div><br><p><b>XHR Breakpoints</b></p><br><p>在XHR Breakpoints处，点击右侧的+号，可以添加请求的URL，一旦 XHR 调用触发时就会在 request.send() 的地方中断</p><br><div><br> <a href="http://igeekbar.com/igeekbar/networks/uploadimg/238a0267-dbd8-4dd3-8598-b09895b5694e.png" target="_blank" rel="noopener"><img src="http://igeekbar.com/igeekbar/networks/uploadimgthumb/238a0267-dbd8-4dd3-8598-b09895b5694e.png" class="img-responsive center-block"></a><br></div><br><p><b>DOM Breakpoints:</b></p><br><p>可以给你的DOM元素设置断点，有时候真的需要监听和查看某个元素的变化情况，赋值情况，但是我们并是不太关心哪一段代码对它做的修改，只想看看它的变化情况，那么可以给它来个监听事件，这个时候DOM Breakpoints中会如图</p><br><div><br> <a href="http://igeekbar.com/igeekbar/networks/uploadimg/da1c5b48-42db-4d5f-8a24-19389fa858f0.png" target="_blank" rel="noopener"><img src="http://igeekbar.com/igeekbar/networks/uploadimgthumb/da1c5b48-42db-4d5f-8a24-19389fa858f0.png" class="img-responsive center-block"></a><br></div><br><p>当要给DOM添加断点的时候，会出现选择项分别是如下三种修改1.子节点修改2.自身属性修改3.自身节点被删除。选中之后，Sources Panel 中右侧的 DOM Breakpoints 列表中就会出现该 DOM 断点。一旦执行到要对该 DOM 做相应修改时，代码就会在那里停下来</p><br><p><b>Event listener Breakpoints&nbsp;</b></p><br><p>最后Event Listener 列表，这里列出了各种可能的事件类型。勾选对应的事件类型，当触发了该类型的事件的 JavaScript 代码时就会自动中断</p><br><p><br></p><br><h2>三.Post man你值得拥有的网络请求神器</h2><br><p>在我们的开发过程中，后端的接口都是由发起AJAX请求而获取到的相关数据，但是很多情况是我们的业务还没有做到那块时，后端的同学接口都已经准备好了，但是为了便于后期的工作，将接口请求的数据模拟访问，然后对接口联调很重要，也很方便，因为我们不可能把每个请求代码都写到文件里编译好了再去浏览器内查看，这时候可以安装一个post man网络请求插件，在谷歌应用商店下载，需要翻墙<br></p><br><div><br> <a href="http://igeekbar.com/igeekbar/networks/uploadimg/eea9dc12-f18e-4ccc-9998-b34f4f367ce1.png" target="_blank" rel="noopener"><img src="http://igeekbar.com/igeekbar/networks/uploadimgthumb/eea9dc12-f18e-4ccc-9998-b34f4f367ce1.png" class="img-responsive center-block"></a><br></div><br><p>该扩展程序使用非常简单，功能同时也非常强大，输入你的请求，选择好请求的method，需要请求参数的挨个填好，send之后，就可以看到返回的数据，这个小工具很利于我们的开发</p><br><div><br> <a href="http://igeekbar.com/igeekbar/networks/uploadimg/48b702eb-7a24-4fa9-aa52-bcc8b97c8fbd.png" target="_blank" rel="noopener"><img src="http://igeekbar.com/igeekbar/networks/uploadimgthumb/48b702eb-7a24-4fa9-aa52-bcc8b97c8fbd.png" class="img-responsive center-block"></a><br></div><br><h2>完结</h2><br><p>写到这里这篇总结就结束了，也许有很多写的不到位的地方，也有一些专业用词不严谨的地方，希望看到的读者可以和我一起交流，我也非常乐意我的总结可以给 刚刚学会编程需要调试的同学受用，再此之前我一直在寻找一篇从头到尾的调试教学文章，我一直没有找到，要么是一点点的片段讲解，要么是专讲js断点调试，所以索性后来就直接看了 Chrome Developer Tools 的英文官方文档，并结合自己的一些小使用心得总结出此文，希望受到指点和修正 也希望可以帮助一些同学~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;h2&gt;引言&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;原文出处：&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href=&quot;http://www.igeekbar.com/igeekbar/post/156.htm&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Cayley的编程之路&lt;/a&gt;&lt;/p&gt;“工欲善其事，必先利其器” &lt;br&gt;没错，这句话个人觉得说的特别有道理，举个例子来说吧，厉害的化妆师都有一套非常专业的刷子，散粉刷负责定妆，眼影刷负责打眼影，各司其职，有了专业的工具才能干专业的事，这个灵感要来源于之前我想买化妆品时，店里的海报标语，由此联想到，如果你想在某个事情上做好
    
    </summary>
    
    
  </entry>
  
</feed>
