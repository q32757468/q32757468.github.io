<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ranshan丶</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://q32757468.github.io/"/>
  <updated>2019-05-23T11:50:27.463Z</updated>
  <id>https://q32757468.github.io/</id>
  
  <author>
    <name>hsl</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于使用flex布局遇到的一个小问题</title>
    <link href="https://q32757468.github.io/2019/05/23/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8flex%E5%B8%83%E5%B1%80%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%B8%AA%E5%B0%8F%E9%97%AE%E9%A2%98/"/>
    <id>https://q32757468.github.io/2019/05/23/关于使用flex布局遇到的一个小问题/</id>
    <published>2019-05-23T10:52:16.000Z</published>
    <updated>2019-05-23T11:50:27.463Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;昨天在给我的课程设计的网站做底部信息的时候遇到了一个问题，就是我给一个子元素div设置了固定的宽度，但是当我页面宽度发生变化的时候，这个div的宽度也会发生变化，毕竟我设置的是固定的宽度，所以这肯定不是我想要的效果，今天和昨天经过测试，现在终于把问题解决了，问题是由于flex引起的。<br><a id="more"></a><br>让我们先看我的一个测试的代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">.big&#123;</span></span><br><span class="line"><span class="undefined">    width: 100%;</span></span><br><span class="line"><span class="undefined">    height: 500px;</span></span><br><span class="line"><span class="undefined">    background-color: blue;</span></span><br><span class="line"><span class="undefined">    display: flex;</span></span><br><span class="line"><span class="undefined">    border: 2px solid #000;</span></span><br><span class="line"><span class="undefined">    justify-content: center;</span></span><br><span class="line"><span class="undefined">    align-items: center;</span></span><br><span class="line"><span class="undefined">    margin: 0 auto;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">.sm&#123;</span></span><br><span class="line"><span class="undefined">    width: 1200px;//这里是一个固定的宽度</span></span><br><span class="line"><span class="undefined">    height: 400px;</span></span><br><span class="line"><span class="undefined">    background-color: red;</span></span><br><span class="line"><span class="undefined">    text-align: center;</span></span><br><span class="line"><span class="undefined">    border: 3px solid yellow;//加了一个黄色边框，方便观察</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"big"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sm"</span>&gt;</span>这是测试的内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><p>按照我一开始的想法，既然设置了固定的宽度，应该就不会再发生改变了，即使是flex也不能改变它<br>可是我们再看看效果图：<br><img src="http://m.qpic.cn/psb?/V131x4904WMIoW/2ZasPfoD4Z310yCmjZUQP0cMgeDC6y.Fo6n5a.5emN8!/b/dFMBAAAAAAAA&bo=cwKaAwAAAAADB8o!&rf=viewer_4"><br>很明显，里面的子元素的宽度也因为父元素的宽度变小了而变小了。</p><p>我的第一次尝试是给它加一个<code>min-width=1200px</code>，我们再看看效果：<br><img src="http://m.qpic.cn/psb?/V131x4904WMIoW/2ZasPfoD4Z310yCmjZUQP0cMgeDC6y.Fo6n5a.5emN8!/b/dFMBAAAAAAAA&bo=cwKaAwAAAAADB8o!&rf=viewer_4"><br><strong>还是一样，没有发生任何变化。那究竟要怎么解决这个问题呢，经过我的各种尝试和猜想，最终还是把问题解决了：</strong><br>那么要如何解决这个问题呢，看我解决后的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">.big&#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 500px;</span><br><span class="line">    background-color: blue;</span><br><span class="line">    display: flex;</span><br><span class="line">    border: 2px solid #000;</span><br><span class="line">    /* justify-content: center; */  //1、首先就是不能用这个属性</span><br><span class="line">    align-items: center;</span><br><span class="line">    margin: 0 auto;</span><br><span class="line">&#125;</span><br><span class="line">.sm&#123;</span><br><span class="line">    width: 1200px;</span><br><span class="line">    min-width: 1200px; //3、同时要加上最小宽度</span><br><span class="line">    height: 400px;</span><br><span class="line">    background-color: red;</span><br><span class="line">    text-align: center;</span><br><span class="line">    margin: 0 auto;    //2、只能使用这个来使子元素居中</span><br><span class="line">    border: 3px solid yellow;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class=&quot;big&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;sm&quot;&gt;21413423&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure></p><p>我们再来看看解决后的效果图：<br><img src="http://m.qpic.cn/psb?/V131x4904WMIoW/mxkasvESB5M2s1EObpBHaY2h9PTMMEAIeIHgeyPzb50!/b/dDABAAAAAAAA&bo=TAOaAwAAAAADB*Q!&rf=viewer_4"><br>这次我们就可以看到，里面的内容没有被缩小了，问题终于得到了解决。</p><p><strong>其实还有一种办法可以避免这种问题，就是最外层子元素不使用flex布局，或者是不设置百分比的宽度，这样也不会出现这种问题，但是在有些情况下使用flex明显要方便很多，看实际情况选择哪种处理办法吧。</strong></p><p><strong>更新补充</strong><br>后来我又想到了一个相对较好的解决办法，那就使最外层的div可以设置为百分比的宽度，但是不设置flex，我们对要布局的子div给它再加一个父元素，让它变成孙子，我们给他加的这个div让他成为父元素，并且给这个父元素设置flex和固定的我们想要的宽度，这个时候通过父元素的flex给孙子元素flex布局就也不会出现这种问题了，这也是一种不错的解决办法（<strong>推荐</strong>）</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>flex虽然好用，很多方面用起来很方便，但是也存在很多问题我还不知道，所以使用的时候要提前做好规划，避免出现问题，我的轮播图bug就是由于flex布局引起的，但是不知道是不是这个原因。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;昨天在给我的课程设计的网站做底部信息的时候遇到了一个问题，就是我给一个子元素div设置了固定的宽度，但是当我页面宽度发生变化的时候，这个div的宽度也会发生变化，毕竟我设置的是固定的宽度，所以这肯定不是我想要的效果，今天和昨天经过测试，现在终于把问题解决了，问题是由于flex引起的。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>初识cookie</title>
    <link href="https://q32757468.github.io/2019/05/21/%E5%88%9D%E8%AF%86cookie/"/>
    <id>https://q32757468.github.io/2019/05/21/初识cookie/</id>
    <published>2019-05-21T07:24:59.000Z</published>
    <updated>2019-05-21T08:09:02.433Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;即使在我学习前端知识前，作为一个网络用户，我也见过cookie，但是它究竟是干什么的，有什么用，这是我以前所不知道的，但是我现在作为一名前端学习者，那么就要了解并学习cookie的相关知识，并且会使用它。<br><a id="more"></a></p></blockquote><h3 id="什么是cookie？"><a href="#什么是cookie？" class="headerlink" title="什么是cookie？"></a>什么是cookie？</h3><p>这是百度百科上的一段话：Cookie，有时也用其复数形式 Cookies，指某些网站为了辨别用户身份、进行 session 跟踪而储存在用户本地终端上的数据（通常经过加密）。定义于 RFC2109 和 2965 中的都已废弃，最新取代的规范是 RFC6265 [1]  。（可以叫做浏览器缓存）</p><p>我们就可以了解到cookie的作用，cookie就是存储了一些信息在本地，并且有一定的存在时间，cookie有这样的功能，就能给用户带来很多遍历，包括不用重复登录之类的。</p><h3 id="cookie的一些特点"><a href="#cookie的一些特点" class="headerlink" title="cookie的一些特点"></a>cookie的一些特点</h3><ul><li>cookie的生命周期：<br>·默认情况下是一次会话，也就是直到浏览器被关闭。<br>·如果通过expires设置了时间，并且时间还没有过期，那么关闭浏览器后下次再打开浏览器，cookie还是存在的。<br>·如果通过expires设置了时间，但是过期了，那么就会立即删除这个cookie，所以要删除一个cookie，只要让他过期就好了。</li></ul><ul><li><p>cookie数据的格式<br>·cookie默认是不会保存任何数据的。<br><code>document.cookie=&quot;name=hsl&quot;</code>可以通过这种方式来添加cookie<br>·在设置cookie时只能一条一条的设置，不能一条命令设置多条cookie。<br>cookie有大小和个数的限制：<br>个数：20~50<br>大小：4kb左右</p></li><li><p>cookie的作用范围<br>·不同浏览器之间的cookie不能共用<br>·同一浏览器中，存放cookie的路径的子目录可以访问保存的cookie，但是父目录不能。<br><code>document.cookie=&quot;name=hsl;path=/;&quot;</code>但是可以通过加上path等于根目录使网站下的所有目录都能访问cookie。<br>·默认情况下二级域名之间的cookie不能相互访问，但是设置了主域名之后就可以，<code>domain=hslweb.net</code>。</p></li></ul><h3 id="实际操作一下"><a href="#实际操作一下" class="headerlink" title="实际操作一下"></a>实际操作一下</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> data=<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    data.setDate(data.getDate()+<span class="number">1</span>);<span class="comment">//设置时间</span></span><br><span class="line">    <span class="built_in">document</span>.cookie=<span class="string">"name=hsl;path=/;expires="</span>+data.toGMTString()+<span class="string">";"</span>;<span class="comment">//创建一个cookie，设置了路径以及过期的时间为后一天。</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>cookie的创建与设置还是很简单的，但是哦cookie的作用却很强大，要好好使用。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;即使在我学习前端知识前，作为一个网络用户，我也见过cookie，但是它究竟是干什么的，有什么用，这是我以前所不知道的，但是我现在作为一名前端学习者，那么就要了解并学习cookie的相关知识，并且会使用它。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>通过post方式上传文件</title>
    <link href="https://q32757468.github.io/2019/05/21/%E9%80%9A%E8%BF%87post%E6%96%B9%E5%BC%8F%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/"/>
    <id>https://q32757468.github.io/2019/05/21/通过post方式上传文件/</id>
    <published>2019-05-21T02:21:09.000Z</published>
    <updated>2019-05-21T03:19:52.215Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这次学习一下通过表单得到post方式来向后端上传文件，以及使用表单来上传文件的注意点及注意事项。<br><a id="more"></a><br>先上代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"post上传文件.php"</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"upFile"</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"tj"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><ul><li>这里之所以使用post方式上传而不使用get方式上传是因为get方式上传有文件大小方面的限制，最多2000个字符，所以使用post</li><li>很正常的一个表单，设置了控件类型以及与后端交互时要用到的name</li><li>但是要注意的是上传文件时除了要设置表单类型为 <code>file</code>之外，还需要给form添加一个<code>enctype</code>属性，并且把它的值设为<code>multipart/form-data</code>，只有这样才能正常上传。</li></ul><p>我们再来看看php部分的代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">print_r($_FILES);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">$fileInfo=$_FILES[<span class="string">'upFile'</span>];</span><br><span class="line">print_r($fileInfo);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>这个时候我们就不能再使用post方式来获取文件的内容了，我们需要用file方式。<br>我么再来看看打印的结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Array ( [tj] =&gt; 提交 ) //这个时候post变量获取到的东西就不是我们想要的东西了。</span><br><span class="line">Array ( [upFile] =&gt; Array ( [name] =&gt; 后面问题.png [type] =&gt; image/png [tmp_name] =&gt; E:\xampp\tmp\phpDC76.tmp [error] =&gt; 0 [size] =&gt; 32458 ) )  //而通过file变量获取到的数组里面就有我们想要的东西</span><br><span class="line">Array ( [name] =&gt; 后面问题.png [type] =&gt; image/png [tmp_name] =&gt; E:\xampp\tmp\phpDC76.tmp [error] =&gt; 0 [size] =&gt; 32458 )</span><br><span class="line">//然后再从数组中取出我们想要的文件，就可以得到文件的信息。</span><br></pre></td></tr></table></figure></p><ul><li>但是其实这个时候也不是我们想要的结果，因为我们会发现 <code>E:\xampp\tmp\</code>这个目录下是空的，并没有我们上传的文件</li><li>这是因为这其实是一个临时文件夹，如果我们需要永久保存我们想要的内容我们需要将文件保存到我们自己建立的一个文件夹中。</li><li>这个时候我们就需要使用到这个函数<code>move_uploaded_file(file,newloc)</code><br>第一个参数规定文件的原路径，第二个参数规定文件的新路径已经文件名。</li></ul><p>下面将代码改进一下：<br>加上一行代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">move_uploaded_file($fileInfo[<span class="string">'tmp_name'</span>],<span class="string">"./test_imgs/"</span>.$fileInfo[<span class="string">'name'</span>]);</span><br></pre></td></tr></table></figure></p><p>这个时候我们再看设置的那个新路径，就已经成功将文件移动过来了。</p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>上传文件的表单与其他表单有些许不一样，要多注意，获取内容的方法也不太一样，并且要注意<code>move_uploaded_file</code>函数的使用，第二个参数写相对路径的时候，如果是相对与当前路径开始的话一定不能遗漏了<code>./</code>来表示当前路径，比如我刚开始这样写就报错：<code>&quot;test_imgs/&quot;</code>,而这样写就是对的:<code>&quot;./test_imgs/&quot;</code>所以以后要多注意。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;这次学习一下通过表单得到post方式来向后端上传文件，以及使用表单来上传文件的注意点及注意事项。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>jQuery中eq与get的区别</title>
    <link href="https://q32757468.github.io/2019/05/20/jQuery%E4%B8%ADeq%E4%B8%8Eget%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://q32757468.github.io/2019/05/20/jQuery中eq与get的区别/</id>
    <published>2019-05-20T11:57:14.000Z</published>
    <updated>2019-05-20T12:22:23.228Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在刚开始学习使用jQuery的时候就遇到过类似的问题，没有完全理解到什么是jQuery对象以它与Element对象的区别。而jQuery中的eq方法与get方法正好也是这方面的区别，这次来好好把他们区分一下。<br><a id="more"></a><br>先上一段html代码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test1"</span>&gt;</span>这是一个测试div <span class="tag">&lt;<span class="name">span</span>&gt;</span>这是一个子元素<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test2"</span>&gt;</span>这是第二个测试div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><p>js代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">// 通过这个可以看出使用核心函数选择div会将它转化成一个jQuery对象，jQuery对象的本质是一个数组对象，有length属性</span></span><br><span class="line">             <span class="built_in">console</span>.log(</span><br><span class="line">             $(<span class="string">'div'</span>)</span><br><span class="line">             );</span><br><span class="line">            <span class="comment">//  而我们通过get方法获取到的对象其实是一个Element对象</span></span><br><span class="line">             <span class="built_in">console</span>.log(</span><br><span class="line">             $(<span class="string">'div'</span>).get(<span class="number">0</span>)</span><br><span class="line">             );</span><br><span class="line">            <span class="comment">//  所以我们就可以对它使用js原生的方法来获取它的子节点</span></span><br><span class="line">            <span class="built_in">console</span>.log(</span><br><span class="line">             $(<span class="string">'div'</span>).get(<span class="number">0</span>).children[<span class="number">0</span>]</span><br><span class="line">             );</span><br><span class="line">            <span class="comment">//  而这种写法获取到的东西是和get所获取到的东西是一模一样的</span></span><br><span class="line">             <span class="built_in">console</span>.log(</span><br><span class="line">             $(<span class="string">'div'</span>)[<span class="number">1</span>]</span><br><span class="line">             );</span><br><span class="line">            <span class="comment">//  而通过eq获取到的其实是一个jQuery对象</span></span><br><span class="line">             <span class="built_in">console</span>.log(</span><br><span class="line">                 $(<span class="string">'div'</span>).eq(<span class="number">0</span>)</span><br><span class="line">             );</span><br><span class="line">            <span class="comment">//  我们亦可以通过jQuery的核心函数将Element对象转化成jQuery对象</span></span><br><span class="line">             <span class="built_in">console</span>.log(</span><br><span class="line">                $($(<span class="string">'div'</span>).get(<span class="number">0</span>))</span><br><span class="line">             );            </span><br><span class="line">        &#125;)   </span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>我们再来看看输出的结果:<br><img src="http://m.qpic.cn/psb?/V131x4904WMIoW/s838PLLQqQDO8AAtICFTR2AbGzJ*Q9WLnphZ0VhyC4k!/b/dLYAAAAAAAAA&bo=UwdMAwAAAAADBzk!&rf=viewer_4"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h3><p>eq与get的区别十分的明显,一个获取到的是jQuery对象,一个获取到的是Element对象,而我们的jQuery的方法只能对jQuery对象使用,所以我们要特别注意我们获取到的是什么对象,当然我们也可以通过jQuery核心函数将Element对象转化为jQuery对象.</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在刚开始学习使用jQuery的时候就遇到过类似的问题，没有完全理解到什么是jQuery对象以它与Element对象的区别。而jQuery中的eq方法与get方法正好也是这方面的区别，这次来好好把他们区分一下。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>flex使用的小demo</title>
    <link href="https://q32757468.github.io/2019/05/18/flex%E4%BD%BF%E7%94%A8%E7%9A%84%E5%B0%8Fdemo/"/>
    <id>https://q32757468.github.io/2019/05/18/flex使用的小demo/</id>
    <published>2019-05-18T02:20:25.000Z</published>
    <updated>2019-05-18T03:15:54.552Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前面学习了flex的相关知识，现在就这些知识运用到实例，通过写一个导航栏和一个搜索框试试效果怎么样。<br><a id="more"></a></p></blockquote><h3 id="通过flex布局一个等分的导航栏"><a href="#通过flex布局一个等分的导航栏" class="headerlink" title="通过flex布局一个等分的导航栏"></a>通过flex布局一个等分的导航栏</h3><p>代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">*&#123;</span></span><br><span class="line"><span class="undefined">    margin: 0;</span></span><br><span class="line"><span class="undefined">    padding: 0;</span></span><br><span class="line"><span class="undefined">    list-style: none;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">nav&#123;</span></span><br><span class="line"><span class="undefined">    width: 40%;</span></span><br><span class="line"><span class="undefined">    height: 50px;</span></span><br><span class="line"><span class="undefined">    background: #ccc;</span></span><br><span class="line"><span class="undefined">    margin: 0 auto;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">nav&gt;ul&#123;</span></span><br><span class="line"><span class="undefined">    display: flex;</span></span><br><span class="line"><span class="undefined">    height: 100%;</span></span><br><span class="line"><span class="undefined">    width: 100%;</span></span><br><span class="line"><span class="undefined">    flex-flow: row nowrap;</span></span><br><span class="line"><span class="undefined">    /* justify-content: space-around; */</span></span><br><span class="line"><span class="undefined">    align-items: center;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">/* 通过给子元素使用flex-grow会影响到父元素设置的justify-content，但是无论使用哪种方法都能达到相同的效果 */</span></span><br><span class="line"><span class="undefined">ul&gt;li&#123;</span></span><br><span class="line"><span class="undefined">    text-align: center;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">/* 以下代码其实都可以不用，只通过一个justify-content: space-between</span></span><br><span class="line"><span class="undefined">就能达到这种效果 */</span></span><br><span class="line"><span class="undefined">ul&gt;li:nth-child(1)&#123;</span></span><br><span class="line"><span class="undefined">    flex: 0 0 auto;</span></span><br><span class="line"><span class="undefined">    text-align: center;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">ul&gt;li:nth-child(2)&#123;</span></span><br><span class="line"><span class="undefined">    flex: auto;</span></span><br><span class="line"><span class="undefined">    text-align: center;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">ul&gt;li:nth-child(3)&#123;</span></span><br><span class="line"><span class="undefined">    flex: auto;</span></span><br><span class="line"><span class="undefined">    text-align: center;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">ul&gt;li:nth-child(4)&#123;</span></span><br><span class="line"><span class="undefined">    flex: auto;</span></span><br><span class="line"><span class="undefined">    flex: 0 0 auto;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>栏目一<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>栏目二<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>栏目三<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>栏目四<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>效果图：<br><img src="http://m.qpic.cn/psb?/V131x4904WMIoW/9aN0kH42p89ZshFZG445MMLUZbbKvh2kT0Mrnf*1Ic0!/b/dL8AAAAAAAAA&bo=gAcSBAAAAAADB7M!&rf=viewer_4"></p><h3 id="通过flex布局一个搜索框"><a href="#通过flex布局一个搜索框" class="headerlink" title="通过flex布局一个搜索框"></a>通过flex布局一个搜索框</h3><p>代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">*&#123;</span></span><br><span class="line"><span class="undefined">    margin: 0;</span></span><br><span class="line"><span class="undefined">    padding: 0;</span></span><br><span class="line"><span class="undefined">    list-style: none;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">.search&#123;</span></span><br><span class="line"><span class="undefined">    margin: 0 auto;</span></span><br><span class="line"><span class="undefined">    margin-top: 20px;</span></span><br><span class="line"><span class="undefined">    width: 500px;</span></span><br><span class="line"><span class="undefined">    display: flex;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">input&#123;</span></span><br><span class="line"><span class="undefined">    /* 因为默认另一个button的flex-grow为0，</span></span><br><span class="line"><span class="undefined">    只要设置这个输入框的flex-grow为1则可以占满剩下的宽度 */</span></span><br><span class="line"><span class="undefined">    flex-grow: 1;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">button&#123;</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="undefined">    border: 0;</span></span><br><span class="line"><span class="undefined">    background-color: red;</span></span><br><span class="line"><span class="undefined">    outline: none;</span></span><br><span class="line"><span class="undefined">    height: 30px;</span></span><br><span class="line"><span class="undefined">    /* 当我们把button的高度调高之后，可以发现输入框的高度也一起随之升高了</span></span><br><span class="line"><span class="undefined">    如果想要改变这种效果可以对输入框设置align-self</span></span><br><span class="line"><span class="undefined">    */</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"search"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>点击搜索<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>效果图：<br><img src="http://m.qpic.cn/psb?/V131x4904WMIoW/3.gm02VccVxwuCAERv6LYnJUGtKjFXsv2EDCsdffn14!/b/dLYAAAAAAAAA&bo=gAcSBAAAAAADB7M!&rf=viewer_4"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>使用flex布局真的好轻松，好方便啊，再也不用为各种繁琐的事情改开改去了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;前面学习了flex的相关知识，现在就这些知识运用到实例，通过写一个导航栏和一个搜索框试试效果怎么样。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CSS3_flex的使用</title>
    <link href="https://q32757468.github.io/2019/05/18/CSS3-flex%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://q32757468.github.io/2019/05/18/CSS3-flex的使用/</id>
    <published>2019-05-18T01:44:04.000Z</published>
    <updated>2019-05-18T02:18:20.489Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前段时间有了解到flex布局，flex布局是W3C再2009年提出的一种新的方案，且现在已经兼容所有的浏览器，传统的布局方式在有些时候会比较麻烦，且兼容性不是特别好，那么使用flex布局就能解决很多问题，这次来学习以下flex布局，并加以使用，以后熟练使用就能大大提高我们的布局效率。<br><a id="more"></a></p></blockquote><h3 id="Flex布局是什么？"><a href="#Flex布局是什么？" class="headerlink" title="Flex布局是什么？"></a>Flex布局是什么？</h3><p>Flex是Flexible Box的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。<br>任何一个容器都可以指定为Flex布局。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">  display: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>行内元素也可以使用Flex布局。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">  display: inline-flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>Webkit内核的浏览器，必须加上-webkit前缀。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">  display: -webkit-flex; /* Safari */</span><br><span class="line">  display: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><em>注意:设为Flex布局以后，子元素的float、clear和vertical-align属性将失效。</em></p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>采用Flex布局的元素，称为Flex容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称”项目”。<br><img src="https://www.runoob.com/wp-content/uploads/2015/07/3791e575c48b3698be6a94ae1dbff79d.png"><br>容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。<br>项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size。</p><h3 id="容器的属性"><a href="#容器的属性" class="headerlink" title="容器的属性"></a>容器的属性</h3><p>容器有以下6个属性：</p><ul><li>flex-direction</li><li>flex-wrap</li><li>flex-flow</li><li>justify-content</li><li>align-items</li><li>align-content</li></ul><h4 id="flex-direction属性"><a href="#flex-direction属性" class="headerlink" title="flex-direction属性"></a>flex-direction属性</h4><p>flex-direction属性决定主轴的方向（即项目的排列方向）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">  flex-direction: row | row-reverse | column | column-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://www.runoob.com/wp-content/uploads/2015/07/0cbe5f8268121114e87d0546e53cda6e.png"></p><p>可能有4个值：</p><ul><li>row（默认值）：主轴为水平方向，起点在左端。</li><li>row-reverse：主轴为水平方向，起点在右端。</li><li>column：主轴为垂直方向，起点在上沿。</li><li>column-reverse：主轴为垂直方向，起点在下沿。</li></ul><h4 id="flex-wrap属性"><a href="#flex-wrap属性" class="headerlink" title="flex-wrap属性"></a>flex-wrap属性</h4><p>默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义，如果一条轴线排不下，如何换行。<br><img src="https://www.runoob.com/wp-content/uploads/2015/07/903d5b7df55779c03f2687a7d4d6bcea.png"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">  flex-wrap: nowrap | wrap | wrap-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>它可能取三个值:</p><ul><li>nowrap（默认）：不换行。<br><img src="https://www.runoob.com/wp-content/uploads/2015/07/9da1f23965756568b4c6ea7124db7b9a.png"></li><li>wrap：换行，第一行在上方。<br><img src="https://www.runoob.com/wp-content/uploads/2015/07/3c6b3c8b8fe5e26bca6fb57538cf72d9.jpg"></li><li>wrap-reverse：换行，第一行在下方。<br><img src="https://www.runoob.com/wp-content/uploads/2015/07/fb4cf2bab8b6b744b64f6d7a99cd577c.jpg"></li></ul><h4 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h4><p>flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">  flex-flow: &lt;flex-direction&gt; &lt;flex-wrap&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="justify-content属性"><a href="#justify-content属性" class="headerlink" title="justify-content属性"></a>justify-content属性</h4><p>justify-content属性定义了项目在主轴上的对齐方式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">  justify-content: flex-start | flex-end | center | space-between | space-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://www.runoob.com/wp-content/uploads/2015/07/c55dfe8e3422458b50e985552ef13ba5.png"></p><ul><li>可能取5个值，与主轴方向有关（以下假设主轴从左向右）：</li><li>flex-start（默认值）：左对齐</li><li>flex-end：右对齐</li><li>center： 居中</li><li>space-between：两端对齐，项目之间的间隔都相等。  （在做菜单栏导航栏等需要间隔相等的项目中十分有用）</li><li>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li></ul><h4 id="align-items属性"><a href="#align-items属性" class="headerlink" title="align-items属性"></a>align-items属性</h4><p>align-items属性定义项目在交叉轴上如何对齐。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">  align-items: flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://www.runoob.com/wp-content/uploads/2015/07/2b0c39c7e7a80d5a784c8c2ca63cde17.png"></p><p>可能取5个值，与交叉轴方向有关（以下假设主轴从上向下）</p><ul><li>flex-start：交叉轴的起点对齐。</li><li>flex-end：交叉轴的终点对齐。</li><li>center：交叉轴的中点对齐。</li><li>baseline: 项目的第一行文字的基线对齐。</li><li>stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li></ul><h4 id="align-content属性"><a href="#align-content属性" class="headerlink" title="align-content属性"></a>align-content属性</h4><p>align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">  align-content: flex-start | flex-end | center | space-between | space-around | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://www.runoob.com/wp-content/uploads/2015/07/f10918ccb8a13247c9d47715a2bd2c33.png"><br>该属性可能取6个值：</p><ul><li>flex-start：与交叉轴的起点对齐。</li><li>flex-end：与交叉轴的终点对齐。</li><li>center：与交叉轴的中点对齐。</li><li>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。</li><li>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li><li>stretch（默认值）：轴线占满整个交叉轴。</li></ul><h3 id="项目的属性"><a href="#项目的属性" class="headerlink" title="项目的属性"></a>项目的属性</h3><p>以下6个属性设置在项目上。</p><ul><li>order</li><li>flex-grow</li><li>flex-shrink</li><li>flex-basis</li><li>flex</li><li>align-self</li></ul><h4 id="order属性"><a href="#order属性" class="headerlink" title="order属性"></a>order属性</h4><p>order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.item &#123;</span><br><span class="line">  order: &lt;integer&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://www.runoob.com/wp-content/uploads/2015/07/59e399c72daafcfcc20ede36bf32f266.png"></p><h4 id="flex-grow属性"><a href="#flex-grow属性" class="headerlink" title="flex-grow属性"></a>flex-grow属性</h4><p>flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.item &#123;</span><br><span class="line">  flex-grow: &lt;number&gt;; /* default 0 */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://www.runoob.com/wp-content/uploads/2015/07/f41c08bb35962ed79e7686f735d6cd78.png"><br>如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p><h4 id="flex-shrink属性"><a href="#flex-shrink属性" class="headerlink" title="flex-shrink属性"></a>flex-shrink属性</h4><p>flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.item &#123;</span><br><span class="line">  flex-shrink: &lt;number&gt;; /* default 1 */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://www.runoob.com/wp-content/uploads/2015/07/240d3e960043a729bb3ff5e34987904f.jpg"><br>如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。<br>负值对该属性无效。</p><h4 id="flex-basis属性"><a href="#flex-basis属性" class="headerlink" title="flex-basis属性"></a>flex-basis属性</h4><p>flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.item &#123;</span><br><span class="line">  flex-basis: &lt;length&gt; | auto; /* default auto */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。</p><h4 id="flex属性"><a href="#flex属性" class="headerlink" title="flex属性"></a>flex属性</h4><p>flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.item &#123;</span><br><span class="line">  flex: none | [ &lt;&apos;flex-grow&apos;&gt; &lt;&apos;flex-shrink&apos;&gt;? || &lt;&apos;flex-basis&apos;&gt; ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。<br>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p><h4 id="align-self属性"><a href="#align-self属性" class="headerlink" title="align-self属性"></a>align-self属性</h4><p>align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.item &#123;</span><br><span class="line">  align-self: auto | flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://www.runoob.com/wp-content/uploads/2015/07/55b19171b8b6b9487d717bf2ecbba6de.png"><br>该属性可能取6个值，除了auto，其他都与align-items属性完全一致。</p><p>文章转载自：<a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;前段时间有了解到flex布局，flex布局是W3C再2009年提出的一种新的方案，且现在已经兼容所有的浏览器，传统的布局方式在有些时候会比较麻烦，且兼容性不是特别好，那么使用flex布局就能解决很多问题，这次来学习以下flex布局，并加以使用，以后熟练使用就能大大提高我们的布局效率。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>jQuery学习（动画效果）</title>
    <link href="https://q32757468.github.io/2019/05/15/jQuery%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C%EF%BC%89/"/>
    <id>https://q32757468.github.io/2019/05/15/jQuery学习（动画效果）/</id>
    <published>2019-05-15T11:30:50.000Z</published>
    <updated>2019-05-15T12:32:29.660Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这次总结以下jQuery中所有自带的动画效果以及jQuery中的自定义动画，以及动画1的其他一些相关方法，帮助我们更好的学习和使用jQuery中的动画。前面已经学习使用过大部分自带动画了，这次着重讲一下自定义动画与其他方法。<br><a id="more"></a></p></blockquote><h3 id="显示、隐藏动画"><a href="#显示、隐藏动画" class="headerlink" title="显示、隐藏动画"></a>显示、隐藏动画</h3><p>show([s,[e],[fn]])</p><ul><li>显示动画</li><li>内部实现原理根据当前操作的元素是块级还是行内决定, 块级内部调用display:block;,行内内部调用display:inline;</li></ul><hr><p> hide([s,[e],[fn]])</p><ul><li>隐藏动画</li></ul><hr><p>toggle([spe],[eas],[fn])</p><ul><li>切换动画(显示变隐藏,隐藏变显示)</li></ul><hr><p>注意事项:</p><ul><li>show(1000, function () {};) 第一个参数单位是毫秒, 1000毫秒等于1秒</li><li>默认的动画时长是400毫秒</li><li>除了指定毫秒以外还可以指定三个预设参数 slow、normal、fast</li><li>slow本质是600毫秒</li><li>normal本质是400毫秒</li><li>fast本质是200毫秒</li></ul><h3 id="展开、收起动画"><a href="#展开、收起动画" class="headerlink" title="展开、收起动画"></a>展开、收起动画</h3><p>参数、注意事项和显示隐藏动画一模一样, 只不过动画效果不一样而已</p><ul><li>slideDown([s],[e],[fn])<br>展开动画</li><li>slideUp([s,[e],[fn]])<br>收起动画</li><li>slideToggle([s],[e],[fn])<br>切换动画(展开变收起,收起变展开)<br>参数、注意事项和显示隐藏动画一模一样, 只不过动画效果不一样而已</li><li>fadeIn([s],[e],[fn])<br>淡入动画</li><li>fadeOut([s],[e],[fn])<br>淡出动画</li><li>fadeToggle([s,[e],[fn]])<br>切换动画(显示变淡出,不显示变淡入)</li><li>fadeTo([[s],o,[e],[fn]])<br>淡入到指定透明度动画<br>可以通过第二个参数,淡入到指定的透明度(取值范围0~1)</li></ul><h3 id="自定义动画"><a href="#自定义动画" class="headerlink" title="自定义动画"></a>自定义动画</h3><p>有时候自带的这些动画不能完全满足我们的需求，我们就需要使用到自定义动画来帮助我们完成动画。</p><p>animate(p,[s],[e],[fn])</p><ul><li>第一个参数: 接收一个对象, 可以在对象中修改属性</li><li>第二个参数: 指定动画时长</li><li>第三个参数: 指定动画节奏, 默认就是swing</li><li>第四个参数: 动画执行完毕之后的回调函数<br>下面是一个自定义动画的例子：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.test</span>&#123;</span></span><br><span class="line"><span class="undefined">    background: red;</span></span><br><span class="line"><span class="undefined">    width: 200px;</span></span><br><span class="line"><span class="undefined">    height: 200px;</span></span><br><span class="line"><span class="undefined">    border-radius: 50%;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 使圆变大</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">'.test'</span>).animate(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 可以同时设置多个值的变化</span></span></span><br><span class="line"><span class="undefined">            width:400,</span></span><br><span class="line"><span class="undefined">            height:400,</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 可以设置动画节奏</span></span></span><br><span class="line"><span class="javascript">        &#125;,<span class="number">2000</span>,<span class="string">'Linear'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 可以链式设置多个动画</span></span></span><br><span class="line"><span class="javascript">            alert(<span class="string">'变大执行完毕'</span>)</span></span><br><span class="line"><span class="undefined">        &#125;).animate(&#123;</span></span><br><span class="line"><span class="undefined">            marginLeft:200</span></span><br><span class="line"><span class="javascript">        &#125;,<span class="number">2000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">'右移执行完毕'</span>)</span></span><br><span class="line"><span class="undefined">        &#125;).animate(&#123;</span></span><br><span class="line"><span class="javascript">            marginLeft:<span class="string">"800"</span></span></span><br><span class="line"><span class="javascript">        &#125;,<span class="number">2000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">'完成'</span>)</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>要注意的一点:<br>每次开始运动都必须是初始位置或者初始状态,如果想在上一次位置或者状态下再次进行动画可以使用累加动画,上面这个例子就是圆先变大,然后在变大之前的圆心处右移,然后再回到圆心处再次右移,所以要使用累计动画的方式来设置参数比如说<code>{marginLeft:&quot;+=200&quot;}</code></p><h3 id="动画队列"><a href="#动画队列" class="headerlink" title="动画队列"></a>动画队列</h3><ul><li>多个动画方法链式编程,会等到前面的动画执行完毕再依次执行后续动画</li><li>但是如果后面紧跟一个非动画方法则会被立即执行</li><li>如果想颜色再动画执行完毕之后设置, 1.使用回调 2.使用动画队列</li><li>注意点:<br>动画队列方法queue()后面不能继续直接添加queue()<br>如果想继续添加必须在上一个queue()方法中next()方法</li></ul><h3 id="动画相关方法"><a href="#动画相关方法" class="headerlink" title="动画相关方法"></a>动画相关方法</h3><ul><li>delay(d,[q])<br>设置动画延迟时长</li><li>stop([c],[j])<br>停止指定元素上正在执行的动画<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 立即停止当前动画, 继续执行后续的动画</span><br><span class="line">// $(&quot;div&quot;).stop();</span><br><span class="line">// $(&quot;div&quot;).stop(false);</span><br><span class="line">// $(&quot;div&quot;).stop(false, false);</span><br><span class="line"></span><br><span class="line">// 立即停止当前和后续所有的动画</span><br><span class="line">// $(&quot;div&quot;).stop(true);</span><br><span class="line">// $(&quot;div&quot;).stop(true, false);</span><br><span class="line"></span><br><span class="line">// 立即完成当前的, 继续执行后续动画</span><br><span class="line">// $(&quot;div&quot;).stop(false, true);</span><br><span class="line"></span><br><span class="line">// 立即完成当前的, 并且停止后续所有的</span><br><span class="line">$(&quot;div&quot;).stop(true, true);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;这次总结以下jQuery中所有自带的动画效果以及jQuery中的自定义动画，以及动画1的其他一些相关方法，帮助我们更好的学习和使用jQuery中的动画。前面已经学习使用过大部分自带动画了，这次着重讲一下自定义动画与其他方法。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Chrome插件(扩展)开发全攻略</title>
    <link href="https://q32757468.github.io/2019/05/15/Chrome%E6%8F%92%E4%BB%B6(%E6%89%A9%E5%B1%95)%E5%BC%80%E5%8F%91%E5%85%A8%E6%94%BB%E7%95%A5/"/>
    <id>https://q32757468.github.io/2019/05/15/Chrome插件(扩展)开发全攻略/</id>
    <published>2019-05-15T08:14:47.000Z</published>
    <updated>2019-05-15T11:27:39.605Z</updated>
    
    <content type="html"><![CDATA[<h1>写在前面</h1><p>这篇文章来自于转载，作者花了许多时间编写，写的也很详细，也很辛苦，我已经在文章尾部标明，也感谢作者的分享，<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/liuxianan/p/chrome-plugin-develop.html" target="_blank" rel="noopener">这是文章原地址</a>以下是作者原文：来源我花了将近一个多月的时间断断续续写下这篇博文，并精心写下完整demo，写博客的辛苦大家懂的，所以转载务必保留<a href="http://blog.haoji.me/chrome-plugin-develop.html" target="_blank">出处</a>。本文所有涉及到的大部分代码均在这个demo里面：<a href="https://github.com/sxei/chrome-plugin-demo" class="uri" target="_blank">https://github.com/sxei/chrome-plugin-demo</a> ，大家可以直接下载下来运行。</p><a id="more"></a><p>另外，本文图片较多，且图片服务器带宽有限，右下角的目录滚动监听必须等到图片全部加载完毕之后才会触发，所以请耐心等待加载完毕。</p><p>本文目录：</p><img src="https://images2015.cnblogs.com/blog/352797/201707/352797-20170711100228759-367621595.png"><p>demo部分截图：</p><img src="https://images2015.cnblogs.com/blog/352797/201707/352797-20170711100429118-918303767.png"><h1 id="前言">前言</h1><h2 id="什么是chrome插件">2.1. 什么是Chrome插件</h2><p>严格来讲，我们正在说的东西应该叫Chrome扩展(<code>Chrome Extension</code>)，真正意义上的Chrome插件是更底层的浏览器功能扩展，可能需要对浏览器源码有一定掌握才有能力去开发。鉴于Chrome插件的叫法已经习惯，本文也全部采用这种叫法，但读者需深知本文所描述的Chrome插件实际上指的是Chrome扩展。</p><p>Chrome插件是一个用Web技术开发、用来增强浏览器功能的软件，它其实就是一个由HTML、CSS、JS、图片等资源组成的一个<a href="https://developer.chrome.com/extensions/crx" target="_blank">.crx</a>后缀的压缩包.</p><p>个人猜测<code>crx</code>可能是<code>Chrome Extension</code>如下3个字母的简写：</p><img src="https://images2015.cnblogs.com/blog/352797/201707/352797-20170711100448275-555008903.png"><p>另外，其实不只是前端技术，Chrome插件还可以配合C++编写的dll动态链接库实现一些更底层的功能(NPAPI)，比如全屏幕截图。</p><img src="https://images2015.cnblogs.com/blog/352797/201707/352797-20170711100549040-348646504.png"><blockquote><p>由于安全原因，Chrome浏览器42以上版本已经陆续不再支持NPAPI插件，取而代之的是更安全的PPAPI。</p></blockquote><h2 id="学习chrome插件开发有什么意义">2.2. 学习Chrome插件开发有什么意义</h2><p>增强浏览器功能，轻松实现属于自己的“定制版”浏览器，等等。</p><p>Chrome插件提供了很多实用API供我们使用，包括但不限于：</p><ul><li>书签控制；</li><li>下载控制；</li><li>窗口控制；</li><li>标签控制；</li><li>网络请求控制，各类事件监听；</li><li>自定义原生菜单；</li><li>完善的通信机制；</li><li>等等；</li></ul><h2 id="为什么是chrome插件而不是firefox插件">2.3. 为什么是Chrome插件而不是Firefox插件</h2><ol><li>Chrome占有率更高，更多人用；</li><li>开发更简单；</li><li>应用场景更广泛，Firefox插件只能运行在Firefox上，而Chrome除了Chrome浏览器之外，还可以运行在所有webkit内核的国产浏览器，比如360极速浏览器、360安全浏览器、搜狗浏览器、QQ浏览器等等；</li><li>除此之外，Firefox浏览器也对Chrome插件的运行提供了一定的支持；</li></ol><h1 id="开发与调试">开发与调试</h1><p>Chrome插件没有严格的项目结构要求，只要保证本目录有一个<code>manifest.json</code>即可，也不需要专门的IDE，普通的web开发工具即可。</p><p>从右上角菜单-&gt;更多工具-&gt;扩展程序可以进入 插件管理页面，也可以直接在地址栏输入 <a href="chrome://extensions/" target="_blank">chrome://extensions</a> 访问。</p><img src="https://images2015.cnblogs.com/blog/352797/201707/352797-20170711101025931-1366345527.png"><p>勾选<code>开发者模式</code>即可以文件夹的形式直接加载插件，否则只能安装<code>.crx</code>格式的文件。Chrome要求插件必须从它的Chrome应用商店安装，其它任何网站下载的都无法直接安装，所以，其实我们可以把<code>crx</code>文件解压，然后通过开发者模式直接加载。</p><p>开发中，代码有任何改动都必须重新加载插件，只需要在插件管理页按下<code>Ctrl+R</code>即可，以防万一最好还把页面刷新一下。</p><h1 id="核心介绍">核心介绍</h1><h2 id="manifest.json">4.1. manifest.json</h2><p>这是一个Chrome插件最重要也是必不可少的文件，用来配置所有和插件相关的配置，必须放在根目录。其中，<code>manifest_version</code>、<code>name</code>、<code>version</code>3个是必不可少的，<code>description</code>和<code>icons</code>是推荐的。</p><p>下面给出的是一些常见的配置项，均有中文注释，完整的配置文档请戳<a href="https://developer.chrome.com/extensions/manifest" target="_blank">这里</a>。</p><pre class="javascript"><code class="hljs">{    <span class="hljs-comment">// 清单文件的版本，这个必须写，而且必须是2</span>    <span class="hljs-string">"manifest_version"</span>: <span class="hljs-number">2</span>,    <span class="hljs-comment">// 插件的名称</span>    <span class="hljs-string">"name"</span>: <span class="hljs-string">"demo"</span>,    <span class="hljs-comment">// 插件的版本</span>    <span class="hljs-string">"version"</span>: <span class="hljs-string">"1.0.0"</span>,    <span class="hljs-comment">// 插件描述</span>    <span class="hljs-string">"description"</span>: <span class="hljs-string">"简单的Chrome扩展demo"</span>,    <span class="hljs-comment">// 图标，一般偷懒全部用一个尺寸的也没问题</span>    <span class="hljs-string">"icons"</span>:    {        <span class="hljs-string">"16"</span>: <span class="hljs-string">"img/icon.png"</span>,        <span class="hljs-string">"48"</span>: <span class="hljs-string">"img/icon.png"</span>,        <span class="hljs-string">"128"</span>: <span class="hljs-string">"img/icon.png"</span>    },    <span class="hljs-comment">// 会一直常驻的后台JS或后台页面</span>    <span class="hljs-string">"background"</span>:    {        <span class="hljs-comment">// 2种指定方式，如果指定JS，那么会自动生成一个背景页</span>        <span class="hljs-string">"page"</span>: <span class="hljs-string">"background.html"</span>        <span class="hljs-comment">//"scripts": ["js/background.js"]</span>    },    <span class="hljs-comment">// 浏览器右上角图标设置，browser_action、page_action、app必须三选一</span>    <span class="hljs-string">"browser_action"</span>:     {        <span class="hljs-string">"default_icon"</span>: <span class="hljs-string">"img/icon.png"</span>,        <span class="hljs-comment">// 图标悬停时的标题，可选</span>        <span class="hljs-string">"default_title"</span>: <span class="hljs-string">"这是一个示例Chrome插件"</span>,        <span class="hljs-string">"default_popup"</span>: <span class="hljs-string">"popup.html"</span>    },    <span class="hljs-comment">// 当某些特定页面打开才显示的图标</span>    <span class="hljs-comment">/*"page_action":    {        "default_icon": "img/icon.png",        "default_title": "我是pageAction",        "default_popup": "popup.html"    },*/</span>    <span class="hljs-comment">// 需要直接注入页面的JS</span>    <span class="hljs-string">"content_scripts"</span>:     [        {            <span class="hljs-comment">//"matches": ["http://*/*", "https://*/*"],</span>            <span class="hljs-comment">// "&lt;all_urls&gt;" 表示匹配所有地址</span>            <span class="hljs-string">"matches"</span>: [<span class="hljs-string">"&lt;all_urls&gt;"</span>],            <span class="hljs-comment">// 多个JS按顺序注入</span>            <span class="hljs-string">"js"</span>: [<span class="hljs-string">"js/jquery-1.8.3.js"</span>, <span class="hljs-string">"js/content-script.js"</span>],            <span class="hljs-comment">// JS的注入可以随便一点，但是CSS的注意就要千万小心了，因为一不小心就可能影响全局样式</span>            <span class="hljs-string">"css"</span>: [<span class="hljs-string">"css/custom.css"</span>],            <span class="hljs-comment">// 代码注入的时间，可选值： "document_start", "document_end", or "document_idle"，最后一个表示页面空闲时，默认document_idle</span>            <span class="hljs-string">"run_at"</span>: <span class="hljs-string">"document_start"</span>        },        <span class="hljs-comment">// 这里仅仅是为了演示content-script可以配置多个规则</span>        {            <span class="hljs-string">"matches"</span>: [<span class="hljs-string">"*://*/*.png"</span>, <span class="hljs-string">"*://*/*.jpg"</span>, <span class="hljs-string">"*://*/*.gif"</span>, <span class="hljs-string">"*://*/*.bmp"</span>],            <span class="hljs-string">"js"</span>: [<span class="hljs-string">"js/show-image-content-size.js"</span>]        }    ],    <span class="hljs-comment">// 权限申请</span>    <span class="hljs-string">"permissions"</span>:    [        <span class="hljs-string">"contextMenus"</span>, <span class="hljs-comment">// 右键菜单</span>        <span class="hljs-string">"tabs"</span>, <span class="hljs-comment">// 标签</span>        <span class="hljs-string">"notifications"</span>, <span class="hljs-comment">// 通知</span>        <span class="hljs-string">"webRequest"</span>, <span class="hljs-comment">// web请求</span>        <span class="hljs-string">"webRequestBlocking"</span>,        <span class="hljs-string">"storage"</span>, <span class="hljs-comment">// 插件本地存储</span>        <span class="hljs-string">"http://*/*"</span>, <span class="hljs-comment">// 可以通过executeScript或者insertCSS访问的网站</span>        <span class="hljs-string">"https://*/*"</span> <span class="hljs-comment">// 可以通过executeScript或者insertCSS访问的网站</span>    ],    <span class="hljs-comment">// 普通页面能够直接访问的插件资源列表，如果不设置是无法直接访问的</span>    <span class="hljs-string">"web_accessible_resources"</span>: [<span class="hljs-string">"js/inject.js"</span>],    <span class="hljs-comment">// 插件主页，这个很重要，不要浪费了这个免费广告位</span>    <span class="hljs-string">"homepage_url"</span>: <span class="hljs-string">"https://www.baidu.com"</span>,    <span class="hljs-comment">// 覆盖浏览器默认页面</span>    <span class="hljs-string">"chrome_url_overrides"</span>:    {        <span class="hljs-comment">// 覆盖浏览器默认的新标签页</span>        <span class="hljs-string">"newtab"</span>: <span class="hljs-string">"newtab.html"</span>    },    <span class="hljs-comment">// Chrome40以前的插件配置页写法</span>    <span class="hljs-string">"options_page"</span>: <span class="hljs-string">"options.html"</span>,    <span class="hljs-comment">// Chrome40以后的插件配置页写法，如果2个都写，新版Chrome只认后面这一个</span>    <span class="hljs-string">"options_ui"</span>:    {        <span class="hljs-string">"page"</span>: <span class="hljs-string">"options.html"</span>,        <span class="hljs-comment">// 添加一些默认的样式，推荐使用</span>        <span class="hljs-string">"chrome_style"</span>: <span class="hljs-literal">true</span>    },    <span class="hljs-comment">// 向地址栏注册一个关键字以提供搜索建议，只能设置一个关键字</span>    <span class="hljs-string">"omnibox"</span>: { <span class="hljs-string">"keyword"</span> : <span class="hljs-string">"go"</span> },    <span class="hljs-comment">// 默认语言</span>    <span class="hljs-string">"default_locale"</span>: <span class="hljs-string">"zh_CN"</span>,    <span class="hljs-comment">// devtools页面入口，注意只能指向一个HTML文件，不能是JS文件</span>    <span class="hljs-string">"devtools_page"</span>: <span class="hljs-string">"devtools.html"</span>}</code></pre><h2 id="content-scripts">4.2. content-scripts</h2><p>所谓<a href="https://developer.chrome.com/extensions/content_scripts" target="_blank">content-scripts</a>，其实就是Chrome插件中向页面注入脚本的一种形式（虽然名为script，其实还可以包括css的），借助<code>content-scripts</code>我们可以实现通过配置的方式轻松向指定页面注入JS和CSS（如果需要动态注入，可以参考下文），最常见的比如：广告屏蔽、页面CSS定制，等等。</p><p>示例配置：</p><pre class="javascript"><code class="hljs">{    <span class="hljs-comment">// 需要直接注入页面的JS</span>    <span class="hljs-string">"content_scripts"</span>:     [        {            <span class="hljs-comment">//"matches": ["http://*/*", "https://*/*"],</span>            <span class="hljs-comment">// "&lt;all_urls&gt;" 表示匹配所有地址</span>            <span class="hljs-string">"matches"</span>: [<span class="hljs-string">"&lt;all_urls&gt;"</span>],            <span class="hljs-comment">// 多个JS按顺序注入</span>            <span class="hljs-string">"js"</span>: [<span class="hljs-string">"js/jquery-1.8.3.js"</span>, <span class="hljs-string">"js/content-script.js"</span>],            <span class="hljs-comment">// JS的注入可以随便一点，但是CSS的注意就要千万小心了，因为一不小心就可能影响全局样式</span>            <span class="hljs-string">"css"</span>: [<span class="hljs-string">"css/custom.css"</span>],            <span class="hljs-comment">// 代码注入的时间，可选值： "document_start", "document_end", or "document_idle"，最后一个表示页面空闲时，默认document_idle</span>            <span class="hljs-string">"run_at"</span>: <span class="hljs-string">"document_start"</span>        }    ],}</code></pre><p>特别注意，如果没有主动指定<code>run_at</code>为<code>document_start</code>（默认为<code>document_idle</code>），下面这种代码是不会生效的：</p><pre class="javascript"><code class="hljs"><span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">'DOMContentLoaded'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'我被执行了！'</span>);});</code></pre><p><code>content-scripts</code>和原始页面共享DOM，但是不共享JS，如要访问页面JS（例如某个JS变量），只能通过<code>injected js</code>来实现。<code>content-scripts</code>不能访问绝大部分<code>chrome.xxx.api</code>，除了下面这4种：</p><ul><li>chrome.extension(getURL , inIncognitoContext , lastError , onRequest , sendRequest)</li><li>chrome.i18n</li><li>chrome.runtime(connect , getManifest , getURL , id , onConnect , onMessage , sendMessage)</li><li>chrome.storage</li></ul><p>其实看到这里不要悲观，这些API绝大部分时候都够用了，非要调用其它API的话，你还可以通过通信来实现让background来帮你调用（关于通信，后文有详细介绍）。</p><p>好了，Chrome插件给我们提供了这么强大的JS注入功能，剩下的就是发挥你的想象力去玩弄浏览器了。</p><h2 id="background">4.3. background</h2><p>后台（姑且这么翻译吧），是一个常驻的页面，它的生命周期是插件中所有类型页面中最长的，它随着浏览器的打开而打开，随着浏览器的关闭而关闭，所以通常把需要一直运行的、启动就运行的、全局的代码放在background里面。</p><p>background的权限非常高，几乎可以调用所有的Chrome扩展API（除了devtools），而且它可以无限制跨域，也就是可以跨域访问任何网站而无需要求对方设置<code>CORS</code>。</p><blockquote><p>经过测试，其实不止是background，所有的直接通过<code>chrome-extension://id/xx.html</code>这种方式打开的网页都可以无限制跨域。</p></blockquote><p>配置中，<code>background</code>可以通过<code>page</code>指定一张网页，也可以通过<code>scripts</code>直接指定一个JS，Chrome会自动为这个JS生成一个默认的网页：</p><pre class="javascript"><code class="hljs">{    <span class="hljs-comment">// 会一直常驻的后台JS或后台页面</span>    <span class="hljs-string">"background"</span>:    {        <span class="hljs-comment">// 2种指定方式，如果指定JS，那么会自动生成一个背景页</span>        <span class="hljs-string">"page"</span>: <span class="hljs-string">"background.html"</span>        <span class="hljs-comment">//"scripts": ["js/background.js"]</span>    },}</code></pre><p>需要特别说明的是，虽然你可以通过<code>chrome-extension://xxx/background.html</code>直接打开后台页，但是你打开的后台页和真正一直在后台运行的那个页面不是同一个，换句话说，你可以打开无数个<code>background.html</code>，但是真正在后台常驻的只有一个，而且这个你永远看不到它的界面，只能调试它的代码。</p><h2 id="event-pages">4.4. event-pages</h2><p>这里顺带介绍一下<a href="https://developer.chrome.com/extensions/event_pages" target="_blank">event-pages</a>，它是一个什么东西呢？鉴于background生命周期太长，长时间挂载后台可能会影响性能，所以Google又弄一个<code>event-pages</code>，在配置文件上，它与background的唯一区别就是多了一个<code>persistent</code>参数：</p><pre class="javascript"><code class="hljs">{    <span class="hljs-string">"background"</span>:    {        <span class="hljs-string">"scripts"</span>: [<span class="hljs-string">"event-page.js"</span>],        <span class="hljs-string">"persistent"</span>: <span class="hljs-literal">false</span>    },}</code></pre><p>它的生命周期是：在被需要时加载，在空闲时被关闭，什么叫被需要时呢？比如第一次安装、插件更新、有content-script向它发送消息，等等。</p><p>除了配置文件的变化，代码上也有一些细微变化，个人这个简单了解一下就行了，一般情况下background也不会很消耗性能的。</p><h2 id="popup">4.5. popup</h2><p><code>popup</code>是点击<code>browser_action</code>或者<code>page_action</code>图标时打开的一个小窗口网页，焦点离开网页就立即关闭，一般用来做一些临时性的交互。</p><img src="https://images2015.cnblogs.com/blog/352797/201707/352797-20170711101054353-176942304.png" alt="博客园网摘插件popup效果"><p></p><p><code>popup</code>可以包含任意你想要的HTML内容，并且会自适应大小。可以通过<code>default_popup</code>字段来指定popup页面，也可以调用<code>setPopup()</code>方法。</p><p>配置方式：</p><pre class="javascript"><code class="hljs">{    <span class="hljs-string">"browser_action"</span>:    {        <span class="hljs-string">"default_icon"</span>: <span class="hljs-string">"img/icon.png"</span>,        <span class="hljs-comment">// 图标悬停时的标题，可选</span>        <span class="hljs-string">"default_title"</span>: <span class="hljs-string">"这是一个示例Chrome插件"</span>,        <span class="hljs-string">"default_popup"</span>: <span class="hljs-string">"popup.html"</span>    }}</code></pre><img src="https://images2015.cnblogs.com/blog/352797/201707/352797-20170711101114415-2019243064.png"><p>需要特别注意的是，由于单击图标打开popup，焦点离开又立即关闭，所以popup页面的生命周期一般很短，需要长时间运行的代码千万不要写在popup里面。</p><p>在权限上，它和background非常类似，它们之间最大的不同是生命周期的不同，popup中可以直接通过<code>chrome.extension.getBackgroundPage()</code>获取background的window对象。</p><h2 id="injected-script">4.6. injected-script</h2><p>这里的<code>injected-script</code>是我给它取的，指的是通过DOM操作的方式向页面注入的一种JS。为什么要把这种JS单独拿出来讨论呢？又或者说为什么需要通过这种方式注入JS呢？</p><p>这是因为<code>content-script</code>有一个很大的“缺陷”，也就是无法访问页面中的JS，虽然它可以操作DOM，但是DOM却不能调用它，也就是无法在DOM中通过绑定事件的方式调用<code>content-script</code>中的代码（包括直接写<code>onclick</code>和<code>addEventListener</code>2种方式都不行），但是，“在页面上添加一个按钮并调用插件的扩展API”是一个很常见的需求，那该怎么办呢？其实这就是本小节要讲的。</p><p>在<code>content-script</code>中通过DOM方式向页面注入<code>inject-script</code>代码示例：</p><pre class="javascript"><code class="hljs"><span class="hljs-comment">// 向页面注入JS</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">injectCustomJs</span>(<span class="hljs-params">jsPath</span>)</span>{    jsPath = jsPath || <span class="hljs-string">'js/inject.js'</span>;    <span class="hljs-keyword">var</span> temp = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'script'</span>);    temp.setAttribute(<span class="hljs-string">'type'</span>, <span class="hljs-string">'text/javascript'</span>);    <span class="hljs-comment">// 获得的地址类似：chrome-extension://ihcokhadfjfchaeagdoclpnjdiokfakg/js/inject.js</span>    temp.src = chrome.extension.getURL(jsPath);    temp.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)    </span>{        <span class="hljs-comment">// 放在页面不好看，执行完后移除掉</span>        <span class="hljs-keyword">this</span>.parentNode.removeChild(<span class="hljs-keyword">this</span>);    };    <span class="hljs-built_in">document</span>.head.appendChild(temp);}</code></pre><p>你以为这样就行了？执行一下你会看到如下报错：</p><pre><code class="hljs sql">Denying <span class="hljs-keyword">load</span> <span class="hljs-keyword">of</span> chrome-extension://efbllncjkjiijkppagepehoekjojdclc/js/inject.js. Resources must be listed <span class="hljs-keyword">in</span> the web_accessible_resources manifest <span class="hljs-keyword">key</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">to</span> be loaded <span class="hljs-keyword">by</span> pages outside the extension.</code></pre><p>意思就是你想要在web中直接访问插件中的资源的话必须显示声明才行，配置文件中增加如下：</p><pre class="javascript"><code class="hljs">{    <span class="hljs-comment">// 普通页面能够直接访问的插件资源列表，如果不设置是无法直接访问的</span>    <span class="hljs-string">"web_accessible_resources"</span>: [<span class="hljs-string">"js/inject.js"</span>],}</code></pre><p>至于<code>inject-script</code>如何调用<code>content-script</code>中的代码，后面我会在专门的一个消息通信章节详细介绍。</p><h2 id="homepage_url">4.7. homepage_url</h2><p>开发者或者插件主页设置，一般会在如下2个地方显示：</p><img src="https://images2015.cnblogs.com/blog/352797/201707/352797-20170711101138368-1160396252.png"><img src="https://images2015.cnblogs.com/blog/352797/201707/352797-20170711101153556-956484967.png"><h1 id="chrome插件的8种展示形式">Chrome插件的8种展示形式</h1><h2 id="browseraction浏览器右上角">5.1. browserAction(浏览器右上角)</h2><p>通过配置<code>browser_action</code>可以在浏览器的右上角增加一个图标，一个<code>browser_action</code>可以拥有一个图标，一个<code>tooltip</code>，一个<code>badge</code>和一个<code>popup</code>。</p><p>示例配置如下：</p><pre class="json"><code class="hljs"><span class="hljs-string">"browser_action"</span>:{    <span class="hljs-attr">"default_icon"</span>: <span class="hljs-string">"img/icon.png"</span>,    <span class="hljs-attr">"default_title"</span>: <span class="hljs-string">"这是一个示例Chrome插件"</span>,    <span class="hljs-attr">"default_popup"</span>: <span class="hljs-string">"popup.html"</span>}</code></pre><h3 id="图标">5.1.1. 图标</h3><p><code>browser_action</code>图标推荐使用宽高都为19像素的图片，更大的图标会被缩小，格式随意，一般推荐png，可以通过manifest中<code>default_icon</code>字段配置，也可以调用setIcon()方法。</p><h3 id="tooltip">5.1.2. tooltip</h3><p>修改<code>browser_action</code>的manifest中<code>default_title</code>字段，或者调用<code>setTitle()</code>方法。</p><img src="https://images2015.cnblogs.com/blog/352797/201707/352797-20170711101210759-683039077.png"><h3 id="badge">5.1.3. badge</h3><p>所谓<code>badge</code>就是在图标上显示一些文本，可以用来更新一些小的扩展状态提示信息。因为badge空间有限，所以只支持4个以下的字符（英文4个，中文2个）。badge无法通过配置文件来指定，必须通过代码实现，设置badge文字和颜色可以分别使用<code>setBadgeText()</code>和<code>setBadgeBackgroundColor()</code>。</p><pre class="javascript"><code class="hljs">chrome.browserAction.setBadgeText({<span class="hljs-attr">text</span>: <span class="hljs-string">'new'</span>});chrome.browserAction.setBadgeBackgroundColor({<span class="hljs-attr">color</span>: [<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>]});</code></pre><p>效果：</p><img src="https://images2015.cnblogs.com/blog/352797/201707/352797-20170711101228056-2133169218.png"><h2 id="pageaction地址栏右侧">5.2. pageAction(地址栏右侧)</h2><p>所谓<code>pageAction</code>，指的是只有当某些特定页面打开才显示的图标，它和<code>browserAction</code>最大的区别是一个始终都显示，一个只在特定情况才显示。</p><p>需要特别说明的是早些版本的Chrome是将pageAction放在地址栏的最右边，左键单击弹出popup，右键单击则弹出相关默认的选项菜单：</p><img src="https://images2015.cnblogs.com/blog/352797/201707/352797-20170711101549665-519093069.png"><p>而新版的Chrome更改了这一策略，pageAction和普通的browserAction一样也是放在浏览器右上角，只不过没有点亮时是灰色的，点亮了才是彩色的，灰色时无论左键还是右键单击都是弹出选项：</p><img src="https://images2015.cnblogs.com/blog/352797/201707/352797-20170711101604947-1619892598.gif"><p></p><blockquote><p>具体是从哪一版本开始改的没去仔细考究，反正知道v50.0的时候还是前者，v58.0的时候已改为后者。</p></blockquote><p>调整之后的<code>pageAction</code>我们可以简单地把它看成是可以置灰的<code>browserAction</code>。</p><ul><li>chrome.pageAction.show(tabId) 显示图标；</li><li>chrome.pageAction.hide(tabId) 隐藏图标；</li></ul><p>示例(只有打开百度才显示图标)：</p><pre class="javascript"><code class="hljs"><span class="hljs-comment">// manifest.json</span>{    <span class="hljs-string">"page_action"</span>:    {        <span class="hljs-string">"default_icon"</span>: <span class="hljs-string">"img/icon.png"</span>,        <span class="hljs-string">"default_title"</span>: <span class="hljs-string">"我是pageAction"</span>,        <span class="hljs-string">"default_popup"</span>: <span class="hljs-string">"popup.html"</span>    },    <span class="hljs-string">"permissions"</span>: [<span class="hljs-string">"declarativeContent"</span>]}<span class="hljs-comment">// background.js</span>chrome.runtime.onInstalled.addListener(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{    chrome.declarativeContent.onPageChanged.removeRules(<span class="hljs-literal">undefined</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{        chrome.declarativeContent.onPageChanged.addRules([            {                <span class="hljs-attr">conditions</span>: [                    <span class="hljs-comment">// 只有打开百度才显示pageAction</span>                    <span class="hljs-keyword">new</span> chrome.declarativeContent.PageStateMatcher({<span class="hljs-attr">pageUrl</span>: {<span class="hljs-attr">urlContains</span>: <span class="hljs-string">'baidu.com'</span>}})                ],                <span class="hljs-attr">actions</span>: [<span class="hljs-keyword">new</span> chrome.declarativeContent.ShowPageAction()]            }        ]);    });});</code></pre><p>效果图：</p><img src="https://images2015.cnblogs.com/blog/352797/201707/352797-20170711101633728-1835819108.gif"><p></p><h2 id="右键菜单">5.3. 右键菜单</h2><p>通过开发Chrome插件可以自定义浏览器的右键菜单，主要是通过<code>chrome.contextMenus</code>API实现，右键菜单可以出现在不同的上下文，比如普通页面、选中的文字、图片、链接，等等，如果有同一个插件里面定义了多个菜单，Chrome会自动组合放到以插件名字命名的二级菜单里，如下：</p><img src="https://images2015.cnblogs.com/blog/352797/201707/352797-20170711101651618-268310284.png"><h3 id="最简单的右键菜单示例">5.3.1. 最简单的右键菜单示例</h3><pre class="javascript"><code class="hljs"><span class="hljs-comment">// manifest.json</span>{<span class="hljs-string">"permissions"</span>: [<span class="hljs-string">"contextMenus"</span>]}<span class="hljs-comment">// background.js</span>chrome.contextMenus.create({    <span class="hljs-attr">title</span>: <span class="hljs-string">"测试右键菜单"</span>,    <span class="hljs-attr">onclick</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{alert(<span class="hljs-string">'您点击了右键菜单！'</span>);}});</code></pre><p>效果：</p><img src="https://images2015.cnblogs.com/blog/352797/201707/352797-20170711101704775-1000780193.png"><h3 id="添加右键百度搜索">5.3.2. 添加右键百度搜索</h3><pre class="javascript"><code class="hljs"><span class="hljs-comment">// manifest.json</span>{<span class="hljs-string">"permissions"</span>: [<span class="hljs-string">"contextMenus"</span>， <span class="hljs-string">"tabs"</span>]}<span class="hljs-comment">// background.js</span>chrome.contextMenus.create({    <span class="hljs-attr">title</span>: <span class="hljs-string">'使用度娘搜索：%s'</span>, <span class="hljs-comment">// %s表示选中的文字</span>    contexts: [<span class="hljs-string">'selection'</span>], <span class="hljs-comment">// 只有当选中文字时才会出现此右键菜单</span>    onclick: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">params</span>)    </span>{        <span class="hljs-comment">// 注意不能使用location.href，因为location是属于background的window对象</span>        chrome.tabs.create({<span class="hljs-attr">url</span>: <span class="hljs-string">'https://www.baidu.com/s?ie=utf-8&amp;wd='</span> + <span class="hljs-built_in">encodeURI</span>(params.selectionText)});    }});</code></pre><p>效果如下：</p><img src="https://images2015.cnblogs.com/blog/352797/201707/352797-20170711101721384-916526079.png"><h3 id="语法说明">5.3.3. 语法说明</h3><p>这里只是简单列举一些常用的，完整API参见：<a href="https://developer.chrome.com/extensions/contextMenus" class="uri" target="_blank">https://developer.chrome.com/extensions/contextMenus</a></p><pre class="javascript"><code class="hljs">chrome.contextMenus.create({    <span class="hljs-attr">type</span>: <span class="hljs-string">'normal'</span>， <span class="hljs-comment">// 类型，可选：["normal", "checkbox", "radio", "separator"]，默认 normal</span>    title: <span class="hljs-string">'菜单的名字'</span>, <span class="hljs-comment">// 显示的文字，除非为“separator”类型否则此参数必需，如果类型为“selection”，可以使用%s显示选定的文本</span>    contexts: [<span class="hljs-string">'page'</span>], <span class="hljs-comment">// 上下文环境，可选：["all", "page", "frame", "selection", "link", "editable", "image", "video", "audio"]，默认page</span>    onclick: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{}, <span class="hljs-comment">// 单击时触发的方法</span>    parentId: <span class="hljs-number">1</span>, <span class="hljs-comment">// 右键菜单项的父菜单项ID。指定父菜单项将会使此菜单项成为父菜单项的子菜单</span>    documentUrlPatterns: <span class="hljs-string">'https://*.baidu.com/*'</span> <span class="hljs-comment">// 只在某些页面显示此右键菜单</span>});<span class="hljs-comment">// 删除某一个菜单项</span>chrome.contextMenus.remove(menuItemId)；<span class="hljs-comment">// 删除所有自定义右键菜单</span>chrome.contextMenus.removeAll();<span class="hljs-comment">// 更新某一个菜单项</span>chrome.contextMenus.update(menuItemId, updateProperties);</code></pre><h2 id="override覆盖特定页面">5.4. override(覆盖特定页面)</h2><p>使用<code>override</code>页可以将Chrome默认的一些特定页面替换掉，改为使用扩展提供的页面。</p><p>扩展可以替代如下页面：</p><ul><li>历史记录：从工具菜单上点击历史记录时访问的页面，或者从地址栏直接输入 <a href="chrome://history" class="uri" target="_blank">chrome://history</a></li><li>新标签页：当创建新标签的时候访问的页面，或者从地址栏直接输入 <a href="chrome://newtab" class="uri" target="_blank">chrome://newtab</a></li><li>书签：浏览器的书签，或者直接输入 <a href="chrome://bookmarks" class="uri" target="_blank">chrome://bookmarks</a></li></ul><p>注意：</p><ul><li>一个扩展只能替代一个页面；</li><li>不能替代隐身窗口的新标签页；</li><li>网页必须设置title，否则用户可能会看到网页的URL，造成困扰；</li></ul><p>下面的截图是默认的新标签页和被扩展替换掉的新标签页。</p><img src="https://images2015.cnblogs.com/blog/352797/201707/352797-20170711101740947-1059479610.png"><p>代码（注意，一个插件只能替代一个默认页，以下仅为演示）：</p><pre class="javascript"><code class="hljs"><span class="hljs-string">"chrome_url_overrides"</span>:{    <span class="hljs-string">"newtab"</span>: <span class="hljs-string">"newtab.html"</span>,    <span class="hljs-string">"history"</span>: <span class="hljs-string">"history.html"</span>,    <span class="hljs-string">"bookmarks"</span>: <span class="hljs-string">"bookmarks.html"</span>}</code></pre><h2 id="devtools开发者工具">5.5. devtools(开发者工具)</h2><h3 id="预热">5.5.1. 预热</h3><p>使用过vue的应该见过这种类型的插件：</p><img src="https://images2015.cnblogs.com/blog/352797/201707/352797-20170711101756868-1307680533.png"><p>是的，Chrome允许插件在开发者工具(devtools)上动手脚，主要表现在：</p><ul><li>自定义一个和多个和<code>Elements</code>、<code>Console</code>、<code>Sources</code>等同级别的面板；</li><li>自定义侧边栏(sidebar)，目前只能自定义<code>Elements</code>面板的侧边栏；</li></ul><p>先来看2张简单的demo截图，自定义面板（判断当前页面是否使用了jQuery）：</p><img src="https://images2015.cnblogs.com/blog/352797/201707/352797-20170711101815243-1381068889.png"><p>自定义侧边栏（获取当前页面所有图片）：</p><img src="https://images2015.cnblogs.com/blog/352797/201707/352797-20170711101832259-552804777.png"><h3 id="devtools扩展介绍">5.5.2. devtools扩展介绍</h3><p>主页：<a href="https://developer.chrome.com/extensions/devtools" class="uri" target="_blank">https://developer.chrome.com/extensions/devtools</a></p><p>来一张官方图片：</p><img src="https://images2015.cnblogs.com/blog/352797/201707/352797-20170711101847493-273760238.png"><p>每打开一个开发者工具窗口，都会创建devtools页面的实例，F12窗口关闭，页面也随着关闭，所以devtools页面的生命周期和devtools窗口是一致的。devtools页面可以访问一组特有的<code>DevTools API</code>以及有限的扩展API，这组特有的<code>DevTools API</code>只有devtools页面才可以访问，background都无权访问，这些API包括：</p><ul><li><code>chrome.devtools.panels</code>：面板相关；</li><li><code>chrome.devtools.inspectedWindow</code>：获取被审查窗口的有关信息；</li><li><code>chrome.devtools.network</code>：获取有关网络请求的信息；</li></ul><p>大部分扩展API都无法直接被<code>DevTools</code>页面调用，但它可以像<code>content-script</code>一样直接调用<code>chrome.extension</code>和<code>chrome.runtime</code>API，同时它也可以像<code>content-script</code>一样使用Message交互的方式与background页面进行通信。</p><h3 id="实例创建一个devtools扩展">5.5.3. 实例：创建一个devtools扩展</h3><p>首先，要针对开发者工具开发插件，需要在清单文件声明如下：</p><pre class="javascript"><code class="hljs">{    <span class="hljs-comment">// 只能指向一个HTML文件，不能是JS文件</span>    <span class="hljs-string">"devtools_page"</span>: <span class="hljs-string">"devtools.html"</span>}</code></pre><p>这个<code>devtools.html</code>里面一般什么都没有，就引入一个js：</p><pre class="html"><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"js/devtools.js"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p>可以看出来，其实真正代码是<code>devtools.js</code>，html文件是“多余”的，所以这里觉得有点坑，<code>devtools_page</code>干嘛不允许直接指定JS呢？</p><p>再来看devtools.js的代码：</p><pre class="javascript"><code class="hljs"><span class="hljs-comment">// 创建自定义面板，同一个插件可以创建多个自定义面板</span><span class="hljs-comment">// 几个参数依次为：panel标题、图标（其实设置了也没地方显示）、要加载的页面、加载成功后的回调</span>chrome.devtools.panels.create(<span class="hljs-string">'MyPanel'</span>, <span class="hljs-string">'img/icon.png'</span>, <span class="hljs-string">'mypanel.html'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">panel</span>)</span>{    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'自定义面板创建成功！'</span>); <span class="hljs-comment">// 注意这个log一般看不到</span>});<span class="hljs-comment">// 创建自定义侧边栏</span>chrome.devtools.panels.elements.createSidebarPane(<span class="hljs-string">"Images"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">sidebar</span>)</span>{    <span class="hljs-comment">// sidebar.setPage('../sidebar.html'); // 指定加载某个页面</span>    sidebar.setExpression(<span class="hljs-string">'document.querySelectorAll("img")'</span>, <span class="hljs-string">'All Images'</span>); <span class="hljs-comment">// 通过表达式来指定</span>    <span class="hljs-comment">//sidebar.setObject({aaa: 111, bbb: 'Hello World!'}); // 直接设置显示某个对象</span>});</code></pre><p>setPage时的效果：</p><img src="https://images2015.cnblogs.com/blog/352797/201707/352797-20170711101903837-2079245455.png"><p>以下截图示例的代码：</p><img src="https://images2015.cnblogs.com/blog/352797/201707/352797-20170711101928103-1093454821.png"><pre class="javascript"><code class="hljs"><span class="hljs-comment">// 检测jQuery</span><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'check_jquery'</span>).addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{    <span class="hljs-comment">// 访问被检查的页面DOM需要使用inspectedWindow</span>    <span class="hljs-comment">// 简单例子：检测被检查页面是否使用了jQuery</span>    chrome.devtools.inspectedWindow.eval(<span class="hljs-string">"jQuery.fn.jquery"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">result, isException</span>)    </span>{        <span class="hljs-keyword">var</span> html = <span class="hljs-string">''</span>;        <span class="hljs-keyword">if</span> (isException) html = <span class="hljs-string">'当前页面没有使用jQuery。'</span>;        <span class="hljs-keyword">else</span> html = <span class="hljs-string">'当前页面使用了jQuery，版本为：'</span>+result;        alert(html);    });});<span class="hljs-comment">// 打开某个资源</span><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'open_resource'</span>).addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{    chrome.devtools.inspectedWindow.eval(<span class="hljs-string">"window.location.href"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">result, isException</span>)    </span>{        chrome.devtools.panels.openResource(result, <span class="hljs-number">20</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)        </span>{            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'资源打开成功！'</span>);        });    });});<span class="hljs-comment">// 审查元素</span><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'test_inspect'</span>).addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{    chrome.devtools.inspectedWindow.eval(<span class="hljs-string">"inspect(document.images[0])"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">result, isException</span>)</span>{});});<span class="hljs-comment">// 获取所有资源</span><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'get_all_resources'</span>).addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{    chrome.devtools.inspectedWindow.getResources(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resources</span>)    </span>{        alert(<span class="hljs-built_in">JSON</span>.stringify(resources));    });});</code></pre><h3 id="调试技巧">5.5.4. 调试技巧</h3><p>修改了devtools页面的代码时，需要先在 <a href="chrome://extensions" class="uri" target="_blank">chrome://extensions</a> 页面按下<code>Ctrl+R</code>重新加载插件，然后关闭再打开开发者工具即可，无需刷新页面（而且只刷新页面不刷新开发者工具的话是不会生效的）。</p><p>由于devtools本身就是开发者工具页面，所以几乎没有方法可以直接调试它，直接用 <code>chrome-extension://extid/devtools.html"</code>的方式打开页面肯定报错，因为不支持相关特殊API，只能先自己写一些方法屏蔽这些错误，调试通了再放开。</p><h2 id="option选项页">5.6. option(选项页)</h2><p>所谓<code>options</code>页，就是插件的设置页面，有2个入口，一个是右键图标有一个“选项”菜单，还有一个在插件管理页面：</p><img src="https://images2015.cnblogs.com/blog/352797/201707/352797-20170711101949603-1425351182.png"><img src="https://images2015.cnblogs.com/blog/352797/201707/352797-20170711102004775-83441694.png"><p>在Chrome40以前，options页面和其它普通页面没什么区别，Chrome40以后则有了一些变化。</p><p>我们先看老版的<a href="https://developer.chrome.com/extensions/options" target="_blank">options</a>：</p><pre class="javascript"><code class="hljs">{    <span class="hljs-comment">// Chrome40以前的插件配置页写法</span>    <span class="hljs-string">"options_page"</span>: <span class="hljs-string">"options.html"</span>,}</code></pre><p>这个页面里面的内容就随你自己发挥了，配置之后在插件管理页就会看到一个<code>选项</code>按钮入口，点进去就是打开一个网页，没啥好讲的。</p><p>效果:</p><img src="https://images2015.cnblogs.com/blog/352797/201707/352797-20170711102020962-228055231.png"><p>再来看新版的<a href="https://developer.chrome.com/extensions/optionsV2" target="_blank">optionsV2</a>：</p><pre class="javascript"><code class="hljs">{    <span class="hljs-string">"options_ui"</span>:    {        <span class="hljs-string">"page"</span>: <span class="hljs-string">"options.html"</span>,        <span class="hljs-comment">// 添加一些默认的样式，推荐使用</span>        <span class="hljs-string">"chrome_style"</span>: <span class="hljs-literal">true</span>    },}</code></pre><p><code>options.html</code>的代码我们没有任何改动，只是配置文件改了，之后效果如下：</p><img src="https://images2015.cnblogs.com/blog/352797/201707/352797-20170711102036665-607005369.png"><p>看起来是不是高大上了？</p><p>几点注意：</p><ul><li>为了兼容，建议2种都写，如果都写了，Chrome40以后会默认读取新版的方式；</li><li>新版options中不能使用alert；</li><li>数据存储建议用chrome.storage，因为会随用户自动同步；</li></ul><h2 id="omnibox">5.7. omnibox</h2><p><code>omnibox</code>是向用户提供搜索建议的一种方式。先来看个<code>gif</code>图以便了解一下这东西到底是个什么鬼：</p><img src="https://images2015.cnblogs.com/blog/352797/201707/352797-20170711102052275-866111894.gif"><p></p><p>注册某个关键字以触发插件自己的搜索建议界面，然后可以任意发挥了。</p><p>首先，配置文件如下：</p><pre class="javascript"><code class="hljs">{    <span class="hljs-comment">// 向地址栏注册一个关键字以提供搜索建议，只能设置一个关键字</span>    <span class="hljs-string">"omnibox"</span>: { <span class="hljs-string">"keyword"</span> : <span class="hljs-string">"go"</span> },}</code></pre><p>然后<code>background.js</code>中注册监听事件：</p><pre class="javascript"><code class="hljs"><span class="hljs-comment">// omnibox 演示</span>chrome.omnibox.onInputChanged.addListener(<span class="hljs-function">(<span class="hljs-params">text, suggest</span>) =&gt;</span> {    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'inputChanged: '</span> + text);    <span class="hljs-keyword">if</span>(!text) <span class="hljs-keyword">return</span>;    <span class="hljs-keyword">if</span>(text == <span class="hljs-string">'美女'</span>) {        suggest([            {<span class="hljs-attr">content</span>: <span class="hljs-string">'中国'</span> + text, <span class="hljs-attr">description</span>: <span class="hljs-string">'你要找“中国美女”吗？'</span>},            {<span class="hljs-attr">content</span>: <span class="hljs-string">'日本'</span> + text, <span class="hljs-attr">description</span>: <span class="hljs-string">'你要找“日本美女”吗？'</span>},            {<span class="hljs-attr">content</span>: <span class="hljs-string">'泰国'</span> + text, <span class="hljs-attr">description</span>: <span class="hljs-string">'你要找“泰国美女或人妖”吗？'</span>},            {<span class="hljs-attr">content</span>: <span class="hljs-string">'韩国'</span> + text, <span class="hljs-attr">description</span>: <span class="hljs-string">'你要找“韩国美女”吗？'</span>}        ]);    }    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(text == <span class="hljs-string">'微博'</span>) {        suggest([            {<span class="hljs-attr">content</span>: <span class="hljs-string">'新浪'</span> + text, <span class="hljs-attr">description</span>: <span class="hljs-string">'新浪'</span> + text},            {<span class="hljs-attr">content</span>: <span class="hljs-string">'腾讯'</span> + text, <span class="hljs-attr">description</span>: <span class="hljs-string">'腾讯'</span> + text},            {<span class="hljs-attr">content</span>: <span class="hljs-string">'搜狐'</span> + text, <span class="hljs-attr">description</span>: <span class="hljs-string">'搜索'</span> + text},        ]);    }    <span class="hljs-keyword">else</span> {        suggest([            {<span class="hljs-attr">content</span>: <span class="hljs-string">'百度搜索 '</span> + text, <span class="hljs-attr">description</span>: <span class="hljs-string">'百度搜索 '</span> + text},            {<span class="hljs-attr">content</span>: <span class="hljs-string">'谷歌搜索 '</span> + text, <span class="hljs-attr">description</span>: <span class="hljs-string">'谷歌搜索 '</span> + text},        ]);    }});<span class="hljs-comment">// 当用户接收关键字建议时触发</span>chrome.omnibox.onInputEntered.addListener(<span class="hljs-function">(<span class="hljs-params">text</span>) =&gt;</span> {    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'inputEntered: '</span> + text);    <span class="hljs-keyword">if</span>(!text) <span class="hljs-keyword">return</span>;    <span class="hljs-keyword">var</span> href = <span class="hljs-string">''</span>;    <span class="hljs-keyword">if</span>(text.endsWith(<span class="hljs-string">'美女'</span>)) href = <span class="hljs-string">'http://image.baidu.com/search/index?tn=baiduimage&amp;ie=utf-8&amp;word='</span> + text;    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(text.startsWith(<span class="hljs-string">'百度搜索'</span>)) href = <span class="hljs-string">'https://www.baidu.com/s?ie=UTF-8&amp;wd='</span> + text.replace(<span class="hljs-string">'百度搜索 '</span>, <span class="hljs-string">''</span>);    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(text.startsWith(<span class="hljs-string">'谷歌搜索'</span>)) href = <span class="hljs-string">'https://www.google.com.tw/search?q='</span> + text.replace(<span class="hljs-string">'谷歌搜索 '</span>, <span class="hljs-string">''</span>);    <span class="hljs-keyword">else</span> href = <span class="hljs-string">'https://www.baidu.com/s?ie=UTF-8&amp;wd='</span> + text;    openUrlCurrentTab(href);});<span class="hljs-comment">// 获取当前选项卡ID</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getCurrentTabId</span>(<span class="hljs-params">callback</span>)</span>{    chrome.tabs.query({<span class="hljs-attr">active</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">currentWindow</span>: <span class="hljs-literal">true</span>}, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">tabs</span>)    </span>{        <span class="hljs-keyword">if</span>(callback) callback(tabs.length ? tabs[<span class="hljs-number">0</span>].id: <span class="hljs-literal">null</span>);    });}<span class="hljs-comment">// 当前标签打开某个链接</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">openUrlCurrentTab</span>(<span class="hljs-params">url</span>)</span>{    getCurrentTabId(<span class="hljs-function"><span class="hljs-params">tabId</span> =&gt;</span> {        chrome.tabs.update(tabId, {<span class="hljs-attr">url</span>: url});    })}</code></pre><h2 id="桌面通知">5.8. 桌面通知</h2><p>Chrome提供了一个<code>chrome.notifications</code>API以便插件推送桌面通知，暂未找到<code>chrome.notifications</code>和HTML5自带的<code>Notification</code>的显著区别及优势。</p><p>在后台JS中，无论是使用<code>chrome.notifications</code>还是<code>Notification</code>都不需要申请权限（HTML5方式需要申请权限），直接使用即可。</p><p>最简单的通知：</p><img src="https://images2015.cnblogs.com/blog/352797/201707/352797-20170711102111697-515392377.png"><p>代码：</p><pre class="javascript"><code class="hljs">chrome.notifications.create(<span class="hljs-literal">null</span>, {    <span class="hljs-attr">type</span>: <span class="hljs-string">'basic'</span>,    <span class="hljs-attr">iconUrl</span>: <span class="hljs-string">'img/icon.png'</span>,    <span class="hljs-attr">title</span>: <span class="hljs-string">'这是标题'</span>,    <span class="hljs-attr">message</span>: <span class="hljs-string">'您刚才点击了自定义右键菜单！'</span>});</code></pre><p>通知的样式可以很丰富：</p><img src="https://images2015.cnblogs.com/blog/352797/201707/352797-20170711102121415-1959756640.png"><p>这个没有深入研究，有需要的可以去看官方文档。</p><h1 id="种类型的js对比">5种类型的JS对比</h1><p>Chrome插件的JS主要可以分为这5类：<code>injected script</code>、<code>content-script</code>、<code>popup js</code>、<code>background js</code>和<code>devtools js</code>，</p><h2 id="权限对比">6.1. 权限对比</h2>{% raw %}<table><thead><tr class="header"><th>JS种类</th><th>可访问的API</th><th>DOM访问情况</th><th>JS访问情况</th><th>直接跨域</th></tr></thead><tbody><tr class="odd"><td>injected script</td><td>和普通JS无任何差别，不能访问任何扩展API</td><td>可以访问</td><td>可以访问</td><td>不可以</td></tr><tr class="even"><td>content script</td><td>只能访问 extension、runtime等部分API</td><td>可以访问</td><td>不可以</td><td>不可以</td></tr><tr class="odd"><td>popup js</td><td>可访问绝大部分API，除了devtools系列</td><td>不可直接访问</td><td>不可以</td><td>可以</td></tr><tr class="even"><td>background js</td><td>可访问绝大部分API，除了devtools系列</td><td>不可直接访问</td><td>不可以</td><td>可以</td></tr><tr class="odd"><td>devtools js</td><td>只能访问 devtools、extension、runtime等部分API</td><td>可以</td><td>可以</td><td>不可以</td></tr></tbody></table><h2 id="调试方式对比">6.2. 调试方式对比</h2><table><thead><tr class="header"><th>JS类型</th><th>调试方式</th><th>图片说明</th></tr></thead><tbody><tr class="odd"><td>injected script</td><td>直接普通的F12即可</td><td>懒得截图</td></tr><tr class="even"><td>content-script</td><td>打开Console,如图切换</td><td><img src="https://images2015.cnblogs.com/blog/352797/201707/352797-20170712142454118-1741772825.png"></td></tr><tr class="odd"><td>popup-js</td><td>popup页面右键审查元素</td><td><img src="https://images2015.cnblogs.com/blog/352797/201707/352797-20170712142508275-102456585.png"></td></tr><tr class="even"><td>background</td><td>插件管理页点击背景页即可</td><td><img src="https://images2015.cnblogs.com/blog/352797/201707/352797-20170712142524665-745904947.png"></td></tr><tr class="odd"><td>devtools-js</td><td>暂未找到有效方法</td><td>-</td></tr></tbody></table>{% endraw %}<p></p><h1 id="消息通信">消息通信</h1><p></p><p></p><p>通信主页：<a href="https://developer.chrome.com/extensions/messaging" class="uri" target="_blank">https://developer.chrome.com/extensions/messaging</a></p><p></p><p></p><p>前面我们介绍了Chrome插件中存在的5种JS，那么它们之间如何互相通信呢？下面先来系统概况一下，然后再分类细说。需要知道的是，popup和background其实几乎可以视为一种东西，因为它们可访问的API都一样、通信机制一样、都可以跨域。</p><p></p><p></p><h2 id="互相通信概览">7.1. 互相通信概览</h2><p></p><p></p><p>注：<code>-</code>表示不存在或者无意义，或者待验证。</p><p></p><p><table></table></p><p><thead></thead></p><p><tr class="header"></tr></p><p><th></th></p><p><th>injected-script</th></p><p><th>content-script</th></p><p><th>popup-js</th></p><p><th>background-js</th><br><br></p><p><tbody></tbody></p><p><tr class="odd"></tr></p><p><td>injected-script</td></p><p><td>-</td></p><p><td>window.postMessage</td></p><p><td>-</td></p><p><td>-</td><br></p><p><tr class="even"></tr></p><p><td>content-script</td></p><p><td>window.postMessage</td></p><p><td>-</td></p><p><td>chrome.runtime.sendMessage chrome.runtime.connect</td></p><p><td>chrome.runtime.sendMessage chrome.runtime.connect</td><br></p><p><tr class="odd"></tr></p><p><td>popup-js</td></p><p><td>-</td></p><p><td>chrome.tabs.sendMessage chrome.tabs.connect</td></p><p><td>-</td></p><p><td>chrome.extension. getBackgroundPage()</td><br></p><p><tr class="even"></tr></p><p><td>background-js</td></p><p><td>-</td></p><p><td>chrome.tabs.sendMessage chrome.tabs.connect</td></p><p><td>chrome.extension.getViews</td></p><p><td>-</td><br></p><p><tr class="odd"></tr></p><p><td>devtools-js</td></p><p><td>chrome.devtools. inspectedWindow.eval</td></p><p><td>-</td></p><p><td>chrome.runtime.sendMessage</td></p><p><td>chrome.runtime.sendMessage</td><br><br><br></p><p></p><h2 id="通信详细介绍">7.2. 通信详细介绍</h2><p></p><p></p><h3 id="popup和background">7.2.1. popup和background</h3><p></p><p></p><p>popup可以直接调用background中的JS方法，也可以直接访问background的DOM：</p><p></p><p><pre class="javascript"><code class="hljs"><span class="hljs-comment">// background.js</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>)<br></span>{<br>    alert(<span class="hljs-string">‘我是background！’</span>);<br>}</code></pre></p><p><span class="hljs-comment">// popup.js</span><br><span class="hljs-keyword">var</span> bg = chrome.extension.getBackgroundPage();<br>bg.test(); <span class="hljs-comment">// 访问bg的函数</span><br>alert(bg.document.body.innerHTML); <span class="hljs-comment">// 访问bg的DOM</span></p><p><blockquote></blockquote></p><p></p><p>小插曲，今天碰到一个情况，发现popup无法获取background的任何方法，找了半天才发现是因为background的js报错了，而你如果不主动查看background的js的话，是看不到错误信息的，特此提醒。</p><br><p></p><p></p><p>至于<code>background</code>访问<code>popup</code>如下（前提是<code>popup</code>已经打开）：</p><p></p><p><pre class="javascript"><code class="hljs"><span class="hljs-keyword">var</span> views = chrome.extension.getViews({<span class="hljs-attr">type</span>:<span class="hljs-string">‘popup’</span>});<br><span class="hljs-keyword">if</span>(views.length &gt; <span class="hljs-number">0</span>) {<br>    <span class="hljs-built_in">console</span>.log(views[<span class="hljs-number">0</span>].location.href);<br>}</code></pre></p><p></p><h3 id="popup或者bg向content主动发送消息">7.2.2. popup或者bg向content主动发送消息</h3><p></p><p></p><p>background.js或者popup.js：</p><p></p><p><pre class="javascript"><code class="hljs"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sendMessageToContentScript</span>(<span class="hljs-params">message, callback</span>)<br></span>{<br>    chrome.tabs.query({<span class="hljs-attr">active</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">currentWindow</span>: <span class="hljs-literal">true</span>}, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">tabs</span>)<br>    </span>{<br>        chrome.tabs.sendMessage(tabs[<span class="hljs-number">0</span>].id, message, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>)<br>        </span>{<br>            <span class="hljs-keyword">if</span>(callback) callback(response);<br>        });<br>    });<br>}<br>sendMessageToContentScript({<span class="hljs-attr">cmd</span>:<span class="hljs-string">‘test’</span>, <span class="hljs-attr">value</span>:<span class="hljs-string">‘你好，我是popup！’</span>}, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>)<br></span>{<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">‘来自content的回复：’</span>+response);<br>});</code></pre></p><p></p><p><code>content-script.js</code>接收：</p><p></p><p><pre class="javascript"><code class="hljs">chrome.runtime.onMessage.addListener(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">request, sender, sendResponse</span>)<br></span>{<br>    <span class="hljs-comment">// console.log(sender.tab ?”from a content script:” + sender.tab.url :”from the extension”);</span><br>    <span class="hljs-keyword">if</span>(request.cmd == <span class="hljs-string">‘test’</span>) alert(request.value);<br>    sendResponse(<span class="hljs-string">‘我收到了你的消息！’</span>);<br>});</code></pre></p><p></p><p>双方通信直接发送的都是JSON对象，不是JSON字符串，所以无需解析，很方便（当然也可以直接发送字符串）。</p><p></p><p><blockquote></blockquote></p><p></p><p>网上有些老代码中用的是<code>chrome.extension.onMessage</code>，没有完全查清二者的区别(貌似是别名)，但是建议统一使用<code>chrome.runtime.onMessage</code>。</p><br><p></p><p></p><h3 id="content-script主动发消息给后台">7.2.3. content-script主动发消息给后台</h3><p></p><p></p><p>content-script.js：</p><p></p><p><pre class="javascript"><code class="hljs">chrome.runtime.sendMessage({<span class="hljs-attr">greeting</span>: <span class="hljs-string">‘你好，我是content-script呀，我主动发消息给后台！’</span>}, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>) </span>{<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">‘收到来自后台的回复：’</span> + response);<br>});</code></pre></p><p></p><p>background.js 或者 popup.js：</p><p></p><p><pre class="javascript"><code class="hljs"><span class="hljs-comment">// 监听来自content-script的消息</span><br>chrome.runtime.onMessage.addListener(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">request, sender, sendResponse</span>)<br></span>{<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">‘收到来自content-script的消息：’</span>);<br>    <span class="hljs-built_in">console</span>.log(request, sender, sendResponse);<br>    sendResponse(<span class="hljs-string">‘我是后台，我已收到你的消息：’</span> + <span class="hljs-built_in">JSON</span>.stringify(request));<br>});</code></pre></p><p></p><p>注意事项：</p><p></p><p><ul></ul></p><p><li>content_scripts向<code>popup</code>主动发消息的前提是popup必须打开！否则需要利用background作中转；</li></p><p><li>如果background和popup同时监听，那么它们都可以同时收到消息，但是只有一个可以sendResponse，一个先发送了，那么另外一个再发送就无效；</li><br></p><p></p><h3 id="injected-script和content-script">7.2.4. injected script和content-script</h3><p></p><p></p><p><code>content-script</code>和页面内的脚本（<code>injected-script</code>自然也属于页面内的脚本）之间唯一共享的东西就是页面的DOM元素，有2种方法可以实现二者通讯：</p><p></p><p><ol></ol></p><p><li>可以通过<code>window.postMessage</code>和<code>window.addEventListener</code>来实现二者消息通讯；</li></p><p><li>通过自定义DOM事件来实现；</li><br></p><p></p><p>第一种方法（推荐）：</p><p></p><p></p><p><code>injected-script</code>中：</p><p></p><p><pre class="javascript"><code class="hljs"><span class="hljs-built_in">window</span>.postMessage({<span class="hljs-string">“test”</span>: <span class="hljs-string">‘你好！’</span>}, <span class="hljs-string">‘*’</span>);</code></pre></p><p></p><p>content script中：</p><p></p><p><pre class="javascript"><code class="hljs"><span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">“message”</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)<br></span>{<br>    <span class="hljs-built_in">console</span>.log(e.data);<br>}, <span class="hljs-literal">false</span>);</code></pre></p><p></p><p>第二种方法：</p><p></p><p></p><p><code>injected-script</code>中：</p><p></p><p><pre class="javascript"><code class="hljs"><span class="hljs-keyword">var</span> customEvent = <span class="hljs-built_in">document</span>.createEvent(<span class="hljs-string">‘Event’</span>);<br>customEvent.initEvent(<span class="hljs-string">‘myCustomEvent’</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fireCustomEvent</span>(<span class="hljs-params">data</span>) </span>{<br>    hiddenDiv = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">‘myCustomEventDiv’</span>);<br>    hiddenDiv.innerText = data<br>    hiddenDiv.dispatchEvent(customEvent);<br>}<br>fireCustomEvent(<span class="hljs-string">‘你好，我是普通JS！’</span>);</code></pre></p><p></p><p><code>content-script.js</code>中：</p><p></p><p><pre class="javascript"><code class="hljs"><span class="hljs-keyword">var</span> hiddenDiv = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">‘myCustomEventDiv’</span>);<br><span class="hljs-keyword">if</span>(!hiddenDiv) {<br>    hiddenDiv = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">‘div’</span>);<br>    hiddenDiv.style.display = <span class="hljs-string">‘none’</span>;<br>    <span class="hljs-built_in">document</span>.body.appendChild(hiddenDiv);<br>}<br>hiddenDiv.addEventListener(<span class="hljs-string">‘myCustomEvent’</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-keyword">var</span> eventData = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">‘myCustomEventDiv’</span>).innerText;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">‘收到自定义事件消息：’</span> + eventData);<br>});</code></pre></p><p></p><h2 id="长连接和短连接">7.3. 长连接和短连接</h2><p></p><p></p><p>其实上面已经涉及到了，这里再单独说明一下。Chrome插件中有2种通信方式，一个是短连接（<code>chrome.tabs.sendMessage</code>和<code>chrome.runtime.sendMessage</code>），一个是长连接（<code>chrome.tabs.connect</code>和<code>chrome.runtime.connect</code>）。</p><p></p><p></p><p>短连接的话就是挤牙膏一样，我发送一下，你收到了再回复一下，如果对方不回复，你只能重新发，而长连接类似<code>WebSocket</code>会一直建立连接，双方可以随时互发消息。</p><p></p><p></p><p>短连接上面已经有代码示例了，这里只讲一下长连接。</p><p></p><p></p><p>popup.js：</p><p></p><p><pre class="javascript"><code class="hljs">getCurrentTabId(<span class="hljs-function">(<span class="hljs-params">tabId</span>) =&gt;</span> {<br>    <span class="hljs-keyword">var</span> port = chrome.tabs.connect(tabId, {<span class="hljs-attr">name</span>: <span class="hljs-string">‘test-connect’</span>});<br>    port.postMessage({<span class="hljs-attr">question</span>: <span class="hljs-string">‘你是谁啊？’</span>});<br>    port.onMessage.addListener(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">msg</span>) </span>{<br>        alert(<span class="hljs-string">‘收到消息：’</span>+msg.answer);<br>        <span class="hljs-keyword">if</span>(msg.answer &amp;&amp; msg.answer.startsWith(<span class="hljs-string">‘我是’</span>))<br>        {<br>            port.postMessage({<span class="hljs-attr">question</span>: <span class="hljs-string">‘哦，原来是你啊！’</span>});<br>        }<br>    });<br>});</code></pre></p><p></p><p>content-script.js：</p><p></p><p><pre class="javascript"><code class="hljs"><span class="hljs-comment">// 监听长连接</span><br>chrome.runtime.onConnect.addListener(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">port</span>) </span>{<br>    <span class="hljs-built_in">console</span>.log(port);<br>    <span class="hljs-keyword">if</span>(port.name == <span class="hljs-string">‘test-connect’</span>) {<br>        port.onMessage.addListener(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">msg</span>) </span>{<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">‘收到长连接消息：’</span>, msg);<br>            <span class="hljs-keyword">if</span>(msg.question == <span class="hljs-string">‘你是谁啊？’</span>) port.postMessage({<span class="hljs-attr">answer</span>: <span class="hljs-string">‘我是你爸！’</span>});<br>        });<br>    }<br>});</code></pre></p><p></p><h1 id="其它补充">其它补充</h1><p></p><p></p><h2 id="动态注入或执行js">8.1. 动态注入或执行JS</h2><p></p><p></p><p>虽然在<code>background</code>和<code>popup</code>中无法直接访问页面DOM，但是可以通过<code>chrome.tabs.executeScript</code>来执行脚本，从而实现访问web页面的DOM（注意，这种方式也不能直接访问页面JS）。</p><p></p><p></p><p>示例<code>manifest.json</code>配置：</p><p></p><p><pre class="javascript"><code class="hljs">{<br>    <span class="hljs-string">“name”</span>: <span class="hljs-string">“动态JS注入演示”</span>,<br>    …<br>    <span class="hljs-string">“permissions”</span>: [<br>        <span class="hljs-string">“tabs”</span>, <span class="hljs-string">“http://<em>/</em>“</span>, <span class="hljs-string">“https://<em>/</em>“</span><br>    ],<br>    …<br>}</code></pre></p><p></p><p>JS：</p><p></p><p><pre class="javascript"><code class="hljs"><span class="hljs-comment">// 动态执行JS代码</span><br>chrome.tabs.executeScript(tabId, {<span class="hljs-attr">code</span>: <span class="hljs-string">‘document.body.style.backgroundColor=”red”‘</span>});<br><span class="hljs-comment">// 动态执行JS文件</span><br>chrome.tabs.executeScript(tabId, {<span class="hljs-attr">file</span>: <span class="hljs-string">‘some-script.js’</span>});</code></pre></p><p></p><h2 id="动态注入css">8.2. 动态注入CSS</h2><p></p><p></p><p>示例<code>manifest.json</code>配置：</p><p></p><p><pre class="javascript"><code class="hljs">{<br>    <span class="hljs-string">“name”</span>: <span class="hljs-string">“动态CSS注入演示”</span>,<br>    …<br>    <span class="hljs-string">“permissions”</span>: [<br>        <span class="hljs-string">“tabs”</span>, <span class="hljs-string">“http://<em>/</em>“</span>, <span class="hljs-string">“https://<em>/</em>“</span><br>    ],<br>    …<br>}</code></pre></p><p></p><p>JS代码：</p><p></p><p><pre class="javascript"><code class="hljs"><span class="hljs-comment">// 动态执行CSS代码，TODO，这里有待验证</span><br>chrome.tabs.insertCSS(tabId, {<span class="hljs-attr">code</span>: <span class="hljs-string">‘xxx’</span>});<br><span class="hljs-comment">// 动态执行CSS文件</span><br>chrome.tabs.insertCSS(tabId, {<span class="hljs-attr">file</span>: <span class="hljs-string">‘some-style.css’</span>});</code></pre></p><p></p><h2 id="获取当前窗口id">8.3. 获取当前窗口ID</h2><p></p><p><pre class="javascript"><code class="hljs">chrome.windows.getCurrent(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">currentWindow</span>)<br></span>{<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">‘当前窗口ID：’</span> + currentWindow.id);<br>});</code></pre></p><p></p><h2 id="获取当前标签页id">8.4. 获取当前标签页ID</h2><p></p><p></p><p>一般有2种方法：</p><p></p><p><pre class="javascript"><code class="hljs"><span class="hljs-comment">// 获取当前选项卡ID</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getCurrentTabId</span>(<span class="hljs-params">callback</span>)<br></span>{<br>    chrome.tabs.query({<span class="hljs-attr">active</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">currentWindow</span>: <span class="hljs-literal">true</span>}, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">tabs</span>)<br>    </span>{<br>        <span class="hljs-keyword">if</span>(callback) callback(tabs.length ? tabs[<span class="hljs-number">0</span>].id: <span class="hljs-literal">null</span>);<br>    });<br>}</code></pre></p><p></p><p>获取当前选项卡id的另一种方法，大部分时候都类似，只有少部分时候会不一样（例如当窗口最小化时）</p><p></p><p><pre class="javascript"><code class="hljs"><span class="hljs-comment">// 获取当前选项卡ID</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getCurrentTabId2</span>(<span class="hljs-params"></span>)<br></span>{<br>    chrome.windows.getCurrent(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">currentWindow</span>)<br>    </span>{<br>        chrome.tabs.query({<span class="hljs-attr">active</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">windowId</span>: currentWindow.id}, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">tabs</span>)<br>        </span>{<br>            <span class="hljs-keyword">if</span>(callback) callback(tabs.length ? tabs[<span class="hljs-number">0</span>].id: <span class="hljs-literal">null</span>);<br>        });<br>    });<br>}</code></pre></p><p></p><h2 id="本地存储">8.5. 本地存储</h2><p></p><p></p><p>本地存储建议用<code>chrome.storage</code>而不是普通的<code>localStorage</code>，区别有好几点，个人认为最重要的2点区别是：</p><p></p><p><ul></ul></p><p><li><code>chrome.storage</code>是针对插件全局的，即使你在<code>background</code>中保存的数据，在<code>content-script</code>也能获取到；</li></p><p><li><code>chrome.storage.sync</code>可以跟随当前登录用户自动同步，这台电脑修改的设置会自动同步到其它电脑，很方便，如果没有登录或者未联网则先保存到本地，等登录了再同步至网络；</li><br></p><p></p><p>需要声明<code>storage</code>权限，有<code>chrome.storage.sync</code>和<code>chrome.storage.local</code>2种方式可供选择，使用示例如下：</p><p></p><p><pre class="javascript"><code class="hljs"><span class="hljs-comment">// 读取数据，第一个参数是指定要读取的key以及设置默认值</span><br>chrome.storage.sync.get({<span class="hljs-attr">color</span>: <span class="hljs-string">‘red’</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>}, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">items</span>) </span>{<br>    <span class="hljs-built_in">console</span>.log(items.color, items.age);<br>});<br><span class="hljs-comment">// 保存数据</span><br>chrome.storage.sync.set({<span class="hljs-attr">color</span>: <span class="hljs-string">‘blue’</span>}, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">‘保存成功！’</span>);<br>});</code></pre></p><p></p><h2 id="webrequest">8.6. webRequest</h2><p></p><p></p><p>通过webRequest系列API可以对HTTP请求进行任性地修改、定制，这里通过<code>beforeRequest</code>来简单演示一下它的冰山一角：</p><p></p><p><pre class="javascript"><code class="hljs"><span class="hljs-comment">//manifest.json</span><br>{<br>    <span class="hljs-comment">// 权限申请</span><br>    <span class="hljs-string">“permissions”</span>:<br>    [<br>        <span class="hljs-string">“webRequest”</span>, <span class="hljs-comment">// web请求</span><br>        <span class="hljs-string">“webRequestBlocking”</span>, <span class="hljs-comment">// 阻塞式web请求</span><br>        <span class="hljs-string">“storage”</span>, <span class="hljs-comment">// 插件本地存储</span><br>        <span class="hljs-string">“http://<em>/</em>“</span>, <span class="hljs-comment">// 可以通过executeScript或者insertCSS访问的网站</span><br>        <span class="hljs-string">“https://<em>/</em>“</span> <span class="hljs-comment">// 可以通过executeScript或者insertCSS访问的网站</span><br>    ],<br>}</code></pre></p><p><span class="hljs-comment">// background.js</span><br><span class="hljs-comment">// 是否显示图片</span><br><span class="hljs-keyword">var</span> showImage;<br>chrome.storage.sync.get({<span class="hljs-attr">showImage</span>: <span class="hljs-literal">true</span>}, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">items</span>) </span>{<br>    showImage = items.showImage;<br>});<br><span class="hljs-comment">// web请求监听，最后一个参数表示阻塞式，需单独声明权限：webRequestBlocking</span><br>chrome.webRequest.onBeforeRequest.addListener(<span class="hljs-function"><span class="hljs-params">details</span> =&gt;</span> {<br>    <span class="hljs-comment">// cancel 表示取消本次请求</span><br>    <span class="hljs-keyword">if</span>(!showImage &amp;&amp; details.type == <span class="hljs-string">‘image’</span>) <span class="hljs-keyword">return</span> {<span class="hljs-attr">cancel</span>: <span class="hljs-literal">true</span>};<br>    <span class="hljs-comment">// 简单的音视频检测</span><br>    <span class="hljs-comment">// 大部分网站视频的type并不是media，且视频做了防下载处理，所以这里仅仅是为了演示效果，无实际意义</span><br>    <span class="hljs-keyword">if</span>(details.type == <span class="hljs-string">‘media’</span>) {<br>        chrome.notifications.create(<span class="hljs-literal">null</span>, {<br>            <span class="hljs-attr">type</span>: <span class="hljs-string">‘basic’</span>,<br>            <span class="hljs-attr">iconUrl</span>: <span class="hljs-string">‘img/icon.png’</span>,<br>            <span class="hljs-attr">title</span>: <span class="hljs-string">‘检测到音视频’</span>,<br>            <span class="hljs-attr">message</span>: <span class="hljs-string">‘音视频地址：’</span> + details.url,<br>        });<br>    }<br>}, {<span class="hljs-attr">urls</span>: [<span class="hljs-string">“&lt;all_urls&gt;”</span>]}, [<span class="hljs-string">“blocking”</span>]);</p><p></p><h2 id="国际化">8.7. 国际化</h2><p></p><p></p><p>插件根目录新建一个名为<code>_locales</code>的文件夹，再在下面新建一些语言的文件夹，如<code>en</code>、<code>zh_CN</code>、<code>zh_TW</code>，然后再在每个文件夹放入一个<code>messages.json</code>，同时必须在清单文件中设置<code>default_locale</code>。</p><p></p><p></p><p><code>_locales\en\messages.json</code>内容：</p><p></p><p><pre class="javascript"><code class="hljs">{<br>    <span class="hljs-string">“pluginDesc”</span>: {<span class="hljs-string">“message”</span>: <span class="hljs-string">“A simple chrome extension demo”</span>},<br>    <span class="hljs-string">“helloWorld”</span>: {<span class="hljs-string">“message”</span>: <span class="hljs-string">“Hello World!”</span>}<br>}</code></pre></p><p></p><p><code>_locales\zh_CN\messages.json</code>内容：</p><p></p><p><pre class="javascript"><code class="hljs">{<br>    <span class="hljs-string">“pluginDesc”</span>: {<span class="hljs-string">“message”</span>: <span class="hljs-string">“一个简单的Chrome插件demo”</span>},<br>    <span class="hljs-string">“helloWorld”</span>: {<span class="hljs-string">“message”</span>: <span class="hljs-string">“你好啊，世界！”</span>}<br>}</code></pre></p><p></p><p>在<code>manifest.json</code>和<code>CSS</code>文件中通过<code><strong>MSG_messagename</strong></code>引入，如：</p><p></p><p><pre class="javascript"><code class="hljs">{<br>    <span class="hljs-string">“description”</span>: <span class="hljs-string">“<strong>MSG_pluginDesc</strong>“</span>,<br>    <span class="hljs-comment">// 默认语言</span><br>    <span class="hljs-string">“default_locale”</span>: <span class="hljs-string">“zh_CN”</span>,<br>}</code></pre></p><p></p><p>JS中则直接<code>chrome.i18n.getMessage(“helloWorld”)</code>。</p><p></p><p></p><p>测试时，通过给chrome建立一个不同的快捷方式<code>chrome.exe –lang=en</code>来切换语言，如：</p><br><img src="https://images2015.cnblogs.com/blog/352797/201707/352797-20170711102158259-417770023.png"><p></p><p></p><p>英文效果：</p><br><img src="https://images2015.cnblogs.com/blog/352797/201707/352797-20170711102210868-1502746521.png"><p></p><p></p><p>中文效果：</p><br><img src="https://images2015.cnblogs.com/blog/352797/201707/352797-20170711102221478-1089926751.png"><p></p><p></p><h2 id="api总结">8.8. API总结</h2><p></p><p></p><p>比较常用用的一些API系列：</p><p></p><p><ul></ul></p><p><li>chrome.tabs</li></p><p><li>chrome.runtime</li></p><p><li>chrome.webRequest</li></p><p><li>chrome.window</li></p><p><li>chrome.storage</li></p><p><li>chrome.contextMenus</li></p><p><li>chrome.devtools</li></p><p><li>chrome.extension</li><br></p><p></p><h1 id="经验总结">经验总结</h1><p></p><p></p><h2 id="查看已安装插件路径">9.1. 查看已安装插件路径</h2><p></p><p></p><p>已安装的插件源码路径：<code>C:\Users\用户名\AppData\Local\Google\Chrome\User Data\Default\Extensions</code>，每一个插件被放在以插件ID为名的文件夹里面，想要学习某个插件的某个功能是如何实现的，看人家的源码是最好的方法了：</p><br><img src="https://images2015.cnblogs.com/blog/352797/201707/352797-20170711102256712-51940037.png"><p></p><p></p><p>如何查看某个插件的ID？进入 <a href="chrome://extensions" class="uri" target="_blank">chrome://extensions</a> ，然后勾线开发者模式即可看到了。</p><br><img src="https://images2015.cnblogs.com/blog/352797/201707/352797-20170711102308431-360409003.png"><p></p><p></p><h2 id="特别注意background的报错">9.2. 特别注意background的报错</h2><p></p><p></p><p>很多时候你发现你的代码会莫名其妙的失效，找来找去又找不到原因，这时打开background的控制台才发现原来某个地方写错了导致代码没生效，正式由于background报错的隐蔽性(需要主动打开对应的控制台才能看到错误)，所以特别注意这点。</p><p></p><p></p><h2 id="如何让popup页面不关闭">9.3. 如何让popup页面不关闭</h2><p></p><p></p><p>在对popup页面审查元素的时候popup会被强制打开无法关闭，只有控制台关闭了才可以关闭popup，原因很简单：如果popup关闭了控制台就没用了。这种方法在某些情况下很实用！</p><p></p><p></p><h2 id="不支持内联javascript的执行">9.4. 不支持内联JavaScript的执行</h2><p></p><p></p><p>也就是不支持将js直接写在html中，比如：</p><p></p><p><pre class="html"><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">“btn”</span> <span class="hljs-attr">type</span>=<span class="hljs-string">“button”</span> <span class="hljs-attr">value</span>=<span class="hljs-string">“收藏”</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">“test()”</span>/&gt;</span></code></pre></p><p></p><p>报错如下：</p><p></p><p><pre><code class="hljs sql">Refused to <span class="hljs-keyword">execute</span> inline <span class="hljs-keyword">event</span> <span class="hljs-keyword">handler</span> because it violates the <span class="hljs-keyword">following</span> <span class="hljs-keyword">Content</span> <span class="hljs-keyword">Security</span> <span class="hljs-keyword">Policy</span> directive: <span class="hljs-string">“script-src ‘self’ blob: filesystem: chrome-extension-resource:”</span>. Either the <span class="hljs-string">‘unsafe-inline’</span> keyword, a <span class="hljs-keyword">hash</span> (<span class="hljs-string">‘sha256-…’</span>), <span class="hljs-keyword">or</span> a nonce (<span class="hljs-string">‘nonce-…’</span>) <span class="hljs-keyword">is</span> <span class="hljs-keyword">required</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">enable</span> inline execution.</code></pre></p><p></p><p>解决方法就是用JS绑定事件：</p><p></p><p><pre class="javascript"><code class="hljs">$(<span class="hljs-string">‘#btn’</span>).on(<span class="hljs-string">‘click’</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{alert(<span class="hljs-string">‘测试’</span>)});</code></pre></p><p></p><p>另外，对于A标签，这样写<code>href=”javascript:;”</code>然后用JS绑定事件虽然控制台会报错，但是不受影响，当然强迫症患者受不了的话只能写成<code>href=”#”</code>了。</p><p></p><p></p><p>如果这样写：</p><p></p><p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">“javascript:;”</span> <span class="hljs-attr">id</span>=<span class="hljs-string">“get_secret”</span>&gt;</span>请求secret<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></code></pre></p><p></p><p>报错如下：</p><p></p><p><pre><code class="hljs sql">Refused to <span class="hljs-keyword">execute</span> JavaScript <span class="hljs-keyword">URL</span> because it violates the <span class="hljs-keyword">following</span> <span class="hljs-keyword">Content</span> <span class="hljs-keyword">Security</span> <span class="hljs-keyword">Policy</span> directive: <span class="hljs-string">“script-src ‘self’ blob: filesystem: chrome-extension-resource:”</span>. Either the <span class="hljs-string">‘unsafe-inline’</span> keyword, a <span class="hljs-keyword">hash</span> (<span class="hljs-string">‘sha256-…’</span>), <span class="hljs-keyword">or</span> a nonce (<span class="hljs-string">‘nonce-…’</span>) <span class="hljs-keyword">is</span> <span class="hljs-keyword">required</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">enable</span> inline execution.</code></pre></p><p></p><h2 id="注入css的时候必须小心">9.5. 注入CSS的时候必须小心</h2><p></p><p></p><p>由于通过<code>content_scripts</code>注入的CSS优先级非常高，几乎仅次于浏览器默认样式，稍不注意可能就会影响一些网站的展示效果，所以尽量不要写一些影响全局的样式。</p><p></p><p></p><p>之所以强调这个，是因为这个带来的问题非常隐蔽，不太容易找到，可能你正在写某个网页，昨天样式还是好好的，怎么今天就突然不行了？然后你辛辛苦苦找来找去，找了半天才发现竟然是因为插件里面的一个样式影响的！</p><br><img src="https://images2015.cnblogs.com/blog/352797/201707/352797-20170711102324665-787100296.png"><p></p><p></p><h1 id="打包与发布">打包与发布</h1><p></p><p></p><p>打包的话直接在插件管理页有一个打包按钮：</p><br><img src="https://images2015.cnblogs.com/blog/352797/201707/352797-20170711102349728-1968586800.png"><p></p><p></p><p>然后会生成一个<code>.crx</code>文件，要发布到Google应用商店的话需要先登录你的Google账号，然后花5个$注册为开发者，本人太穷，就懒得亲自验证了，有发布需求的自己去整吧。</p><br><img src="https://images2015.cnblogs.com/blog/352797/201707/352797-20170711102401665-879882813.png"><p></p><p></p><h1 id="参考">参考</h1><p></p><p></p><h2 id="官方资料">11.1. 官方资料</h2><p></p><p></p><p>推荐查看官方文档，虽然是英文，但是全且新，国内的中文资料都比较旧（注意以下全部需要FQ）：</p><p></p><p><ul></ul></p><p><li><a href="https://developer.chrome.com/extensions" target="_blank">Chrome插件官方文档主页</a></li></p><p><li><a href="https://developer.chrome.com/extensions/samples" target="_blank">Chrome插件官方示例</a></li></p><p><li><a href="https://developer.chrome.com/extensions/manifest" target="_blank">manifest清单文件</a></li></p><p><li><a href="https://developer.chrome.com/extensions/permissions" target="_blank">permissions权限</a></li></p><p><li><a href="https://developer.chrome.com/extensions/api_index" target="_blank">chrome.xxx.api文档</a></li></p><p><li><a href="https://developer.chrome.com/extensions/match_patterns" target="_blank">模糊匹配规则语法详解</a></li><br></p><p></p><h2 id="第三方资料">11.2. 第三方资料</h2><p></p><p></p><p>部分中文资料，不是特别推荐：</p><p></p><p><ul></ul></p><p><li><a href="http://open.se.360.cn/open/extension_dev/overview.html" target="_blank">360安全浏览器开发文档</a></li></p><p><li><a href="http://open.chrome.360.cn/extension_dev/overview.html" target="_blank">360极速浏览器Chrome扩展开发文档</a></li></p><p><li><a href="http://www.cnblogs.com/champagne/p/" target="_blank">Chrome扩展开发极客系列博客</a></li><br></p><p></p><h1 id="附图">附图</h1><p></p><p></p><p>附图：Chrome高清png格式logo：</p><br><img src="https://images2015.cnblogs.com/blog/352797/201707/352797-20170711102416728-1289897384.png"><br><div id="MySignature" style="display: block;">个人网站：<a href="https://haoji.me/" target="_blank">https://haoji.me</a><br><br>github：<a href="https://github.com/sxei" target="_blank">https://github.com/sxei</a><br><br>博客园：<a href="http://www.cnblogs.com/liuxianan" target="_blank">http://www.cnblogs.com/liuxianan</a><br><br>copyright ©2012-2018 小茗同学<p></p><p></p><p style="color: #FF8301; margin-top: 20px">【转载文章务必保留出处和署名，谢谢！】</p></div><br>文章来源：<br>            <a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/liuxianan/p/chrome-plugin-develop.html" target="_blank" rel="noopener">【干货】Chrome插件(扩展)开发全攻略</a><p></p>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;写在前面&lt;/h1&gt;
&lt;p&gt;这篇文章来自于转载，作者花了许多时间编写，写的也很详细，也很辛苦，我已经在文章尾部标明，也感谢作者的分享，&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;https://www.cnblogs.com/liuxianan/p/chrome-plugin-develop.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这是文章原地址&lt;/a&gt;以下是作者原文：来源我花了将近一个多月的时间断断续续写下这篇博文，并精心写下完整demo，写博客的辛苦大家懂的，所以转载务必保留&lt;a href=&quot;http://blog.haoji.me/chrome-plugin-develop.html&quot; target=&quot;_blank&quot;&gt;出处&lt;/a&gt;。本文所有涉及到的大部分代码均在这个demo里面：&lt;a href=&quot;https://github.com/sxei/chrome-plugin-demo&quot; class=&quot;uri&quot; target=&quot;_blank&quot;&gt;https://github.com/sxei/chrome-plugin-demo&lt;/a&gt; ，大家可以直接下载下来运行。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>jQuery动画做一个折叠菜单</title>
    <link href="https://q32757468.github.io/2019/05/14/jQuery%E5%8A%A8%E7%94%BB%E5%81%9A%E4%B8%80%E4%B8%AA%E6%8A%98%E5%8F%A0%E8%8F%9C%E5%8D%95/"/>
    <id>https://q32757468.github.io/2019/05/14/jQuery动画做一个折叠菜单/</id>
    <published>2019-05-14T09:48:52.000Z</published>
    <updated>2019-05-14T11:01:24.460Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前面利用了jQuery动画做了一个对联广告，这次再次利用jQuery的其他动画做一个折叠菜单，做出一个较为美观的折叠菜单。<br><a id="more"></a><br>直接上代码：</p><ul><li>css部分<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">    * &#123;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">list-style</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.l1</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">        <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.l1</span>&gt;<span class="selector-tag">li</span>&#123;</span><br><span class="line">        <span class="comment">/* border: 1px solid #000;</span></span><br><span class="line"><span class="comment">        border-collapse: collapse!important; */</span></span><br><span class="line">        <span class="attribute">outline</span>: <span class="number">1px</span> solid black;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">        <span class="comment">/* height: 40px;</span></span><br><span class="line"><span class="comment">        line-height: 40px; */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.l1</span>&gt;<span class="selector-tag">li</span>&gt;<span class="selector-tag">div</span>&#123;</span><br><span class="line">        <span class="attribute">outline</span>: <span class="number">1px</span> solid black;</span><br><span class="line">        <span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">        <span class="attribute">position</span>: relative;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.l1</span>&gt;<span class="selector-tag">li</span>&gt;<span class="selector-tag">div</span>&gt;<span class="selector-tag">span</span>&#123;</span><br><span class="line">        <span class="attribute">display</span>: inline-block;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">right</span>: <span class="number">10px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.l2</span>&#123;</span><br><span class="line">        <span class="attribute">display</span>: none;   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.l2</span>&gt;<span class="selector-tag">li</span>&#123;</span><br><span class="line">        <span class="comment">/* outline: 1px solid black; */</span></span><br><span class="line">        <span class="comment">/* border: 1px solid #000;  */</span></span><br><span class="line">        <span class="attribute">border-collapse</span>: collapse<span class="meta">!important</span>; </span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">        <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.trans</span>&#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotate</span>(90deg);</span><br><span class="line">        <span class="attribute">-ms-transform</span>: <span class="built_in">rotate</span>(90deg);<span class="comment">/* IE 9 */</span></span><br><span class="line">        <span class="attribute">-webkit-transform</span>: <span class="built_in">rotate</span>(90deg);<span class="comment">/* Safari and Chrome */</span></span><br><span class="line">        <span class="attribute">-o-transform</span>: <span class="built_in">rotate</span>(90deg);<span class="comment">/* Opera */</span></span><br><span class="line">        <span class="attribute">-moz-transform</span>: <span class="built_in">rotate</span>(90deg);<span class="comment">/* Firefox */</span></span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><ul><li><p>html部分</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"l1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>一级菜单<span class="tag">&lt;<span class="name">span</span>&gt;</span>&gt;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"l2"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>二级菜单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>二级菜单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>二级菜单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>二级菜单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>一级菜单<span class="tag">&lt;<span class="name">span</span>&gt;</span>&gt;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>            </span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"l2"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>二级菜单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>二级菜单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>二级菜单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>二级菜单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>一级菜单<span class="tag">&lt;<span class="name">span</span>&gt;</span>&gt;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"l2"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>二级菜单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>二级菜单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>二级菜单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>二级菜单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>一级菜单<span class="tag">&lt;<span class="name">span</span>&gt;</span>&gt;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"l2"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>二级菜单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>二级菜单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>二级菜单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>二级菜单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>js部分</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> index=<span class="number">1</span>;</span><br><span class="line">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">'.l1&gt;li&gt;div'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            index++;</span><br><span class="line">            <span class="comment">// 因为动画队列的存在，所以在执行新的动画之前要停止之前的动画</span></span><br><span class="line">            $(<span class="keyword">this</span>).next().stop().slideToggle();</span><br><span class="line">            <span class="keyword">if</span>(index%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                $(<span class="keyword">this</span>).children().addClass(<span class="string">'trans'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                $(<span class="keyword">this</span>).children().removeClass(<span class="string">'trans'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)   </span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>效果图：<br><img src="http://m.qpic.cn/psb?/V131x4904WMIoW/7JamsbEg12boHIBr8beMA0qQTVKEhSMWwwhtSmpNkEA!/b/dAcBAAAAAAAA&bo=gAcSBAAAAAADB7M!&rf=viewer_4"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>要注意要找对执行动画的元素，可以用next(),chidren()等方法来找。</li><li>要注意动画队列，当我们快速多次的触发动画的时候，每触发一次就会加入动画队列，并且按照顺序会全部执行完毕，如果在执行新的动画之前我们不先停止之前的动画，那么就不会立即执行我们想要的动画，并且在我们不触发动画之后很有可能还会有很长一段的动画要执行。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;前面利用了jQuery动画做了一个对联广告，这次再次利用jQuery的其他动画做一个折叠菜单，做出一个较为美观的折叠菜单。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>jQuery动画之写一个对联广告</title>
    <link href="https://q32757468.github.io/2019/05/14/jQuery%E5%86%99%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%81%94%E5%B9%BF%E5%91%8A/"/>
    <id>https://q32757468.github.io/2019/05/14/jQuery写一个对联广告/</id>
    <published>2019-05-14T08:28:25.000Z</published>
    <updated>2019-05-14T09:05:11.810Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jQuery自带了许多动画效果，我们可以利用这些动画效果比较方便的做出一个对联广告。<br><a id="more"></a><br>直接上代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    body &#123;</span></span><br><span class="line"><span class="undefined">        margin: 0;</span></span><br><span class="line"><span class="undefined">        padding: 0;</span></span><br><span class="line"><span class="undefined">        height: 2000px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    .left,</span></span><br><span class="line"><span class="undefined">    .right &#123;</span></span><br><span class="line"><span class="undefined">        width: 80px;</span></span><br><span class="line"><span class="undefined">        height: 200px;</span></span><br><span class="line"><span class="undefined">        background: red;</span></span><br><span class="line"><span class="undefined">        position: fixed;</span></span><br><span class="line"><span class="undefined">        top: 260px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    .right &#123;</span></span><br><span class="line"><span class="undefined">        right: 0px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        $(function () &#123;</span></span><br><span class="line"><span class="undefined">            $('.left,.right').hide();</span></span><br><span class="line"><span class="undefined">            // 在网页往下滚动之前先隐藏</span></span><br><span class="line"><span class="undefined">            var $height = $('body,html').scrollTop();</span></span><br><span class="line"><span class="undefined">            $(window).scroll(function () &#123;</span></span><br><span class="line"><span class="undefined">                // 这里用到了scroll事件来监听网页的滚动</span></span><br><span class="line"><span class="undefined">                // 通过scrollTop方法来获取滚动的值</span></span><br><span class="line"><span class="undefined">                $height = $('body,html').scrollTop();</span></span><br><span class="line"><span class="undefined">                // 如果大于500就通过动画显示出来，否则隐藏</span></span><br><span class="line"><span class="undefined">                if ($height &gt;= 500) &#123;</span></span><br><span class="line"><span class="undefined">                    $('.left,.right').show(1000);</span></span><br><span class="line"><span class="undefined">                &#125; else &#123;</span></span><br><span class="line"><span class="undefined">                    $('.left,.right').hide(1000);</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;)</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>这里一定要用到scroll事件，否则无法动态获取到滚动了多少</li><li>在使用scrollTop方法获取网页的滚动的值时一定要这样写<code>$(&#39;body,html&#39;).scrollTop();</code>既要写body，也要写html，兼容处理，如果只写一个可能会获取到不正确的值</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jQuery自带了许多动画效果，我们可以利用这些动画效果比较方便的做出一个对联广告。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>jQuery写一个简单的选项卡</title>
    <link href="https://q32757468.github.io/2019/05/14/jQuery%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E9%80%89%E9%A1%B9%E5%8D%A1/"/>
    <id>https://q32757468.github.io/2019/05/14/jQuery写一个简单的选项卡/</id>
    <published>2019-05-14T07:10:02.000Z</published>
    <updated>2019-05-14T08:03:08.085Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这次通过jQuery的方法来写一个小小的选项卡功能，通过jQuery实现起来也是十分的简单。<br><a id="more"></a><br>直接上代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    * &#123;</span></span><br><span class="line"><span class="undefined">        margin: 0;</span></span><br><span class="line"><span class="undefined">        padding: 0;</span></span><br><span class="line"><span class="undefined">        list-style: none;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    div &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span></span><br><span class="line"><span class="undefined">        width: 800px;</span></span><br><span class="line"><span class="undefined">        height: 400px;</span></span><br><span class="line"><span class="undefined">        margin: 0 auto;</span></span><br><span class="line"><span class="undefined">        position: relative;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.ch</span> &#123;</span></span><br><span class="line"><span class="undefined">        top: 320px;</span></span><br><span class="line"><span class="undefined">        left: 650px;</span></span><br><span class="line"><span class="undefined">        position: absolute;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.ch</span>&gt;<span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="undefined">        display: inline-block;</span></span><br><span class="line"><span class="undefined">        width: 20px;</span></span><br><span class="line"><span class="undefined">        height: 20px;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#ccc</span>;</span></span><br><span class="line"><span class="undefined">        margin-right: 10px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    img &#123;</span></span><br><span class="line"><span class="undefined">        width: 100%;</span></span><br><span class="line"><span class="undefined">        height: 400px;</span></span><br><span class="line"><span class="undefined">        display: none;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.current</span> &#123;</span></span><br><span class="line"><span class="undefined">        display: block;</span></span><br><span class="line"><span class="undefined">        background-color: red !important;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"imgs"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"current"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">src</span>=<span class="string">"https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=2489492398,1961915359&amp;fm=26&amp;gp=0.jpg"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=1287814793,457485829&amp;fm=26&amp;gp=0.jpg"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=1501075685,574908757&amp;fm=11&amp;gp=0.jpg"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=3662540589,314327097&amp;fm=11&amp;gp=0.jpg"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"ch"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"current"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">'.ch&gt;li'</span>).mouseenter(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                $(<span class="keyword">this</span>).addClass(<span class="string">'current'</span>).siblings().removeClass(<span class="string">'current'</span>);</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 给当前操作的小方块添加样式，其他的兄弟小方块去除样式</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> index = $(<span class="keyword">this</span>).index();</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 获取当前是第几个小方块，用来确定是第几张图片</span></span></span><br><span class="line"><span class="javascript">                $(<span class="string">'.imgs&gt;li&gt;img'</span>).eq(index).addClass(<span class="string">'current'</span>).parent().siblings().children()</span></span><br><span class="line"><span class="javascript">                    .removeClass(<span class="string">'current'</span>);</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 给对应的图片添加样式，其他的图片删除样式</span></span></span><br><span class="line"><span class="undefined">            &#125;)</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><p>效果图：<br><img src="http://m.qpic.cn/psb?/V131x4904WMIoW/zPWQ5trQbFj*6qc98*MBj*740Y0lKjmX*Ekq9jguKcY!/b/dLgAAAAAAAAA&bo=gAcSBAAAAAADB7M!&rf=viewer_4"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>写这个选项卡思路很简单，但是在布局的时候没有考虑好导致在给img标签删除样式的时候会比较麻烦，需要先找到父级li，然后找到他的兄弟，再找到他们的儿子，下次要注意避免出现这种情况。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;这次通过jQuery的方法来写一个小小的选项卡功能，通过jQuery实现起来也是十分的简单。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>jQuery学习（事件处理）</title>
    <link href="https://q32757468.github.io/2019/05/14/jQuery%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%EF%BC%89/"/>
    <id>https://q32757468.github.io/2019/05/14/jQuery学习（事件处理）/</id>
    <published>2019-05-14T02:20:15.000Z</published>
    <updated>2019-05-14T06:36:08.540Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jQuery中也有许多事件处理的函数，功能强大，使用起来也比原声js要更加的简单和方便，这次学习以下jQuery的事件处理函数与冒泡行为以及自定义事件等等，以及动手实践，编写实例。<br><a id="more"></a></p></blockquote><h3 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h3><p><strong>jQuery中事件绑定有两种方式</strong></p><ul><li>eventName(function(){})</li></ul><p>绑定对应事件名的监听,   例如：$(‘#div’).click(function(){});<br>优缺点：编写方便，但是不支持所有事件与自定义事件，但常用的事件基本上都是支持的。</p><ul><li>on(eventName, funcion(){})</li></ul><p>通用的绑定事件监听, 例如：$(‘#div’).on(‘click’, function(){});<br>优缺点：支持所有事件，但是编码的时候事件名要自己敲，但是最强大，支持所有事件与自定义事件。</p><h3 id="事件解绑"><a href="#事件解绑" class="headerlink" title="事件解绑"></a>事件解绑</h3><ul><li>jQuery中可以通过off(eventName,function);解绑事件</li></ul><h3 id="获取事件坐标"><a href="#获取事件坐标" class="headerlink" title="获取事件坐标"></a>获取事件坐标</h3><p>当事件被触发时,系统会将事件对象(event)传递给回调函数,通过event对象我们就能获取时间的坐标，获取坐标有三种方式：</p><ul><li>event.offsetX, event.offsetY      相对于事件元素左上角</li><li>event.pageX, event.pageY          相对于页面的左上角</li><li>event.clientX, event.clientY      相对于视口的左上角</li></ul><p><strong>实例示例代码</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">button&#123;</span></span><br><span class="line"><span class="undefined">    margin-top: 600px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>这是按钮一<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>这是按钮二<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>这是按钮三<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>这是按钮四<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'button'</span>).eq(<span class="number">0</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">Event</span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">            alert(Event.offsetY);</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 结果：10</span></span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'button'</span>).eq(<span class="number">1</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">Event</span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">            alert(Event.pageY);</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 结果：626</span></span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'button'</span>).eq(<span class="number">2</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">Event</span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">            alert(Event.clientY);</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 结果：630</span></span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p><hr><h3 id="阻止事件冒泡"><a href="#阻止事件冒泡" class="headerlink" title="阻止事件冒泡"></a>阻止事件冒泡</h3><ul><li>什么是事件冒泡<br>·事件冒泡就是同属说就是事件从里往外的一个触发过程<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.father</span> &#123;</span></span><br><span class="line"><span class="undefined">        width: 400px;</span></span><br><span class="line"><span class="undefined">        height: 400px;</span></span><br><span class="line"><span class="undefined">        background-color: red;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="undefined">        width: 200px;</span></span><br><span class="line"><span class="undefined">        height: 200px;</span></span><br><span class="line"><span class="undefined">        background-color: blue;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"father"</span>&gt;</span></span><br><span class="line">        这是爸爸</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"son"</span>&gt;</span></span><br><span class="line">            这是儿子</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">'.father'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">'这是爸爸'</span>);</span></span><br><span class="line"><span class="undefined">            &#125;)</span></span><br><span class="line"><span class="javascript">            $(<span class="string">'.son'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">'这是儿子'</span>);</span></span><br><span class="line"><span class="undefined">            &#125;)</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>当我单击了儿子之后，由于事件冒泡，事件会由里往外触发，所以<strong>先弹出儿子</strong>，<strong>再弹出爸爸</strong>，很多时候这都不是我们想要的结果，我们通常只是需要触发儿子的事件，所以这个时候我们就需要阻止事件冒泡。</p><ul><li>如何阻止事件冒泡?<br>event.stopPropagation()<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$(function () &#123;</span><br><span class="line">            $('.father').click(function()&#123;</span><br><span class="line">                alert('这是爸爸');</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="comment">&lt;!-- 传递了事件对象 --&gt;</span></span><br><span class="line">            $('.son').click(function(event)&#123;</span><br><span class="line">                event.stopPropagation();</span><br><span class="line">                <span class="comment">&lt;!-- 组阻止了事件冒泡 --&gt;</span></span><br><span class="line">                alert('这是儿子');</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></li></ul><p>此时我们再次单击儿子就会发现就<strong>只弹出了儿子的单击事件，并没有触发父亲的事件</strong>，就达到了我们的效果</p><hr><h3 id="阻止默认行为"><a href="#阻止默认行为" class="headerlink" title="阻止默认行为"></a>阻止默认行为</h3><ul><li>什么是默认行为<br>·就是一些元素默认自带的行为，比如单击超链接会自动跳转等等。</li><li>如何阻止默认行为<br>event.preventDefault()<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"www.baidu.com"</span>&gt;</span>这是一个跳转到百度的超链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'a'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">        event.preventDefault();</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 此时单击超链接时就不会进行跳转了</span></span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="自动触发事件"><a href="#自动触发事件" class="headerlink" title="自动触发事件"></a>自动触发事件</h3><ul><li><p>什么是自动触发事件?<br>·通过代码控制事件, 不用人为点击/移入/移除等事件就能被触发</p></li><li><p>自动触发事件方式<br>$(“selector”).trigger(“eventName”);<br>触发事件的同时会触发事件冒泡<br>触发事件的同时会触发事件默认行为<br>$(“selector”).triggerHandler(“eventName”);<br>触发事件的同时不会触发事件冒泡<br>触发事件的同时不会触发事件默认行为</p></li></ul><p>以triggerHandler()为例：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span>&gt;</span>这是一个按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"> $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'button'</span>).eq(<span class="number">0</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">'我单击了按钮'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 原本要单击才会弹出内容</span></span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'button'</span>).triggerHandler(<span class="string">'click'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 现在在网页出现后就会弹出</span></span></span><br><span class="line"><span class="undefined"> &#125;)</span></span><br><span class="line"><span class="undefined"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p><hr><h3 id="事件命名空间"><a href="#事件命名空间" class="headerlink" title="事件命名空间"></a>事件命名空间</h3><p>我们都知道jQuery可以给同一元素绑定多个相同的事件，且都能够触发，那么在多人开发中就可能会遇到多人对同意元素操作的情况，那么为了方便管理与区分，我们就可以在注册事件的时候使用命名空间</p><ul><li>格式：eventName.命名空间，如 click.hsl()</li><li>添加事件命名空间的前提条件<br>1、事件是通过on来绑定的，也就是这种方法<code>on(eventName, funcion(){})</code><br>2、通过trigger触发事件</li><li>注意点(面试题):<br>·不带命名空间事件被trigger调用,会触发带命名空间事件<br>·带命名空间事件被trigger调用,只会触发带命名空间事件<br>·下级不带命名空间事件被trigger调用,会冒泡触发上级不带命名空间和带命名空间事件<br>·下级带命名空间事件被trigger调用,不会触发上级不带命名空间事件<br>·下级带命名空间事件被trigger调用,会触发上级带命名空间事件</li></ul><h3 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h3><ul><li>什么是自定义事件？<br>自定义事件，可以自己定义事件的名称，然后通过这个名称还能触发相应的功能</li><li>自定义事件的前提<br>1、事件是通过on来绑定的，也就是这种方法<code>on(eventName, funcion(){})</code><br>2、通过trigger触发事件<br>例如：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span>&gt;</span>这是一个按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"> $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'button'</span>).on(<span class="string">'hsl'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">'这是一个自定义事件！'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 自定义了一个名为hsl的事件</span></span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'button'</span>).triggerHandler(<span class="string">'hsl'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 通过trigger来触发</span></span></span><br><span class="line"><span class="undefined"> &#125;)</span></span><br><span class="line"><span class="undefined"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h3><ul><li><p>事件委托的原理<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;事件委托是通过冒泡机制来实现的，例如有一个父元素，里面有许多子元素，我们无需给这众多的子元素都添加单击事件，我们只需给父级元素添加一个单击事件，那么我们在单击子元素的时候，就会网上冒泡，执行父元素的事件，就相当于是委托父级元素来执行一样。</p></li><li><p>事件委托的好处<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>减少监听数量：</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;添加到页面上的事件处理程序数量将直接关系到页面的整体运行性能，因为需要不断的与dom节点进行交互，访问dom的次数越多，引起浏览器重绘与重排的次数也就越多，就会延长整个页面的交互就绪时间<br>每个监听的函数都是一个对象，是对象就会占用内存，对象越多，内存占用率就越大，自然性能就越差<br>… …<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>新增元素自动有事件响应处理：</strong><br>默认的情况下新增元素是无法相应增添前就有的事件。就可以通过冒泡到原本就有的父级元素来触发事件。</p></li><li><p>jQuery中如何添加事件委托：<br>delegate(selector,[type],[data],fn)<br>下面看一个例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"father"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"son"</span>&gt;</span>这是内容<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"son"</span>&gt;</span>这是内容<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"son"</span>&gt;</span>这是内容<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>增加li<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'.son'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">'我是原本就有的li'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 单击li时应该会有弹窗</span></span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'button'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">'.father'</span>).append(<span class="string">'&lt;li&gt;我是新增的li&lt;/li&gt;'</span>)</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 单击新增li</span></span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>运行以上代码，我们可以发现一个问题，单击原有的li时会有弹窗，但是单击后面新创建的li时却并没有弹窗，因为我们没有给后面创建的li添加单击事件。</p><p>此时我们使用事件委托就可以解决问题：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"father"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"son"</span>&gt;</span>这是内容<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"son"</span>&gt;</span>这是内容<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"son"</span>&gt;</span>这是内容<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>增加li<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// $('.son').click(function()&#123;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     alert('我是原本就有的li');</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 原本的单击事件也可以不需要了</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">'button'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">'.father'</span>).append(<span class="string">'&lt;li&gt;我是新增的li&lt;/li&gt;'</span>)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 通过事件委托，新添加的也能有弹窗</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">'.father'</span>).delegate(<span class="string">'li'</span>,<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">'我是li'</span>);</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>改用事件委托后，不管是新添加的还是本身就存在的li，都能成功的弹窗(原理是向上冒泡，所以要支持冒泡的事件才能有效果)</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jQuery中也有许多事件处理的函数，功能强大，使用起来也比原声js要更加的简单和方便，这次学习以下jQuery的事件处理函数与冒泡行为以及自定义事件等等，以及动手实践，编写实例。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>jQuery实现轮播图</title>
    <link href="https://q32757468.github.io/2019/05/13/jQuery%E5%AE%9E%E7%8E%B0%E8%BD%AE%E6%92%AD%E5%9B%BE/"/>
    <id>https://q32757468.github.io/2019/05/13/jQuery实现轮播图/</id>
    <published>2019-05-13T12:07:57.000Z</published>
    <updated>2019-05-13T12:45:34.291Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最近开始尝试着自己写轮播图，知道轮播图的原理，通过js顶死器不断的重复的给要轮播的图片添加和删除样式，在css样式中通过display中的 none 和block 来切换显示的图片，再加上过渡效果即可实现好看的轮播图，我准备用递归函数写，但是却不知道在哪出现了问题，能够实现第一轮的正常轮播，但是后面的轮播却会出现问题，不断的检查问题，还是没有找出问题，最后放弃用递归的写法，再参考别人的代码，成功实现了轮播图功能。<br><a id="more"></a><br><strong>直接放上代码:</strong></p><ul><li>html部分：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"lunbo"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"imgs"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 两个左右切换的按钮 --&gt;</span></span><br><span class="line">        &lt;span class="left"&gt;&lt;&lt;/span&gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>&gt;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 需要轮播的六张图片 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"current"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/a.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/b.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/c.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/d.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/e.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/f.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 图片下面部分可以用来切换图片的圆点 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dot"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"current"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></blockquote><p>html部分比较简单。</p><ul><li>css部分<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.lunbo</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.lunbo</span> <span class="selector-tag">img</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">450px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">font-weight</span>: bolder;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">99</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">    background: #ccc;;</span><br><span class="line">    <span class="selector-tag">top</span>: 135<span class="selector-tag">px</span>;</span><br><span class="line">    <span class="selector-tag">font-size</span>: 60<span class="selector-tag">px</span>;</span><br><span class="line">    <span class="selector-tag">text-align</span>: <span class="selector-tag">center</span>;</span><br><span class="line">    <span class="selector-tag">opacity</span>: 0<span class="selector-class">.3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">font-weight</span>: bolder;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">99</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">    background: #ccc;;</span><br><span class="line">    <span class="selector-tag">top</span>: 135<span class="selector-tag">px</span>;</span><br><span class="line">    <span class="selector-tag">font-size</span>: 60<span class="selector-tag">px</span>;</span><br><span class="line">    <span class="selector-tag">text-align</span>: <span class="selector-tag">center</span>;</span><br><span class="line">    <span class="selector-tag">opacity</span>: 0<span class="selector-class">.3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.imgs</span>&gt;<span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="comment">/* 先设置所有的图片都不显示 */</span></span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.imgs</span> <span class="selector-class">.current</span>&#123;</span><br><span class="line">    <span class="comment">/* 让第一张图片显示 */</span></span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.dot</span> <span class="selector-class">.current</span>&#123;</span><br><span class="line">    <span class="comment">/* 通过给小圆点来添加current类来使其变为红点 */</span></span><br><span class="line">    <span class="attribute">background</span>:red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.dot</span>&#123;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">99</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">300px</span>;</span><br><span class="line">    <span class="comment">/* 可以使所有的小圆点整体居中 */</span></span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%, -50%);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.dot</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="comment">/* 小圆点的默认样式 */</span></span><br><span class="line">    <span class="attribute">background</span>: white;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>:<span class="number">50%</span>; </span><br><span class="line">    <span class="attribute">display</span>: inline-block;   </span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.dot</span>&gt;<span class="selector-tag">li</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="comment">/* 使鼠标经过左右切换的按钮变为一只手 */</span></span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>很正常的css样式设置，很多地方还不是特别的熟练，不是完美，代码还有很多可以优化的地方。</p><ul><li><p>js部分</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> cur = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> len = $(<span class="string">".imgs&gt;ul li"</span>).length;</span><br><span class="line">    <span class="comment">// 右切换</span></span><br><span class="line">    $(<span class="string">'.right'</span>).click(<span class="function"><span class="keyword">function</span> <span class="title">chr</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        cur = $(<span class="string">'.dot&gt;.current'</span>).index();</span><br><span class="line">        <span class="keyword">if</span> (cur == <span class="number">5</span>) &#123;</span><br><span class="line">            $(<span class="string">".imgs&gt;ul li"</span>).eq(<span class="number">0</span>).fadeIn(<span class="number">400</span>).siblings(<span class="string">"li"</span>).fadeOut(<span class="number">400</span>);</span><br><span class="line">            $(<span class="string">".dot&gt;li"</span>).eq(<span class="number">0</span>).addClass(<span class="string">"current"</span>).siblings().removeClass(<span class="string">"current"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        $(<span class="string">".dot&gt;li"</span>).eq(cur + <span class="number">1</span>).addClass(<span class="string">"current"</span>).siblings().removeClass(<span class="string">"current"</span>);</span><br><span class="line">        $(<span class="string">".imgs&gt;ul li"</span>).eq(cur + <span class="number">1</span>).fadeIn(<span class="number">400</span>).siblings(<span class="string">"li"</span>).fadeOut(<span class="number">400</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 左切换</span></span><br><span class="line">    $(<span class="string">'.left'</span>).click(<span class="function"><span class="keyword">function</span> <span class="title">chl</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        cur = $(<span class="string">'.dot&gt;.current'</span>).index();</span><br><span class="line">        <span class="keyword">if</span> (cur == <span class="number">0</span>) &#123;</span><br><span class="line">            $(<span class="string">".imgs&gt;ul li"</span>).eq(<span class="number">5</span>).fadeIn(<span class="number">400</span>).siblings(<span class="string">"li"</span>).fadeOut(<span class="number">400</span>);</span><br><span class="line">            $(<span class="string">".dot&gt;li"</span>).eq(<span class="number">5</span>).addClass(<span class="string">"current"</span>).siblings().removeClass(<span class="string">"current"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        $(<span class="string">".dot&gt;li"</span>).eq(cur - <span class="number">1</span>).addClass(<span class="string">"current"</span>).siblings().removeClass(<span class="string">"current"</span>);</span><br><span class="line">        $(<span class="string">".imgs&gt;ul li"</span>).eq(cur - <span class="number">1</span>).fadeIn(<span class="number">400</span>).siblings(<span class="string">"li"</span>).fadeOut(<span class="number">400</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//鼠标滑过容器停止播放</span></span><br><span class="line">    $(<span class="string">".imgs"</span>).hover(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        clearInterval(timer);</span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        showImg();</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 遍历所有圆点导航实现划过切换至对应的图片</span></span><br><span class="line">    $(<span class="string">".dot&gt;li"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        clearInterval(timer);</span><br><span class="line">        cur = $(<span class="keyword">this</span>).index();</span><br><span class="line">        $(<span class="keyword">this</span>).addClass(<span class="string">"current"</span>).siblings().removeClass(<span class="string">"current"</span>);</span><br><span class="line">        $(<span class="string">".imgs&gt;ul li"</span>).eq(cur).fadeIn(<span class="number">400</span>).siblings(<span class="string">"li"</span>).fadeOut(<span class="number">400</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//定义图片切换函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">showImg</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            cur++;</span><br><span class="line">            <span class="keyword">if</span> (cur &gt;= len) &#123;</span><br><span class="line">                cur = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            $(<span class="string">".imgs&gt;ul li"</span>).eq(cur).fadeIn(<span class="number">400</span>).siblings(<span class="string">"li"</span>).fadeOut(<span class="number">400</span>);</span><br><span class="line">            $(<span class="string">".dot&gt;li"</span>).eq(cur).addClass(<span class="string">"current"</span>).siblings().removeClass(<span class="string">"current"</span>);</span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    showImg();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>最后整体思路没有变，但图片的切换就没有通过切换类来实现，而是使用了更加方便的jQuery的fadeIn()方法和fadeOut()，可以直接实现淡入淡出效果。</p></li><li>小圆点切换的实现还是通过切换类的方法</li><li>鼠标移到图片上自动停止播放则是通过jQuery的hover方法来实现的，移入的时候清除定时器，移出的时候再次执行切换函数的图片</li><li>点击小圆点切换图片这是通过，获取点击的那个小圆点的索引来定向切换图片</li><li>左右切换是获取当前小圆点的索引来定位，然后单击切换到下一张图片<br>写这个花了很多时间，不过最后还是完成了，也学会了很多其他的东西。</li></ul><p><em>最后是效果图</em><br><img src="http://m.qpic.cn/psb?/V131x4904WMIoW/gzDnChJBBj1zWVbIW2LTrUVXeKgmHGdz074rBbabFqU!/b/dLYAAAAAAAAA&bo=ewdXAgAAAAADBws!&rf=viewer_4"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;最近开始尝试着自己写轮播图，知道轮播图的原理，通过js顶死器不断的重复的给要轮播的图片添加和删除样式，在css样式中通过display中的 none 和block 来切换显示的图片，再加上过渡效果即可实现好看的轮播图，我准备用递归函数写，但是却不知道在哪出现了问题，能够实现第一轮的正常轮播，但是后面的轮播却会出现问题，不断的检查问题，还是没有找出问题，最后放弃用递归的写法，再参考别人的代码，成功实现了轮播图功能。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>关于float与inlie-block的使用</title>
    <link href="https://q32757468.github.io/2019/05/13/%E5%85%B3%E4%BA%8Efloat%E4%B8%8Einlie-block%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://q32757468.github.io/2019/05/13/关于float与inlie-block的使用/</id>
    <published>2019-05-13T10:39:25.000Z</published>
    <updated>2019-05-21T10:47:25.775Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;虽然之前有使用过float来把元素进行布局，但是发现这种方法存在缺点，后面发现还有display:inlie-block也能用来布局，但是在实际使用过后同样也发现一些问题，这次来讲一下这两种方式存在的问题以及解决办法。<br><a id="more"></a></p></blockquote><h3 id="关于float的使用"><a href="#关于float的使用" class="headerlink" title="关于float的使用"></a>关于float的使用</h3><h4 id="使用float时存在的问题"><a href="#使用float时存在的问题" class="headerlink" title="使用float时存在的问题"></a>使用float时存在的问题</h4><p><img src="http://m.qpic.cn/psb?/V131x4904WMIoW/hFu3dMSC9pgEHXrl8dTPfEbvDBq24XikuyEAK4UQtl0!/b/dMAAAAAAAAAA&bo=gAcSBAAAAAADB7M!&rf=viewer_4"></p><p>可以看出当我们对子元素的div使用了float的时候，子元素成功浮动在了一行，但是父元素却出现了问题，父元素的宽度并没有被撑起，而是高度塌陷了，成为了一条线，这是因为使用了float之后会使文档脱离标准流，从而没有元素撑起父元素的高度。那么为了解决这个问题也有许多办法。</p><h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><h5 id="给父级元素设置一个固定的高度"><a href="#给父级元素设置一个固定的高度" class="headerlink" title="给父级元素设置一个固定的高度"></a>给父级元素设置一个固定的高度</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缺点：不够灵活</p><h5 id="也给父级加上浮动"><a href="#也给父级加上浮动" class="headerlink" title="也给父级加上浮动"></a>也给父级加上浮动</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缺点：会使父级与其他元素的关系发生变化，不推荐使用</p><h5 id="给父级使用overflow-zoom"><a href="#给父级使用overflow-zoom" class="headerlink" title="给父级使用overflow  + zoom"></a>给父级使用overflow  + zoom</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span>&#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">zoom</span>:<span class="number">1</span>; <span class="comment">/* 兼容处理,触发IE6/7的haslayout */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缺点：如果使用了定位，或者设置了边距的话，超出了父级的话将被隐藏<br>但是使用起来比较方便，副作用也比较小比较好控制，推荐使用</p><h5 id="在父级中加上一个div"><a href="#在父级中加上一个div" class="headerlink" title="在父级中加上一个div"></a>在父级中加上一个div</h5><ul><li>兼容性较强</li><li>但是代码较多，且不利于维护优化</li></ul><h5 id="使用after伪元素"><a href="#使用after伪元素" class="headerlink" title="使用after伪元素"></a>使用after伪元素</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">"."</span>;         <span class="comment">/*生成内容作为最后一个元素，至于content里面是什么没有影响*/</span></span><br><span class="line">    <span class="attribute">display</span>: block;       <span class="comment">/*使得生成的元素以块级元素显示，占满剩余空间*/</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;            <span class="comment">/*避免生成的内容破坏原有空间的高度*/</span></span><br><span class="line">    <span class="attribute">clear</span>: both;          <span class="comment">/*闭合浮动*/</span></span><br><span class="line">    <span class="attribute">visibility</span>: hidden;   <span class="comment">/*使得生成内容不可见，并允许可能生成内容盖住的内容进行点击和交互*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了代码较多不好记之外是比较完美的解决方案，推荐使用。</p><hr><p><img src="http://m.qpic.cn/psb?/V131x4904WMIoW/h*RnPv4cAn236H0pKOimXF0K5BtXCd*BWO0fHY.iz2M!/b/dL8AAAAAAAAA&bo=gAcSBAAAAAADF6M!&rf=viewer_4"><br>使用了以上的办法，可以发现问题都能成功的解决。</p><h3 id="关于display-inlie-block的使用"><a href="#关于display-inlie-block的使用" class="headerlink" title="关于display:inlie-block的使用"></a>关于display:inlie-block的使用</h3><h4 id="使用display-inlie-block时存在的问题"><a href="#使用display-inlie-block时存在的问题" class="headerlink" title="使用display:inlie-block时存在的问题"></a>使用display:inlie-block时存在的问题</h4><p><img src="http://m.qpic.cn/psb?/V131x4904WMIoW/xyPesPY7PBgaYF0GoJVet7en.nQOe.ffy6QfzKyNzhM!/b/dLYAAAAAAAAA&bo=gAcSBAAAAAADB7M!&rf=viewer_4"><br>可以看出在使用display:inlie-block之后虽然子元素能够横向排列了，但是他们之间却会出现间隙，不过这种间隙不是来自边距，而是因为我们在书写div时回车会产生回车符，回车符相当于空白符，通常情况下，多个连续的空白符会合并成一个空白符，而产生“空白间隙”的真正原因就是这个让我们并不怎么注意的空白符。</p><h4 id="解决办法-1"><a href="#解决办法-1" class="headerlink" title="解决办法"></a>解决办法</h4><p>我们可以发现其实这个空白符的间距其实是和字体大小有关系的，所以我们只需要将父级的字体大小设为0即可消去空白符。<br><img src="http://m.qpic.cn/psb?/V131x4904WMIoW/n7IFt0AsI0NUFgDZWjetPeLuM4wGFTcOtI8rODlu76w!/b/dLYAAAAAAAAA&bo=gAcSBAAAAAADB7M!&rf=viewer_4"><br>我们可以看到空白符已经被消去了，但是里面的字也不见了，所以我们要记得给子元素设置字体大小。</p><h4 id="后面又发现的问题"><a href="#后面又发现的问题" class="headerlink" title="后面又发现的问题"></a>后面又发现的问题</h4><p><img src="http://m.qpic.cn/psb?/V131x4904WMIoW/5GwG*x0yPGXDrqTdn7wYqsS.MUQWKTvx2MfbVl42CP8!/b/dL4AAAAAAAAA&bo=gAcSBAAAAAADB7M!&rf=viewer_4"></p><ul><li>通过图片我们可以看出，第一个和第三个子元素没有内容，那么他们就不会和有内容的子元素同占一行，会发生错位</li><li>而将他们同时设为有内容或者没有内容的时候这种情况就消失了，所以要十分注意这个问题</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;虽然之前有使用过float来把元素进行布局，但是发现这种方法存在缺点，后面发现还有display:inlie-block也能用来布局，但是在实际使用过后同样也发现一些问题，这次来讲一下这两种方式存在的问题以及解决办法。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>jQuery学习（css样式操作）</title>
    <link href="https://q32757468.github.io/2019/05/12/jQuery%E5%AD%A6%E4%B9%A0%EF%BC%88css%E6%A0%B7%E5%BC%8F%E6%93%8D%E4%BD%9C%EF%BC%89/"/>
    <id>https://q32757468.github.io/2019/05/12/jQuery学习（css样式操作）/</id>
    <published>2019-05-12T04:35:54.000Z</published>
    <updated>2019-05-12T07:05:22.113Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>这次学了jQuery关于css样式的操作，通过jQuery的方法给元素添加修改样式以及改变和获取元素的各种宽高。<br><a id="more"></a></p></blockquote><h3 id="操作css样式"><a href="#操作css样式" class="headerlink" title="操作css样式"></a>操作css样式</h3><ul><li>css(name|pro|[,val|fn])方法<br>格式1:DOM元素.css(“样式名称”, “值”);<br>格式2:DOM元素.css({“样式名称1”:”值1”,”样式名称2”:”值2”}); <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> $test=$(<span class="string">'.test'</span>);</span></span><br><span class="line"><span class="javascript">    $test.css(<span class="string">'height'</span>,<span class="string">'100px'</span>).css(<span class="string">'outline'</span>,<span class="string">'1px solid red'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 这是第一种写法，添加多个css样式</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">'.test'</span>).css(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="string">'width'</span>:<span class="string">'200px'</span>,</span></span><br><span class="line"><span class="javascript">        <span class="string">'font-size'</span>:<span class="string">'30px'</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 这是第二种添加css样式的方法</span></span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span>这是一个测试div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="操作尺寸"><a href="#操作尺寸" class="headerlink" title="操作尺寸"></a>操作尺寸</h3><h4 id="width-val-fn-方法"><a href="#width-val-fn-方法" class="headerlink" title="width([val|fn])方法"></a>width([val|fn])方法</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> $test=$(<span class="string">'.test'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($test.width());</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 获取到数值为1520</span></span></span><br><span class="line"><span class="javascript">    $test.width(<span class="string">'200px'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 设置元素宽度为200px</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($test.width());</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 结果为200</span></span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span>这是一个测试div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="height-val-fn-方法"><a href="#height-val-fn-方法" class="headerlink" title="height([val|fn])方法"></a>height([val|fn])方法</h4><ul><li>用法与效果与width方法一致</li></ul><h4 id="innerHeight-innerWidth"><a href="#innerHeight-innerWidth" class="headerlink" title="innerHeight()/innerWidth()"></a>innerHeight()/innerWidth()</h4><p>获取第一个匹配元素内部区域高度/宽度（包括补白、不包括边框）。</p><h4 id="outerHeight-outerWidth"><a href="#outerHeight-outerWidth" class="headerlink" title="outerHeight/outerWidth()"></a>outerHeight/outerWidth()</h4><ul><li>获取第一个匹配元素外部高度（默认包括补白和边框）。</li><li>设置为 true 时，计算边距在内。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> $test=$(<span class="string">'.test'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($test.outerHeight());</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 21</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($test.height());</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 21</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($test.outerHeight(<span class="literal">true</span>));</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 填入参数true时会获取边距的数值，此时设置了外边距，值为41    </span></span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span>这是一个测试div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="操作和获取元素位置"><a href="#操作和获取元素位置" class="headerlink" title="操作和获取元素位置"></a>操作和获取元素位置</h3><h4 id="offset-coordinates"><a href="#offset-coordinates" class="headerlink" title="offset([coordinates])"></a>offset([coordinates])</h4><ul><li>获取或设置元素相对窗口的偏移位<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.test</span>&#123;</span></span><br><span class="line"><span class="undefined">    margin-top: 2000px;</span></span><br><span class="line"><span class="undefined">    outline: 1px solid red;</span></span><br><span class="line"><span class="undefined">    height: 20px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> $test=$(<span class="string">'.test'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($test.offset().top);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 获取到值为2000</span></span></span><br><span class="line"><span class="undefined">    $test.offset(&#123;top:200,left:200&#125;);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($test.offset());</span></span><br><span class="line"><span class="javascript">    <span class="comment">// [object Object]: &#123;left: 200, top: 200&#125;，位置成功发生变化</span></span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span>这是一个测试div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="position"><a href="#position" class="headerlink" title="position()"></a>position()</h4><p>获取匹配元素相对父元素的偏移。<br>返回的对象包含两个整型属性：top 和 left。为精确计算结果，请在补白、边框和填充属性上使用像素单位。此方法只对可见元素有效。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.test</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="comment">/* margin-top: 2000px; */</span></span></span><br><span class="line"><span class="undefined">    outline: 1px solid red;</span></span><br><span class="line"><span class="undefined">    height: 20px;</span></span><br><span class="line"><span class="undefined">    position: absolute;</span></span><br><span class="line"><span class="undefined">    top: 20px;</span></span><br><span class="line"><span class="undefined">    left: 20px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.father</span>&#123;</span></span><br><span class="line"><span class="undefined">    position: relative;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> $test=$(<span class="string">'.test'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($test.position());</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 成功获取到了绝对定位的数值20，20  </span></span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"father"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span>这是一个测试div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="scrollTop-val-与scrollLeft-val"><a href="#scrollTop-val-与scrollLeft-val" class="headerlink" title="scrollTop([val])与scrollLeft([val])"></a>scrollTop([val])与scrollLeft([val])</h4><p>获取匹配元素相对滚动条顶部的偏移。<br>此方法对可见和隐藏元素均有效。<br>下面以scrollTo()为例：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.test</span>&#123;</span></span><br><span class="line"><span class="undefined">    margin-top: 2000px;</span></span><br><span class="line"><span class="undefined">    outline: 1px solid red;</span></span><br><span class="line"><span class="undefined">    height: 20px;</span></span><br><span class="line"><span class="undefined">    position: absolute;</span></span><br><span class="line"><span class="undefined">    top: 20px;</span></span><br><span class="line"><span class="undefined">    left: 20px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">button&#123;</span></span><br><span class="line"><span class="undefined">    margin-top: 200px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($(<span class="string">'html'</span>).scrollTop()+$(<span class="string">'body'</span>).scrollTop());</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 当拖动滚轮，点击按钮获取数值，数值能够正确显示。</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">'button'</span>).eq(<span class="number">0</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    alert(($(<span class="string">'html'</span>).scrollTop()+$(<span class="string">'body'</span>).scrollTop()));</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 兼容处理，保证所有浏览器都能正确获取数值</span></span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'button'</span>).eq(<span class="number">1</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'html'</span>).scrollTop(<span class="number">300</span>)+$(<span class="string">'body'</span>).scrollTop(<span class="number">300</span>);</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"father"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span>这是一个测试div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>显示scrolltop<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>设置scrolltop<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;这次学了jQuery关于css样式的操作，通过jQuery的方法给元素添加修改样式以及改变和获取元素的各种宽高。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>关于css选择器的一个小小的问题</title>
    <link href="https://q32757468.github.io/2019/05/12/%E5%85%B3%E4%BA%8Ecss%E9%80%89%E6%8B%A9%E5%99%A8%E7%9A%84%E4%B8%80%E4%B8%AA%E5%B0%8F%E5%B0%8F%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://q32757468.github.io/2019/05/12/关于css选择器的一个小小的问题/</id>
    <published>2019-05-12T02:15:53.000Z</published>
    <updated>2019-05-14T07:11:22.782Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>昨天在写一个页面的时候，写到css样式的时候，出现了一个问题,让我有一开始有点想不明白，后面明白了，记录一下。</p></blockquote><h3 id="问题情况："><a href="#问题情况：" class="headerlink" title="问题情况："></a>问题情况：</h3><ul><li><p>这是html代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"father"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"son"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>这是css代码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:none; </span><br><span class="line">    <span class="comment">/* 此时这个div块中的所有内容都将不显示 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:block;</span><br><span class="line">    <span class="comment">/* 起初我认为此时这个li中放的所有内容都应该显示，但是我在li中放的图片并没有显示，我就去查看控制台的样式，发现在这个li中的样式是有block这个属性但是并没有生效。 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.father</span> <span class="selector-tag">ul</span> <span class="selector-class">.son</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:block;</span><br><span class="line">    <span class="comment">/* 后面我尝试着这样写，却发现这下图片就显示出来了 ，随后并猜测是选择器优先级的问题，随即查阅资料，发现组合选择器的优先级为成员选择器的权重相加，只写一个类选择器干不过上面的多个选择器权重相加，所以多组合一些就好了，或者用!important 来拉满。*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>选择器的权重问题。<br>虽然以前看到过选择器优先级相关的知识，但是还没有接触过很多这种情况，以后要注意！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;昨天在写一个页面的时候，写到css样式的时候，出现了一个问题,让我有一开始有点想不明白，后面明白了，记录一下。&lt;/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>jQuery学习（核心函数）</title>
    <link href="https://q32757468.github.io/2019/05/10/jQuery%E5%AD%A6%E4%B9%A0%EF%BC%88%E6%A0%B8%E5%BF%83%E5%87%BD%E6%95%B0%EF%BC%89/"/>
    <id>https://q32757468.github.io/2019/05/10/jQuery学习（核心函数）/</id>
    <published>2019-05-10T05:08:50.000Z</published>
    <updated>2019-05-12T04:33:49.215Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>记录了jQuery的核心函数以及jQuery对象，jQuery的静态方法的使用。<br><a id="more"></a></p></blockquote><h3 id="jQuery核心函数"><a href="#jQuery核心函数" class="headerlink" title="jQuery核心函数"></a>jQuery核心函数</h3><h4 id="jQuery核心函数一共3大类4小类"><a href="#jQuery核心函数一共3大类4小类" class="headerlink" title="jQuery核心函数一共3大类4小类"></a>jQuery核心函数一共3大类4小类</h4><ul><li>jQuery(callback)<br>当DOM加载完成后执行传入的回调函数</li><li>jQuery([sel,[context]])<br>接收一个包含 CSS 选择器的字符串，然后用这个字符串去匹配一组元素,并包装成jQuery对象,也就是jQuery的选择器。</li><li><p>jQuery(html,[ownerDoc])<br>根据 HTML 标记字符串，动态创建DOM 元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> $text=$(<span class="string">"&lt;p&gt;这是一段文字&lt;/p&gt;"</span>);</span></span><br><span class="line"><span class="javascript">    $(<span class="string">"body"</span>).append($text);</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">```        </span><br><span class="line">### jQuery对象</span><br><span class="line">* jQuery对象的本质是什么? </span><br><span class="line">jQuery对象的本质是一个伪数组</span><br><span class="line">```html</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> $div = $(<span class="string">'div'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log($div);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// [object Object]: &#123;0: Object, context: Object, length: 1, prevObject: Object, selector: "div"&#125;</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>什么是伪数组?<br>有0到length-1的属性,并且有length属性</p></li></ul><h3 id="jQuery静态方法"><a href="#jQuery静态方法" class="headerlink" title="jQuery静态方法"></a>jQuery静态方法</h3><ul><li>什么是静态方法?<br>静态方法对应的是对象方法,对象方法用实例对象调用,而静态方法用类名调用</li></ul><h4 id="jQuery-holdReady-hold"><a href="#jQuery-holdReady-hold" class="headerlink" title="jQuery.holdReady(hold)"></a>jQuery.holdReady(hold)</h4><p>暂停或者恢复jQuery.ready()事件<br>传入true或false<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 使用$直接调用,是静态方法</span></span></span><br><span class="line"><span class="javascript">        $.holdReady(<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 暂停住了</span></span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#first"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">"我是你想要的弹窗"</span>);</span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"first"</span>&gt;</span>点击测试弹出<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"second"</span>&gt;</span>解除延迟<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    $(<span class="string">"#second"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        $.holdReady(<span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 单击会触发这个，然后恢复</span></span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="each-object-callback"><a href="#each-object-callback" class="headerlink" title="$.each(object,[callback])"></a>$.each(object,[callback])</h4><p>遍历对象或数组<br>优点统一遍历对象和数组的方式<br>回调参数的顺序更符合我们的思维模式</p><h4 id="map-arr-obj-callback"><a href="#map-arr-obj-callback" class="headerlink" title="$.map(arr|obj,callback)"></a>$.map(arr|obj,callback)</h4><p>遍历对象或数组,将回调函数的返回值组成一个新的数组返回</p><h4 id="trim-str"><a href="#trim-str" class="headerlink" title="$.trim(str)"></a>$.trim(str)</h4><p>去掉字符串起始和结尾的空格。</p><h4 id="isArray-obj"><a href="#isArray-obj" class="headerlink" title="$.isArray(obj)"></a>$.isArray(obj)</h4><p>判断是否是数组</p><h4 id="isFunction-obj"><a href="#isFunction-obj" class="headerlink" title="$.isFunction(obj)"></a>$.isFunction(obj)</h4><p>判断是否是函数</p><h4 id="isWindow-obj"><a href="#isWindow-obj" class="headerlink" title="$.isWindow(obj)"></a>$.isWindow(obj)</h4><p>判断是否是window对象</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;记录了jQuery的核心函数以及jQuery对象，jQuery的静态方法的使用。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>jQuery学习（入口函数与冲突问题）</title>
    <link href="https://q32757468.github.io/2019/05/10/jQuery%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%85%A5%E5%8F%A3%E5%87%BD%E6%95%B0%E4%B8%8E%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98%EF%BC%89/"/>
    <id>https://q32757468.github.io/2019/05/10/jQuery学习（入口函数与冲突问题）/</id>
    <published>2019-05-10T04:39:20.000Z</published>
    <updated>2019-05-12T04:33:41.494Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>jQuery入口函数与原声js入口函数的区别，以及解决冲突问题，还有一些小细节，帮助我学习。<br><a id="more"></a></p></blockquote><h3 id="jQuery入口函数"><a href="#jQuery入口函数" class="headerlink" title="jQuery入口函数"></a>jQuery入口函数</h3><ul><li>多个window.onload只会执行一次, 后面的会覆盖前面的</li><li>多个$(document).ready()会执行多次,后面的不会覆盖前面的</li><li>不会覆盖的本质(了解,后面jQuery原理会详细讲解)<br>jQuery框架本质是一个闭包,每次执行我们都会给ready函数传递一个新的函数,不同函数内部的数据不会相互干扰</li></ul> <table><thead><tr><th></th><th>window.onload</th><th>$(document).ready()</th></tr></thead><tbody><tr><td>执行时机</td><td>必须等待网页全部加载完毕(包括 图片等),然后再执行包裹代码</td><td>只需要等待网页中的DOM结构 加载完毕,就能执行包裹的代码</td></tr><tr><td>执行次数</td><td>只能执行一次,如果第二次,那么 第一次的执行会被覆盖</td><td>可以执行多次,第N次都不会被上 一次覆盖</td></tr><tr><td>简写方案</td><td>无</td><td>$(function () { });</td></tr></tbody></table><h3 id="解决-符号冲突问题"><a href="#解决-符号冲突问题" class="headerlink" title="解决$符号冲突问题"></a>解决$符号冲突问题</h3><ul><li>为什么是window.jQuery = window.$ = jQuery;,而不是window.jQuery  = jQuery;</li></ul><p>jQuery框架之所以提供了jQuery访问还提供$访问,就是为了提升开发者的编码效率</p><ul><li>$符号冲突怎么办?</li></ul><p>很多js的框架都提供了类似jQuery这样的便捷访问方式,所以很有可能某一天我们在使用多个框架的时,多个框架作者提供的便捷访问方式冲突(A框架通过$访问,B框架也通过$访问)</p><p>***释放$使用权</p><p>当便捷访问符号发生冲突时,我们可以释放$使用权, 释放之后只能使用jQuery</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;jQuery入口函数与原声js入口函数的区别，以及解决冲突问题，还有一些小细节，帮助我学习。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>jQuery学习（介绍与使用）</title>
    <link href="https://q32757468.github.io/2019/05/10/jQuery%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%89/"/>
    <id>https://q32757468.github.io/2019/05/10/jQuery学习（介绍与使用）/</id>
    <published>2019-05-10T03:11:57.000Z</published>
    <updated>2019-05-12T04:33:29.203Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>对于前端来说，学习掌握jQuery是基础，则将会是我学习jQuery的记录。jQuery中文文档：<a href="http://hemin.cn/jq/。" target="_blank" rel="noopener">http://hemin.cn/jq/。</a></p></blockquote><h3 id="jQuery是什么？"><a href="#jQuery是什么？" class="headerlink" title="jQuery是什么？"></a>jQuery是什么？</h3><ul><li>jQuery是一款优秀的JavaScript库，从命名可以看出jQuery最主要的用途是用来做查询（jQuery=js+Query）.</li><li>在jQuery官方Logo下方还有一个副标题（write less, do more）, 体现了jQuery除了查询以外,还能让我们对HTML文档遍历和操作、事件处理、动画以及Ajax变得更加简单</li></ul><h3 id="为什么要使用jQuery？"><a href="#为什么要使用jQuery？" class="headerlink" title="为什么要使用jQuery？"></a>为什么要使用jQuery？</h3><ul><li>强大选择器: 方便快速查找DOM元素<br>如上面实例所展示一样，通过jQuery查找DOM元素要比原生js快捷很多<br>jQuery允许开发者使用CSS1-CSS3几乎所有的选择器,以及jQuery独创的选择器</li></ul><hr><p>以下是一段jQuery代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test1"</span>&gt;</span>这是1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>这是0<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test2"</span>&gt;</span>这是2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">".test1"</span>).css(<span class="string">'width'</span>,<span class="string">'100px'</span>).css(<span class="string">'height'</span>,<span class="string">'200px'</span>);</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"#test2"</span>).css(<span class="string">'background'</span>,<span class="string">'blue'</span>);</span></span><br><span class="line"><span class="javascript">         <span class="comment">// 读取数据</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> $tx = $(<span class="string">"div"</span>).eq(<span class="number">0</span>).text();</span></span><br><span class="line"><span class="undefined">        alert($tx);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 写入数据</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">"div"</span>).eq(<span class="number">0</span>).text(<span class="string">"新的数据"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>通过以上代码可以看出，jQuery查找元素要快的多，方便的多，并且jQuery可以不断的调用jQuery对象的方法，并且可以一次操作。读取数据也是一个函数，使用比较方便</strong></p><ul><li>事件处理</li><li>DOM操作(C增U改D删)</li><li>样式操作</li><li>动画</li><li>丰富的插件支持</li><li>浏览器兼容(前端开发者痛点) </li></ul><h3 id="如何使用jQuery？"><a href="#如何使用jQuery？" class="headerlink" title="如何使用jQuery？"></a>如何使用jQuery？</h3><p>下载过后这样调用就可以了：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../jquery-1.12.4.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;对于前端来说，学习掌握jQuery是基础，则将会是我学习jQuery的记录。jQuery中文文档：&lt;a href=
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>关于classList的使用</title>
    <link href="https://q32757468.github.io/2019/05/10/%E5%85%B3%E4%BA%8EclassList%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://q32757468.github.io/2019/05/10/关于classList的使用/</id>
    <published>2019-05-10T02:32:13.000Z</published>
    <updated>2019-05-10T02:44:56.391Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>关于classList的学习总结，作为DOMTokenList对象该属性用于在元素中添加、移出、切换css类，使用classList可以实现十分多的功能，十分的有用，以下是我的学习笔记。<br><a id="more"></a></p></blockquote><p>语法：elem.classList<br>方法：<br>add( String[,String])：添加指定的类值。如果这些类已经存在于元素的属性中，那么他们将被忽略<br>remove(String[,String])：删除指定的类值item(Number)：按集合中的索引返回类值<br>toggle(String[,force])：</p><ul><li>当只有一个参数的时，切换class value ，即如果类存在，删除它，并返回false，如果类不存在，则添加它并返回true。</li><li>当存在第二个参数时，如果第二个参数的计算结果为true，则添加指定的类值，如果计算结果为false，则删除它</li></ul><p>contains(string)：检查元素的类属性中是否存在指定的类值<br>属性：<br>length：返回类列表中类的数量，该属性是只读的</p><p>下面是利用classList实现标签栏切换的一个小例子：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    div &#123;</span></span><br><span class="line"><span class="undefined">       width: 500px;</span></span><br><span class="line"><span class="undefined">        margin: 10px;        </span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.db</span>&#123;</span></span><br><span class="line"><span class="undefined">        height: 50px;</span></span><br><span class="line"><span class="undefined">        width: 300px;</span></span><br><span class="line"><span class="undefined">        margin: 0 auto;</span></span><br><span class="line"><span class="undefined">        border: none;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.dh</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background</span>: <span class="selector-id">#666</span>;</span></span><br><span class="line"><span class="undefined">        height: 25px;</span></span><br><span class="line"><span class="undefined">        width: 300px;</span></span><br><span class="line"><span class="undefined">        margin: 0 auto;</span></span><br><span class="line"><span class="undefined">        color: white;</span></span><br><span class="line"><span class="undefined">        text-align: center;</span></span><br><span class="line"><span class="undefined">        border: none;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.dhd</span>&#123;</span></span><br><span class="line"><span class="undefined">        margin: 0 0px;</span></span><br><span class="line"><span class="undefined">        width: 100px;</span></span><br><span class="line"><span class="undefined">        float: left;   </span></span><br><span class="line"><span class="undefined">        margin-top: 3px; </span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.dbd</span>&#123;</span></span><br><span class="line"><span class="undefined">        width: 100px;</span></span><br><span class="line"><span class="undefined">        height: 50px;</span></span><br><span class="line"><span class="undefined">        float: left;</span></span><br><span class="line"><span class="undefined">        margin: 0 0px;</span></span><br><span class="line"><span class="undefined">        display: none;</span></span><br><span class="line"><span class="undefined">        width: 300px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.current</span>&#123;</span></span><br><span class="line"><span class="undefined">        display: block;</span></span><br><span class="line"><span class="undefined">        background: white;</span></span><br><span class="line"><span class="undefined">        color: black;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.ttt</span>&#123;</span></span><br><span class="line"><span class="undefined">        border: 1px solid black;</span></span><br><span class="line"><span class="undefined">        width: 300px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ttt"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'dh'</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dhd current"</span>&gt;</span>标签栏一<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dhd"</span>&gt;</span>标签栏二<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dhd"</span>&gt;</span>标签栏三<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'db'</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dbd current"</span>&gt;</span>这是内容一<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dbd"</span>&gt;</span>这是内容二<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dbd"</span>&gt;</span>这是内容三<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 利用classList的方法给当前元素添加样式让其显示，其他元素默认不显示，以达到切换效果</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> hs=<span class="built_in">document</span>.getElementsByClassName(<span class="string">'dhd'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> ds=<span class="built_in">document</span>.getElementsByClassName(<span class="string">'dbd'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;hs.length;i++)&#123;</span></span><br><span class="line"><span class="javascript">            hs[i].onmouseover=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;ds.length;i++)&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span>(hs[i]==<span class="keyword">this</span>)&#123;</span></span><br><span class="line"><span class="javascript">                        ds[i].classList.add(<span class="string">'current'</span>);</span></span><br><span class="line"><span class="javascript">                        hs[i].classList.add(<span class="string">'current'</span>);</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                        ds[i].classList.remove(<span class="string">'current'</span>);</span></span><br><span class="line"><span class="javascript">                        hs[i].classList.remove(<span class="string">'current'</span>);</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;关于classList的学习总结，作为DOMTokenList对象该属性用于在元素中添加、移出、切换css类，使用classList可以实现十分多的功能，十分的有用，以下是我的学习笔记。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
