<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ranshan丶</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://q32757468.github.io/"/>
  <updated>2019-06-30T09:45:35.332Z</updated>
  <id>https://q32757468.github.io/</id>
  
  <author>
    <name>hsl</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue.js的学习（vue中的动画）</title>
    <link href="https://q32757468.github.io/2019/06/20/vue-js%E7%9A%84%E5%AD%A6%E4%B9%A0%EF%BC%88vue%E4%B8%AD%E7%9A%84%E5%8A%A8%E7%94%BB%EF%BC%89/"/>
    <id>https://q32757468.github.io/2019/06/20/vue-js的学习（vue中的动画）/</id>
    <published>2019-06-20T12:28:09.000Z</published>
    <updated>2019-06-30T09:45:35.332Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一开始在使用vue中的动画的时候我没有太明白究竟是个怎么样的机制，以及如何高度的定义一些动画，经过我的尝试，现在终于算是弄明白时怎么一回事了<a href="https://cn.vuejs.org/v2/guide/transitions.html#CSS-%E5%8A%A8%E7%94%BB" target="_blank" rel="noopener">这里是官方文档</a>。<br><a id="more"></a></p></blockquote><h3 id="vue中动画的特点"><a href="#vue中动画的特点" class="headerlink" title="vue中动画的特点"></a>vue中动画的特点</h3><p>vue中的动画主要分为两部分，一是进场动画，二是离场动画，vue中的动画主要是监听了设置动画的元素的显示和隐藏，当元素在页面中被显示的时候就会执行进场动画，当元素被隐藏的时候就会执行离场动画，我们可以通过设置两组类来设置离场动画和进场动画。</p><p><strong>一个简单的小例子</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    /* 这两个类一个是进入时候的动画效果，一个是离开时候的动画效果 */</span></span><br><span class="line"><span class="undefined">    .dh1-enter-active,</span></span><br><span class="line"><span class="undefined">    .dh1-leave-active &#123;</span></span><br><span class="line"><span class="undefined">        opacity: 1;</span></span><br><span class="line"><span class="undefined">        transition: all 1s ease;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    /* 这两个类一个是动画的起始位置,一个是动画结束的时候的位置 */</span></span><br><span class="line"><span class="undefined">    .dh1-enter,</span></span><br><span class="line"><span class="undefined">    .dh1-leave-to &#123;</span></span><br><span class="line"><span class="undefined">        transform: translateX(40px);</span></span><br><span class="line"><span class="undefined">        opacity: 0;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- vue中的动画可以分为两部分，一部分是进入的动画，一部分是离开的动画，当元素被隐藏的时候会触发离开的动画，出现的时候会触发进入的动画 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这是通过这种transition和两个种类来设置动画 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"flag=!flag"</span>&gt;</span>点击切换状态<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"flag2=!flag2"</span>&gt;</span>点击切换状态2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 通过添加appear 可以使动画在渲染到页面的时候就执行一次 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">"dh1"</span> <span class="attr">appear</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">"flag"</span>&gt;</span>这是一段话第一段话<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">"dh2"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">"flag2"</span> <span class="attr">:class</span>=<span class="string">"&#123;animated:true,bounce:true&#125;"</span>&gt;</span>这是一段话第二段话<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./../../js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        var vm = new Vue(&#123;</span></span><br><span class="line"><span class="undefined">            el: '#app',</span></span><br><span class="line"><span class="undefined">            data() &#123;</span></span><br><span class="line"><span class="undefined">                return &#123;</span></span><br><span class="line"><span class="undefined">                    flag: 'true',</span></span><br><span class="line"><span class="undefined">                    flag2: 'false',</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            methods: &#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="单元素过渡"><a href="#单元素过渡" class="headerlink" title="单元素过渡"></a>单元素过渡</h3><ul><li><p>可以看出其实vue中将动画主要分成了两部分</p><ul><li>一部分是入场时的动画，也就是动画从隐藏到显示的这个过程中所执行的动画</li><li>另一部分是离场动画也就是元素从显示到隐藏这个过程中所执行的动画</li></ul></li><li><p>可以通过4个类来分别控制动画，就像上面的例子中的那样</p></li><li><p>也可以通过vue来添加类来引用动画库中的动画</p></li></ul><h3 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h3><p>vue中的钩子函数将进场动画和离场动画进行了细分，包括进场前和执行动画时，以及动画结束后，通过设置钩子函数就可以对动画的各个时机进行详细的设置。<br>可以通过钩子函数来设置只进行进场动画或者离场动画，以及对外部引用的动画进行很好的控制。</p><p>可以通过这个例子看出来：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    .ball &#123;</span></span><br><span class="line"><span class="undefined">        width: 30px;</span></span><br><span class="line"><span class="undefined">        height: 30px;</span></span><br><span class="line"><span class="undefined">        background-color: bisque;</span></span><br><span class="line"><span class="undefined">        border-radius: 50%;</span></span><br><span class="line"><span class="undefined">        margin-top: 10px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通过钩子函数来实现动画就不再是通过设置样式来实现动画效果，而是通过js来设置样式来实现动画效果 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 也是分为几个阶段，主要是两部分，一是进场动画，一是离场动画 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 进场动画又分为 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 进场前：主要是通过设置style来设置起始时的样式位置之类的 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 进场时：主要通过设置style来设置动画结束时的位置，以及动画属性的设置如动画时常 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 进场后：动画完成后所执行的东西 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 其实钩子函数的原理还是对单元素的过渡做了封装，只不过是可以通过js来控制只进行进场动画或者只进行离场动画 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"flag=!flag"</span>&gt;</span>单击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transition</span> <span class="attr">v-on:before-enter</span>=<span class="string">"beforeEnter"</span> <span class="attr">v-on:enter</span>=<span class="string">"enter"</span> <span class="attr">v-on:after-enter</span>=<span class="string">"afterEnter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">"flag"</span> <span class="attr">class</span>=<span class="string">"ball"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./../../js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        var vm = new Vue(&#123;</span></span><br><span class="line"><span class="undefined">            el: '#app',</span></span><br><span class="line"><span class="undefined">            data() &#123;</span></span><br><span class="line"><span class="undefined">                return &#123;</span></span><br><span class="line"><span class="undefined">                    flag: false,</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            methods: &#123;</span></span><br><span class="line"><span class="undefined">                // 所有的钩子函数都必须传一个el参数，表示操作的原生dom对象</span></span><br><span class="line"><span class="undefined">                beforeEnter(el) &#123;</span></span><br><span class="line"><span class="undefined">                    el.style.transform = "translate(0,0)";</span></span><br><span class="line"><span class="undefined">                &#125;,</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">                enter(el, done) &#123; //在单纯的使用js钩子函数设置动画时必须传一个done参数来执行完成后的操作，这个done实际上是after-enter所绑定的方法</span></span><br><span class="line"><span class="undefined">                    el.offsetWidth; //这个必须加，不加出bug，没有为什么</span></span><br><span class="line"><span class="undefined">                    el.style.transform = "translate(40px,100px)";</span></span><br><span class="line"><span class="undefined">                    el.style.transition = "all 1s ease";</span></span><br><span class="line"><span class="undefined">                    done();</span></span><br><span class="line"><span class="undefined">                &#125;,</span></span><br><span class="line"><span class="undefined">                afterEnter(el) &#123;</span></span><br><span class="line"><span class="undefined">                    // 这里因为只需要重复这个半场动画，这个从隐藏到出现从上到下的过程，所以将元素设置为不显示，下次再单击的时候就又是执行的是从上到下的动画了</span></span><br><span class="line"><span class="undefined">                    this.flag = !this.flag;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="列表动画"><a href="#列表动画" class="headerlink" title="列表动画"></a>列表动画</h3><p>在前面的所有例子都是设置的单元素动画，不能用于设置列表中的动画，但我们需要设置一个列表动画，让其中的所有元素都有动画效果的时候，我们就可以使用<code>transition-group</code>这个标签来包裹我们想要设置动画的列表。<br>就像下面这个例子这样：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    span &#123;</span></span><br><span class="line"><span class="undefined">        margin: 5px;</span></span><br><span class="line"><span class="undefined">        /* 这里要注意一件事情，必须设置为inline-block,不然元素不会从下面出来，或者使用弹性布局也可以 */</span></span><br><span class="line"><span class="undefined">        display: inline-block;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    .v-enter-active,</span></span><br><span class="line"><span class="undefined">    .v-leave-active &#123;</span></span><br><span class="line"><span class="undefined">        opacity: 1;</span></span><br><span class="line"><span class="undefined">        transition: all 1s ease;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    .v-enter,</span></span><br><span class="line"><span class="undefined">    .v-leave-to &#123;</span></span><br><span class="line"><span class="undefined">        transform: translateY(30px);</span></span><br><span class="line"><span class="undefined">        opacity: 0;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    /* 要实现其他元素位移时有动画必须添加下面这个类，并且设置动画 */</span></span><br><span class="line"><span class="undefined">    .v-move &#123;</span></span><br><span class="line"><span class="undefined">        transition: all 1s ease;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    /* 而且还必须单独给v-leave-active这个类设置绝对定位才可以实现效果 */</span></span><br><span class="line"><span class="undefined">    .v-leave-active &#123;</span></span><br><span class="line"><span class="undefined">        position: absolute;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">style</span>=<span class="string">"margin-left: 10px"</span> @<span class="attr">click</span>=<span class="string">"addnum"</span>&gt;</span>add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">style</span>=<span class="string">"margin-left: 10px"</span> @<span class="attr">click</span>=<span class="string">"delnum"</span>&gt;</span>del<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transition-group</span> <span class="attr">tag</span>=<span class="string">"div"</span> <span class="attr">:style</span>=<span class="string">"&#123;margin:'10px'&#125;"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 如果要让原来元素再插入的过程中保持位置不变，就需要设置key --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in list"</span> <span class="attr">:key</span>=<span class="string">"item"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./../../js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        var vm = new Vue(&#123;</span></span><br><span class="line"><span class="undefined">            el: "#app",</span></span><br><span class="line"><span class="undefined">            data() &#123;</span></span><br><span class="line"><span class="undefined">                return &#123;</span></span><br><span class="line"><span class="undefined">                    list: [1, 2, 3, 4, 5, 6, 7, 8, 9],</span></span><br><span class="line"><span class="undefined">                    num: 10,</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            methods: &#123;</span></span><br><span class="line"><span class="undefined">                randomIndex() &#123;</span></span><br><span class="line"><span class="undefined">                    // Math.floor()的作用是返回一个小于等于参数的整数</span></span><br><span class="line"><span class="undefined">                    return Math.floor(Math.random() * this.list.length)</span></span><br><span class="line"><span class="undefined">                &#125;,</span></span><br><span class="line"><span class="undefined">                addnum() &#123;</span></span><br><span class="line"><span class="undefined">                    // splice方法还可以用来在指定位置添加元素，第三个参数就是要添加的元素</span></span><br><span class="line"><span class="undefined">                    this.list.splice(this.randomIndex(), 0, this.num++)</span></span><br><span class="line"><span class="undefined">                &#125;,</span></span><br><span class="line"><span class="undefined">                delnum() &#123;</span></span><br><span class="line"><span class="undefined">                    this.list.splice(this.randomIndex(), 1)</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p><ul><li>这里要注意的几件事是：<ul><li>如果要使动画生效，必须将要设置动画的元素设置为块级元素或者行内块级元素，如果是行内元素则不会有动画效果。</li><li>如果要使其他元素在发生位置移动也拥有动画过渡的效果这需要添加一个<code>v-move</code>这个类，当然，这个名称也是一样可以修改的，然后在这个类中设置动画过渡效果，像上面的这个例子这样。</li><li>但是其实只<code>v-move</code>这个类其实是还不够的，还需要在<code>v-leave-active</code>中设置绝对定位，这里要注意的一件事情是，这里必须单独只给这一个类设置，否则也不会有动画效果，一开始的时候我贪图方便就直接在设置active这组动画的时候设置上绝对定位，也就是给两个类都加上了绝对定位，结果发现这样并没有效果，只有单独给一个类设置的时候才有效果。</li></ul></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>要熟练设置vue中的动画就必须要理解vue中动画的运作机制，理解进场和离场这两个过程，然后可以通过设置两组类来设置动画的效果，当这种方法无法满足需求的时候就可以通过钩子函数来满足我们的需求。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;一开始在使用vue中的动画的时候我没有太明白究竟是个怎么样的机制，以及如何高度的定义一些动画，经过我的尝试，现在终于算是弄明白时怎么一回事了&lt;a href=&quot;https://cn.vuejs.org/v2/guide/transitions.html#CSS-%E5%8A%A8%E7%94%BB&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这里是官方文档&lt;/a&gt;。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue.js的学习（vue实例的生命周期）</title>
    <link href="https://q32757468.github.io/2019/06/18/vue-js%E7%9A%84%E5%AD%A6%E4%B9%A0%EF%BC%88vue%E5%AE%9E%E4%BE%8B%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%EF%BC%89/"/>
    <id>https://q32757468.github.io/2019/06/18/vue-js的学习（vue实例的生命周期）/</id>
    <published>2019-06-18T10:17:08.000Z</published>
    <updated>2019-06-18T10:26:43.210Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过学习了解vue实例的生命周期对vue的学习十分的有帮助，所以这次来了解学习以下vue中vue实例的生命周期。<br><a id="more"></a></p></blockquote><ul><li>什么是生命周期：从Vue实例创建、运行、到销毁期间，总是伴随着各种各样的事件，这些事件，统称为生命周期！</li><li><a href="https://cn.vuejs.org/v2/api/#选项-生命周期钩子" target="_blank" rel="noopener">生命周期钩子</a>：就是生命周期事件的别名而已；</li><li>生命周期钩子 = 生命周期函数 = 生命周期事件</li><li>主要的生命周期函数分类：<ul><li>创建期间的生命周期函数：<ul><li>beforeCreate：实例刚在内存中被创建出来，此时，还没有初始化好 data 和 methods 属性</li><li>created：实例已经在内存中创建OK，此时 data 和 methods 已经创建OK，此时还没有开始 编译模板</li><li>beforeMount：此时已经完成了模板的编译，但是还没有挂载到页面中</li><li>mounted：此时，已经将编译好的模板，挂载到了页面指定的容器中显示</li></ul></li><li>运行期间的生命周期函数：<ul><li>beforeUpdate：状态更新之前执行此函数， 此时 data 中的状态值是最新的，但是界面上显示的 数据还是旧的，因为此时还没有开始重新渲染DOM节点</li><li>updated：实例更新完毕之后调用此函数，此时 data 中的状态值 和 界面上显示的数据，都已经完成了更新，界面已经被重新渲染好了！</li></ul></li><li>销毁期间的生命周期函数：<ul><li>beforeDestroy：实例销毁之前调用。在这一步，实例仍然完全可用。</li><li>destroyed：Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。</li></ul></li></ul></li></ul><p>可以通过这张图来形象的了解以下生命周期的含义：<br><img src="http://m.qpic.cn/psb?/V131x4904WMIoW/EYaNPTHs3lpnpvXBr.oeMlvn097Pjgbjp37EqCZYl8k!/b/dLgAAAAAAAAA&bo=OAS5BAAAAAADB6M!&rf=viewer_4"></p><p>这次的vue的生命周期的学习就到这里了，通过这张图可以有比较完整的了解。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;通过学习了解vue实例的生命周期对vue的学习十分的有帮助，所以这次来了解学习以下vue中vue实例的生命周期。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue.js的学习（自定义指令）</title>
    <link href="https://q32757468.github.io/2019/06/18/vue-js%E7%9A%84%E5%AD%A6%E4%B9%A0%EF%BC%88%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4%EF%BC%89/"/>
    <id>https://q32757468.github.io/2019/06/18/vue-js的学习（自定义指令）/</id>
    <published>2019-06-18T01:59:41.000Z</published>
    <updated>2019-06-18T02:45:16.130Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在vue中很多时候现有的指令都是不够我们用的，那么vue中是允许我们自定义指令的，那么我们就可以通过自定义指令来实现我们想要的功能。通过 directive 来定义。<br><a id="more"></a></p></blockquote><h3 id="一个简单的例子"><a href="#一个简单的例子" class="headerlink" title="一个简单的例子"></a>一个简单的例子</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>  <span class="attr">v-focus</span>=<span class="string">'1+1'</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./../../js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        Vue.directive(<span class="string">'focus'</span>,&#123;</span></span><br><span class="line"><span class="javascript">            inserted:<span class="function"><span class="keyword">function</span>(<span class="params">el,binding</span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">                el.focus();</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(binding.name);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(binding.value);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(binding.expression);                </span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">        data() &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="undefined">                </span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        methods: &#123;</span></span><br><span class="line"><span class="undefined">            </span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看出这样就通过定义了一个全局指令来使一个文本框自动获得了焦点。</p><h3 id="定义全局指令"><a href="#定义全局指令" class="headerlink" title="定义全局指令"></a>定义全局指令</h3><p>上面的例子就是定义的一个全局指令</p><p>###定义局部指令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">directives: &#123;</span><br><span class="line">  focus: &#123;</span><br><span class="line">    // 指令的定义</span><br><span class="line">    inserted: function (el) &#123;</span><br><span class="line">      el.focus()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>像这样就可以定义一个局部指令，局部指令是通过一个对象来定义。，并且名称后面带有s。</p><h3 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h3><p>在上面的例子中以下代码就是用的<code>inserted</code>这个钩子函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inserted:function(el,binding)&#123;</span><br></pre></td></tr></table></figure></p><p>钩子函数的类别：</p><ul><li>bind：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。<br>这是在dom树还没有渲染到页面中之前，还在内存中的时候会调用，那么对于大部分js中的行为来说肯定是不会生效的，但对于比如像设置样式这种一直存在的东西来说，渲染到页面之后也还会有效</li></ul><ul><li>inserted：被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)。<br>当dom元素被插入到页面时触发，对于js中的行为也能触发</li></ul><ul><li><p>update：所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新 (详细的钩子函数参数见下)。</p></li><li><p>componentUpdated：指令所在组件的 VNode 及其子 VNode 全部更新后调用。</p></li><li><p>unbind：只调用一次，指令与元素解绑时调用。</p></li></ul><h3 id="钩子函数的参数"><a href="#钩子函数的参数" class="headerlink" title="钩子函数的参数"></a>钩子函数的参数</h3><ul><li>el：指令所绑定的元素，可以用来直接操作 DOM 。</li></ul><ul><li>binding：一个对象，包含以下属性：<br>  -name：指令名，不包括 v- 前缀。<br>  -value：指令的绑定值，例如：v-my-directive=”1 + 1” 中，绑定值为 2。<br>  -oldValue：指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用。无论值是否改变都可用。<br>  -expression：字符串形式的指令表达式。例如 v-my-directive=”1 + 1” 中，表达式为 “1 + 1”。<br>  -arg：传给指令的参数，可选。例如 v-my-directive:foo 中，参数为 “foo”。<br>  -modifiers：一个包含修饰符的对象。例如：v-my-directive.foo.bar 中，修饰符对象为 { foo: true, bar: true }。</li><li>vnode：Vue 编译生成的虚拟节点。移步 VNode API 来了解更多详情。</li><li>oldVnode：上一个虚拟节点，仅在 update 和 componentUpdated 钩子中可用。</li></ul><p>在上面的例子中就演示了这些参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Vue.directive(&apos;focus&apos;,&#123;</span><br><span class="line">    inserted:function(el,binding)&#123;</span><br><span class="line">        el.focus();</span><br><span class="line">        console.log(binding.name); //focus</span><br><span class="line">        console.log(binding.value);//2</span><br><span class="line">        console.log(binding.expression);//1+1                </span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在vue中很多时候现有的指令都是不够我们用的，那么vue中是允许我们自定义指令的，那么我们就可以通过自定义指令来实现我们想要的功能。通过 directive 来定义。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue.js的学习（按键修饰符及自定义按键修饰符）</title>
    <link href="https://q32757468.github.io/2019/06/18/vue%E4%B8%AD%E7%9A%84%E9%94%AE%E7%9B%98%E4%BF%AE%E9%A5%B0%E7%AC%A6%E4%BB%A5%E5%8F%8A%E8%87%AA%E5%AE%9A%E4%B9%89%E9%94%AE%E7%9B%98%E4%BF%AE%E9%A5%B0%E7%AC%A6/"/>
    <id>https://q32757468.github.io/2019/06/18/vue中的键盘修饰符以及自定义键盘修饰符/</id>
    <published>2019-06-18T01:13:28.000Z</published>
    <updated>2019-06-18T01:59:13.809Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在vue中可以通过键盘修饰符来控制元素在按下相应按键时的动作。vue中提供了部分内置的键盘修饰符按键码的别名，但是不是很多，那么在vue中也是可以自定义的。<br><a id="more"></a></p></blockquote><h3 id="案件修饰符的使用"><a href="#案件修饰符的使用" class="headerlink" title="案件修饰符的使用"></a>案件修饰符的使用</h3><p>在监听键盘事件时，我们经常需要检查详细的按键。Vue 允许为 v-on 在监听键盘事件时添加按键修饰符：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input v-on:keyup.enter=&quot;test()&quot;&gt;</span><br></pre></td></tr></table></figure></p><h3 id="可以通过按键码来实现"><a href="#可以通过按键码来实现" class="headerlink" title="可以通过按键码来实现"></a>可以通过按键码来实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input v-on:keyup.13=&quot;test()&quot;&gt;</span><br></pre></td></tr></table></figure><p>enter键的按键码就是13，所以等同于上面那个例子。</p><h3 id="vue中自带的别名"><a href="#vue中自带的别名" class="headerlink" title="vue中自带的别名"></a>vue中自带的别名</h3><ul><li>.enter</li><li>.tab</li><li>.delete (捕获“删除”和“退格”键)</li><li>.esc</li><li>.space</li><li>.up</li><li>.down</li><li>.left</li><li>.right</li></ul><h3 id="自定义案件修饰符"><a href="#自定义案件修饰符" class="headerlink" title="自定义案件修饰符"></a>自定义案件修饰符</h3><p>可以通过这样的方式来自定义按键修饰符：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Vue.config.keyCodes.f2 = 113;</span><br></pre></td></tr></table></figure></p><p>然后就可以通过按下f2来触发了。</p><h3 id="系统修饰符"><a href="#系统修饰符" class="headerlink" title="系统修饰符"></a>系统修饰符</h3><ul><li>.ctrl</li><li>.alt</li><li>.shift</li><li>.meta</li></ul><p>通过系统修饰符可以控制系统按键与其他事件的组合：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; @keyup.13.ctrl=&quot;test()&quot; &gt;</span><br></pre></td></tr></table></figure></p><p>以上代码就需要同时按回车以及control键才能触发。</p><h3 id="鼠标按钮修饰符"><a href="#鼠标按钮修饰符" class="headerlink" title="鼠标按钮修饰符"></a>鼠标按钮修饰符</h3><p>2.2.0 新增</p><ul><li>.left</li><li>.right</li><li>.middle</li></ul><p>像是这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; @click.left=&quot;test()&quot; &gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在vue中可以通过键盘修饰符来控制元素在按下相应按键时的动作。vue中提供了部分内置的键盘修饰符按键码的别名，但是不是很多，那么在vue中也是可以自定义的。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue.js的学习（七）过滤器filter的使用</title>
    <link href="https://q32757468.github.io/2019/06/17/vue-js%E7%9A%84%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%83%EF%BC%89%E8%BF%87%E6%BB%A4%E5%99%A8filter%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://q32757468.github.io/2019/06/17/vue-js的学习（七）过滤器filter的使用/</id>
    <published>2019-06-17T12:46:29.000Z</published>
    <updated>2019-06-18T01:11:59.720Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filter过滤器可以用来格式化数据，只能用在插值表达式或者v-model之类的组件上面。分为全局过滤器和私有过滤器，在定义的方法上稍有区别。<br><a id="more"></a></p></blockquote><h3 id="定义全局过滤器"><a href="#定义全局过滤器" class="headerlink" title="定义全局过滤器"></a>定义全局过滤器</h3><p>Vue.js 允许你自定义过滤器，可被用于一些常见的文本格式化。过滤器可以用在两个地方：双花括号插值和 v-bind 表达式 (后者从 2.1.0+ 开始支持)。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符号指示：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.time | dateformat&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Vue.filter(<span class="string">'dateformat'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">date</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> dt=<span class="keyword">new</span> <span class="built_in">Date</span>(date);</span><br><span class="line">            <span class="keyword">var</span> y=dt.getFullYear();</span><br><span class="line">            <span class="keyword">var</span> m=dt.getMonth()+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">var</span> d=dt.getDate();</span><br><span class="line">            <span class="keyword">var</span> h=dt.getHours();</span><br><span class="line">            <span class="keyword">var</span> min=dt.getMinutes();</span><br><span class="line">            <span class="keyword">var</span> s=dt.getSeconds();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;y&#125;</span>-<span class="subst">$&#123;m&#125;</span>-<span class="subst">$&#123;d&#125;</span> <span class="subst">$&#123;h&#125;</span>:<span class="subst">$&#123;min&#125;</span>:<span class="subst">$&#123;s&#125;</span>`</span>;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>过滤器可以串联：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; message | filterA | filterB &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>在这个例子中，filterA 被定义为接收单个参数的过滤器函数，表达式 message 的值将作为参数传入到函数中。然后继续调用同样被定义为接收单个参数的过滤器函数 filterB，将 filterA 的结果传递到 filterB 中。</p><p>过滤器是 JavaScript 函数，因此可以接收参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;td&gt;&#123;&#123;item.time | dateformat(&apos;yyyy-mm-dd&apos;)&#125;&#125;&lt;/td&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Vue.filter(<span class="string">'dateformat'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">date,agr=<span class="string">''</span></span>)</span>&#123;<span class="comment">//最好给参数设置一个默认值，防止出现bug</span></span><br><span class="line">           <span class="keyword">var</span> dt=<span class="keyword">new</span> <span class="built_in">Date</span>(date);</span><br><span class="line">           <span class="keyword">var</span> y=dt.getFullYear();</span><br><span class="line">           <span class="keyword">var</span> m=dt.getMonth()+<span class="number">1</span>;</span><br><span class="line">           <span class="keyword">var</span> d=dt.getDate();</span><br><span class="line">           <span class="keyword">var</span> h=dt.getHours();</span><br><span class="line">           <span class="keyword">var</span> min=dt.getMinutes();</span><br><span class="line">           <span class="keyword">var</span> s=dt.getSeconds();</span><br><span class="line">           <span class="keyword">if</span>(agr==<span class="string">'yyyy-mm-dd'</span>)&#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;y&#125;</span>-<span class="subst">$&#123;m&#125;</span>-<span class="subst">$&#123;d&#125;</span>`</span>; </span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">else</span></span><br><span class="line">           <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;y&#125;</span>-<span class="subst">$&#123;m&#125;</span>-<span class="subst">$&#123;d&#125;</span> <span class="subst">$&#123;h&#125;</span>:<span class="subst">$&#123;min&#125;</span>:<span class="subst">$&#123;s&#125;</span>`</span>;</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure><h3 id="定义私有过滤器"><a href="#定义私有过滤器" class="headerlink" title="定义私有过滤器"></a>定义私有过滤器</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">filters:&#123;</span><br><span class="line">    dateformat(date,agr=<span class="string">''</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> y=dt.getFullYear();</span><br><span class="line">        <span class="keyword">var</span> m=(dt.getMonth()+<span class="number">1</span>).toString().padStart(<span class="number">2</span>,<span class="string">'0'</span>);</span><br><span class="line">        <span class="keyword">var</span> d=dt.getDate().toString().padStart(<span class="number">2</span>,<span class="string">'0'</span>);</span><br><span class="line">        <span class="keyword">var</span> h=dt.getHours().toString().padStart(<span class="number">2</span>,<span class="string">'0'</span>);</span><br><span class="line">        <span class="keyword">var</span> min=dt.getMinutes().toString().padStart(<span class="number">2</span>,<span class="string">'0'</span>);</span><br><span class="line">        <span class="keyword">var</span> s=dt.getSeconds().toString().padStart(<span class="number">2</span>,<span class="string">'0'</span>);</span><br><span class="line">        <span class="keyword">if</span>(agr==<span class="string">'yyyy-mm-dd'</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;y&#125;</span>-<span class="subst">$&#123;m&#125;</span>-<span class="subst">$&#123;d&#125;</span>`</span>; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;y&#125;</span>-<span class="subst">$&#123;m&#125;</span>-<span class="subst">$&#123;d&#125;</span> <span class="subst">$&#123;h&#125;</span>:<span class="subst">$&#123;min&#125;</span>:<span class="subst">$&#123;s&#125;</span>`</span>;                    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>通过一个对象来设置，整体与全局设置的方法差不多。</p><h3 id="学习到的一些知识"><a href="#学习到的一些知识" class="headerlink" title="学习到的一些知识"></a>学习到的一些知识</h3><ul><li>可以通过<code>`${y}-${m}-${d} ${h}:${min}:${s}`</code>像这样的方式来格式化数据，<code>${}</code>为占位符。</li></ul><ul><li>可以通过padStart(len, str)与padEnd(len, str)这两个方法来补全字符串，但是要注意只能补全字符串，所以通常需要先通过tostring()方法转化为字符串<ul><li>根据给定长度自动在字符串的前面补充想补充的字符串（只返回修改后的字符串，不修改原字符串）</li><li>len 给定的长度，转换后</li><li>str 想补充的字符串<br>类似这样：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var s=dt.getSeconds().toString().padStart(2,&apos;0&apos;);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过定义filter可以很方便的来格式化数据，这里还有一个小细节，就是带s的就是私有的，不带s的就是全局的。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;filter过滤器可以用来格式化数据，只能用在插值表达式或者v-model之类的组件上面。分为全局过滤器和私有过滤器，在定义的方法上稍有区别。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>通过vue来做一个可以简单操作的页面</title>
    <link href="https://q32757468.github.io/2019/06/17/%E9%80%9A%E8%BF%87vue%E6%9D%A5%E5%81%9A%E4%B8%80%E4%B8%AA%E5%8F%AF%E4%BB%A5%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C%E7%9A%84%E9%A1%B5%E9%9D%A2/"/>
    <id>https://q32757468.github.io/2019/06/17/通过vue来做一个可以简单操作的页面/</id>
    <published>2019-06-17T08:42:47.000Z</published>
    <updated>2019-06-17T12:24:41.554Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;经过学习了vue的一些简单基本的东西，现在讲前面学过的这些东西简单的引用一下，做一个可以简单操作页面元素的页面，同时来熟悉vue的操作。<br><a id="more"></a></p></blockquote><h3 id="代码和效果图"><a href="#代码和效果图" class="headerlink" title="代码和效果图"></a>代码和效果图</h3><p>html:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-header"</span>&gt;</span></span><br><span class="line">                    相关操作</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-body"</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 给表单添加v-model来实现数据的双向绑定 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form-inline"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>id：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control mr-md-2 "</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">v-model</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>name：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">v-model</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary ml-md-1 mr-md-3"</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">'add'</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 实现搜索功能 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>输入关键字进行搜索：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-light mt-5 table-bordered table-striped"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">thead</span> <span class="attr">class</span>=<span class="string">"thead-light"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Id<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Time<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">th</span>&gt;</span>opration<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 通过v-for的循环来将我们的数据来渲染到页面中 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">"(item) in info"</span> <span class="attr">:key</span>=<span class="string">"item.id"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.id&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.time&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> @<span class="attr">click.prevent</span>=<span class="string">'rm(item.id)'</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>js:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            id: <span class="string">''</span>,</span><br><span class="line">            name: <span class="string">''</span>,</span><br><span class="line">            time: <span class="string">''</span>,</span><br><span class="line">            keywords:<span class="string">''</span>,</span><br><span class="line">            <span class="comment">// 将我们页面中的数据放在这俩面</span></span><br><span class="line">            info: [&#123;</span><br><span class="line">                    id: <span class="string">'1'</span>,</span><br><span class="line">                    name: <span class="string">'aaa'</span>,</span><br><span class="line">                    time: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    id: <span class="string">'2'</span>,</span><br><span class="line">                    name: <span class="string">'bbb'</span>,</span><br><span class="line">                    time: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">                &#125;,</span><br><span class="line">            ],</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        <span class="comment">// 通过自己构建函数来控制添加和删除</span></span><br><span class="line">        add() &#123;<span class="comment">//这是添加的函数</span></span><br><span class="line">            <span class="keyword">this</span>.info.push(&#123;</span><br><span class="line">                id: <span class="keyword">this</span>.id,</span><br><span class="line">                name: <span class="keyword">this</span>.name,</span><br><span class="line">                time: <span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">this</span>.id = <span class="keyword">this</span>.name = <span class="string">''</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        rm(id) &#123;<span class="comment">//这是删除的函数，我用了两种写法</span></span><br><span class="line">            <span class="comment">// this.info.forEach((item,index) =&gt; &#123;</span></span><br><span class="line">            <span class="comment">//     if(id=item.id)&#123;</span></span><br><span class="line">            <span class="comment">//         this.info.splice(index,1)</span></span><br><span class="line">            <span class="comment">//         return ;</span></span><br><span class="line">            <span class="comment">//     &#125;                  </span></span><br><span class="line">            <span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 这一种代码会更简便一些</span></span><br><span class="line">            <span class="keyword">this</span>.info.splice(<span class="keyword">this</span>.info.findIndex(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> item.id == id;</span><br><span class="line">            &#125;), <span class="number">1</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        searchList(keywords)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.info.filter(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> item.name.includes(keywords);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>最后的效果图：<br><img src="http://m.qpic.cn/psb?/V131x4904WMIoW/oTLF7.aDPoIaR6KZSqfT7Y7ICMF43yoVYspA5rV52MM!/b/dL4AAAAAAAAA&bo=CgW3AQAAAAADB5s!&rf=viewer_4"></p><p>通过页面上的增加和删除就可以实现页面的修改</p><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>在vue中更看重于业务逻辑，所以很多方面的工作我们不需要去关心，也不需要去操作dom对象就可以轻松的修改页面上的内容</p><ul><li><p>我们通过<code>v-for</code>的循环将我们的数据渲染到页面中</p></li><li><p>我们通过<code>v-model</code>数据双向绑定来将用户在页面中输入的数据放到我们存放数据的地方，因为vue的特性，只要数据有更新，那么页面就会跟着一起更新，这是十分方便的一件事情</p></li><li><p>再通过数组的一些操作方法将我们想要删除的数据进行删除，那么页面中相应的内容也会被删除。</p></li><li><p>搜索功能是通过<code>v-model</code>数据的双向绑定来拿到用户需要搜索的数据，然后通过filter()这个方法来设置条件进行过滤，然后返回一个新的数组，过滤的条件可以通过inclues来设置。</p></li></ul><h3 id="学习到的一些知识"><a href="#学习到的一些知识" class="headerlink" title="学习到的一些知识"></a>学习到的一些知识</h3><p>正如我上一篇博客介绍的那样，在特定的情况下使用filter之类的方法会更加的便捷，这次在写搜索的那个函数的时候我就用到了filter这个方法，使代码更加的精简，这里可以使用foreach，但这会有更加多的代码量，所以我没有这么做。</p><h3 id="我遇到的一些坑与问题"><a href="#我遇到的一些坑与问题" class="headerlink" title="我遇到的一些坑与问题"></a>我遇到的一些坑与问题</h3><ul><li><p>第一个花费时间比较久的地方是当我完成了数据的添加的这个功能之后发现了一个问题就是当我向页面中添加完数据之后，我再修改输入框中的数据，已经渲染在页面之中的数据也会跟着一起修改，很显然这不是我想要的效果，后面发现是我将一个带着变量的对象直接push到数组当中，而不是在单击事件的时候通过变量创建一个新的对象再push进去。<strong>也就是说应该需要一个中间的变量来将一个会实时变化的变量变成一个固定的变量。</strong></p></li><li><p>第二个问题就是在使用findIndex方法的时候将<code>return item.id == id</code>写成了<code>return item.id = id</code> 导致在操作的时候出现了问题</p></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这次写这些东西让我对vue有了更加清晰的概念，并且也用了一些以前没有用过的方法来使代码更加的简单，同时要记住写代码犯的一些错误，要记住在进行比较的时候判断是否相等要用<code>==</code>，千万不能永成赋值符号<code>=</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;经过学习了vue的一些简单基本的东西，现在讲前面学过的这些东西简单的引用一下，做一个可以简单操作页面元素的页面，同时来熟悉vue的操作。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>js中的some、find、findindex、includes、filter的使用</title>
    <link href="https://q32757468.github.io/2019/06/17/js%E4%B8%AD%E7%9A%84some%E3%80%81find%E3%80%81findindex%E3%80%81includes%E3%80%81filter%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://q32757468.github.io/2019/06/17/js中的some、find、findindex、includes、filter的使用/</id>
    <published>2019-06-17T02:55:46.000Z</published>
    <updated>2019-06-17T12:22:08.185Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最近在学习中学习到一些以前接触的比较少的一些方法，其中很多是es6新增的方法，这次就来对所有的这些方法来进行一个探究，看看这些方法究竟是什么作用。<br><a id="more"></a></p></blockquote><h3 id="类似于foreach的方法"><a href="#类似于foreach的方法" class="headerlink" title="类似于foreach的方法"></a>类似于foreach的方法</h3><p>为什么把这类方法归到一起讲，因为我在使用的过程中发现其实这些方法的用法和参数其实都是一样的，底层应该都是和foreach差不多，差别只是在于返回的东西不一样，那么再来看看这些方法的差别以及用法。</p><ul><li>语法</li></ul><p>array.方法名(function(currentValue, index, arr),thisValue)</p><ul><li>参数</li></ul><table class="tecspec">   <tbody><tr>    <th style="width:25%">参数</th>    <th>描述</th>  </tr>    <tr>    <td><em>function(currentValue, index,arr)</em></td>    <td>必需。数组每个元素需要执行的函数。<br>函数参数:<table class="tecspec">   <tbody><tr>    <th style="width:25%">参数</th>    <th>描述</th>  </tr>    <tr>    <td><em>currentValue</em></td>    <td>必需。当前元素</td>  </tr>  <tr>    <td><em>index</em></td>    <td>可选。当前元素的索引值</td>  </tr>    <tr>    <td><em>arr</em></td>    <td>可选。当前元素所属的数组对象</td>  </tr></tbody></table>   </td>  </tr>    <tr>    <td><em>thisValue</em></td>    <td>可选。 传递给函数的值一般用 "this" 值。<br>如果这个参数为空， "undefined" 会传递给 "this" 值</td>  </tr></tbody></table><p>以上是这些方法共同的基本的语法以及参数</p><p>那么再来看看这些方法的不同点</p><h4 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h4><p>forEach() 方法用于调用数组的每个元素，并将元素传递给回调函数。</p><p>注意: forEach() 对于空数组是不会执行回调函数的。</p><blockquote><p>也就是说 forEach() 这个方法是没有任何限制的，回调函数最终返回的值是完全由自己决定的，也就是说其实后面介绍到的所有的方法其实也都可以通过forEach()来实现相同的功能，只不过要自己写更多的代码量。<br>forEach()可以通过return来提前退出循环，同时返回相应的值</p></blockquote><h4 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h4><p>map() 方法返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。</p><p>map() 方法按照原始数组元素顺序依次处理元素。</p><p>注意： map() 不会对空数组进行检测。</p><p>注意： map() 不会改变原始数组。</p><blockquote><p>map和foreach很像，差别就在于map所得到的所有符合条件的结果都会通过一个数组来返回。在我们需要将结果放到一个数组中的时候直接使用map就会更加的方便。<br>在map()中return无论如何都会返回一个数组，可以通过return来对原数组进行操作返回一个新数组<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line">    <span class="built_in">console</span>.log(arr.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;     <span class="comment">//[[true, true, true, true, true, true, true, true, true]]</span></span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(arr.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> item*<span class="number">2</span>;     <span class="comment">//[2, 4, 6, 8, 10, 12, 14, 16, 18]</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="some"><a href="#some" class="headerlink" title="some()"></a>some()</h4><p>some() 方法用于检测数组中的元素是否满足指定条件（函数提供）。</p><p>some() 方法会依次执行数组的每个元素：</p><ul><li>如果有一个元素满足条件，则表达式返回true , 剩余的元素不会再执行检测。</li><li>如果没有满足条件的元素，则返回false。<br>注意： some() 不会对空数组进行检测。</li></ul><p>注意： some() 不会改变原始数组。</p><blockquote><p>也就是说some并不一定会遍历完数组中全部的元素，当遍历到由符合条件的元素时就会返回true并终止，否则返回false，所以也就可以通过利用此特性来对数组中特定一部分的元素进行操作。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.some(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 通过some可以对数组中符合要求的之前的元素进行操作</span></span><br><span class="line">            <span class="built_in">console</span>.log(item);</span><br><span class="line">            <span class="keyword">return</span> item &gt; <span class="number">5</span>;  <span class="comment">//可以通过return来设置返回值的条件</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><p><strong>还有一个相对的方法叫做  every() ,条件时数组中所有的元素都满足条件。</strong></p><h4 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h4><p>find() 方法返回通过测试（函数内判断）的数组的第一个元素的值。</p><p>find() 方法为数组中的每个元素都调用一次函数执行：</p><ul><li>当数组中的元素在测试条件时返回 true 时, find() 返回符合条件的元素，之后的值不会再调用执行函数。</li><li>如果没有符合条件的元素返回 undefined<br>注意: find() 对于空数组，函数是不会执行的。</li></ul><p>注意: find() 并没有改变数组的原始值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 通过find也可以对数组中符合要求的之前的元素进行操作</span></span><br><span class="line">    <span class="built_in">console</span>.log(item);</span><br><span class="line">    <span class="keyword">return</span> item&gt;<span class="number">5</span>;</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><h3 id="findIndex"><a href="#findIndex" class="headerlink" title="findIndex()"></a>findIndex()</h3><p>findIndex() 方法返回传入一个测试条件（函数）符合条件的数组第一个元素位置。</p><p>findIndex() 方法为数组中的每个元素都调用一次函数执行：</p><ul><li>当数组中的元素在测试条件时返回 true 时, findIndex() 返回符合条件的元素的索引位置，之后的值不会再调用执行函数。</li><li>如果没有符合条件的元素返回 -1<br>注意: findIndex() 对于空数组，函数是不会执行的。</li></ul><p>注意: findIndex() 并没有改变数组的原始值。</p><blockquote><p>与find方法类似，区别只在于这个方法返回的时元素在数组中的索引。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.findIndex(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item);</span><br><span class="line">    <span class="keyword">return</span> item&gt;<span class="number">5</span>;          </span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><h4 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h4><p>filter() 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。</p><p>注意： filter() 不会对空数组进行检测。</p><p>注意： filter() 不会改变原始数组。</p><blockquote><p>这个方法与map方法类似，map方法没有返回的条件，而这个方法可以直接通过rerun来设置过滤条件。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.filter(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> item &gt;<span class="number">2</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="includes"><a href="#includes" class="headerlink" title="includes()"></a>includes()</h3><p>这个方法是es6中新增的一个方法，可以用来判断一个数组或者是字符串中是否包含某一元素，如果是返回 true，否则false。</p><p><strong>语法</strong><br>arr.includes(searchElement)<br>arr.includes(searchElement, fromIndex)</p><p>参数<br>searchElement    必须。需要查找的元素值。<br>fromIndex        可选。从该索引处开始查找 searchElement。如果为负值，则按升序从 array.length + fromIndex 的索引开始搜索。默认为 0。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.includes(<span class="number">5</span>)); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>以前只是对这些方法有了解，但是了解的不是很多，也会使用foreach这样的方法，但是现在知道了这么多方法，就应该在适当的情况下用相应的方法来减少代码量和工作量。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;最近在学习中学习到一些以前接触的比较少的一些方法，其中很多是es6新增的方法，这次就来对所有的这些方法来进行一个探究，看看这些方法究竟是什么作用。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue.js的学习（六）v-if和v-show</title>
    <link href="https://q32757468.github.io/2019/06/16/vue-js%E7%9A%84%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%85%AD%EF%BC%89v-if%E5%92%8Cv-show/"/>
    <id>https://q32757468.github.io/2019/06/16/vue-js的学习（六）v-if和v-show/</id>
    <published>2019-06-16T09:19:12.000Z</published>
    <updated>2019-06-16T10:16:03.681Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这次来学习vue中隐藏元素的两种方法，一种是v-if，另一种是v-show，同时明白二者之间的区别，一件分别适用于哪种情况。<br><a id="more"></a></p></blockquote><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 通过两种方式都可以实现元素的隐藏，但是我们从控制台检查元素就可以看出二者之间的区别 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"flag=!flag"</span>&gt;</span>点击显示/不显示<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"flag"</span>&gt;</span></span><br><span class="line">            这是用v-if控制的元素</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">"flag"</span>&gt;</span></span><br><span class="line">            这是用v-show控制的元素</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./../../js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">            data() &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                    flag:<span class="literal">true</span>,</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            methods: &#123;</span></span><br><span class="line"><span class="undefined">                toggle ()&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">this</span>.flag=!<span class="keyword">this</span>.flag;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过以上代码，我们在页面中单击切换按钮就可以隐藏或者显示两个分别被<code>v-if</code>和<code>v-show</code>控制的元素。</p><h3 id="二者之间的区别"><a href="#二者之间的区别" class="headerlink" title="二者之间的区别"></a>二者之间的区别</h3><ul><li>通过检查元素我们可以清除的看到，当我们将元素进行隐藏的时候，<code>v-if</code>是将元素进行删除，而<code>v-show</code>是将元素的<code>display</code>设置为none，从而将元素隐藏。</li></ul><ul><li>那么我们什么时候用<code>v-if</code>什么时候用<code>v-show</code>呢<ul><li>因为<code>v-if</code>是将元素进行添加和删除，所以在进行这个过程的时候会比较消耗资源，所以不推荐在频繁要触发<code>v-if</code>的时候使用</li><li>而<code>v-show</code>是设置元素的display，那么无论元素一开始是否显示在页面上都需要创建元素，所以在渲染页面的时候会相较于<code>v-if</code>更加占用资源，所以不推荐在很少需要用到<code>v-show</code>来进行切换的时候使用。</li></ul></li></ul><h3 id="学到的一些新东西"><a href="#学到的一些新东西" class="headerlink" title="学到的一些新东西"></a>学到的一些新东西</h3><p>当我们需要频繁的在两种状态之间进行切换的时候我们可以使用下面这种方法来控制<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag:true,</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.flag=!this.flag;</span><br></pre></td></tr></table></figure><p>就不需要像以前的思路那样设置一个数字的循环，然后判断是否能被2整除来进行两种状态之间的切换。</p><p>当函数的代码连非常的小的时候我们就可以直接在调用的时候写，像下面这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=&quot;flag=!flag&quot;&gt;点击显示/不显示&lt;/button&gt;</span><br></pre></td></tr></table></figure></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>二者之间的区别在于渲染的方式不一样，在切换不频繁的情况下使用<code>v-if</code>，在切换频繁的情况下使用<code>v-show</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;这次来学习vue中隐藏元素的两种方法，一种是v-if，另一种是v-show，同时明白二者之间的区别，一件分别适用于哪种情况。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue.js的学习（五）v-for 和key</title>
    <link href="https://q32757468.github.io/2019/06/16/vue-js%E7%9A%84%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%94%EF%BC%89v-for/"/>
    <id>https://q32757468.github.io/2019/06/16/vue-js的学习（五）v-for/</id>
    <published>2019-06-16T07:39:18.000Z</published>
    <updated>2019-06-16T08:27:14.374Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这次学习一下vue中的循环v-for和key,以及通过他们来遍历数组以及遍历对象并且将他们渲染到页面中.<br><a id="more"></a></p></blockquote><h3 id="v-for的使用"><a href="#v-for的使用" class="headerlink" title="v-for的使用"></a>v-for的使用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 遍历数组 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in arr"</span>&gt;</span></span><br><span class="line">            数组中的值是:&#123;&#123;item&#125;&#125;---索引是:&#123;&#123;index&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 遍历对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"(item, key, index) in obj "</span>&gt;</span></span><br><span class="line">        &#123;&#123;key&#125;&#125;---&#123;&#123;item&#125;&#125;---索引是:&#123;&#123;index&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./../../js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">        data() &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="undefined">                arr:[1,2,3,4,5,6],</span></span><br><span class="line"><span class="undefined">                obj:&#123;</span></span><br><span class="line"><span class="javascript">                    name:<span class="string">'zs'</span>,</span></span><br><span class="line"><span class="undefined">                    age:18,</span></span><br><span class="line"><span class="javascript">                    gender:<span class="string">'男'</span></span></span><br><span class="line"><span class="undefined">                &#125;            </span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">      </span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>可以看出v-for的使用非常的简单</p></li><li><p>在遍历数组的时候传递两个参数，那么第一个参数就是数组里面的值，第二个参数就是索引</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;p v-for=&quot;(item, index) in arr&quot;&gt;</span><br><span class="line">            数组中的值是:&#123;&#123;item&#125;&#125;---索引是:&#123;&#123;index&#125;&#125;</span><br><span class="line">    &lt;/p&gt;</span><br></pre></td></tr></table></figure><ul><li>遍历对象的时候，传递两个参数，那么第一个参数是对象键值对中的值，第二个参数是对象中的键，如果有第三个参数那么第三个参数就是索引</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;p v-for=&quot;(item, key, index) in obj &quot;&gt;</span><br><span class="line">        &#123;&#123;key&#125;&#125;---&#123;&#123;item&#125;&#125;---索引是:&#123;&#123;index&#125;&#125;</span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></table></figure><h3 id="key的使用"><a href="#key的使用" class="headerlink" title="key的使用"></a>key的使用</h3><p>在遍历的时候可以不加<code>key</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p v-for=&quot;(item, index) in items&quot;&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure></p><p>也可以加<code>key</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p v-for=&quot;(item, index) in items&quot; :key=&quot;index&quot;&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure></p><p>那么二者之间有什么区别呢，在我上面的例子中没有什么区别，</p><p><strong>具体的区别可以参考 <a href="https://www.jianshu.com/p/4bd5e745ce95" target="_blank" rel="noopener">这个帖子</a> 。解释的十分形象</strong></p><blockquote><p>注意：key最好是唯一标识符<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p v-for=&quot;(item, index) in items&quot; :key=&quot;index&quot;&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure></p></blockquote><p>并且最好不要像这样设置，因为在排序的时候索引也是跟着一起在变化的，那像这样设置了基本上也等于没设置。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;这次学习一下vue中的循环v-for和key,以及通过他们来遍历数组以及遍历对象并且将他们渲染到页面中.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue.js的学习（四）添加样式</title>
    <link href="https://q32757468.github.io/2019/06/16/vue-js%E7%9A%84%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89%E6%B7%BB%E5%8A%A0%E6%A0%B7%E5%BC%8F/"/>
    <id>https://q32757468.github.io/2019/06/16/vue-js的学习（四）添加样式/</id>
    <published>2019-06-16T07:01:03.000Z</published>
    <updated>2019-06-16T07:31:21.109Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这次学习了通过vue来给元素添加样式,前面我们已经学习过了给元素绑定属性,我们就可以通过这种方法来给元素添加样式.主要通过两种方法,一种是给元素绑定class,一种是给元素绑定style.<br><a id="more"></a></p></blockquote><p>先看页面代码:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.big</span>&#123;</span></span><br><span class="line"><span class="undefined">    font-size: 40px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.color</span>&#123;</span></span><br><span class="line"><span class="undefined">    color: red;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.thin</span>&#123;</span></span><br><span class="line"><span class="undefined">    font-weight: 200;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 第一种添加样式类 ,注意要加引号--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">"['big','thin']"</span>&gt;</span>这是一段测试文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 第二种 数组中嵌套对象，通过对象来控制是否引用相应的类   ,在对象中可以省略引号，除非有 -   --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">"['big',&#123;thin:true,color:flag&#125;]"</span>&gt;</span>这是一段测试文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 第三种，直接使用对象 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">"&#123;thin:true,big:flag&#125;"</span>&gt;</span>这是一段测试文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 也可以直接在变量中写对象,直接调用变量 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">"mclass"</span>&gt;</span>这是一段测试文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 通过绑定style来添加样式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">:style</span>=<span class="string">"&#123;color:'red','font-size':'40px'&#125;"</span>&gt;</span>这是一段测试文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">:style</span>=<span class="string">"mstyle"</span>&gt;</span>这是一段测试文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">:style</span>=<span class="string">"[mstyle,mstyle2]"</span>&gt;</span>这是一段测试文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./../../js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">        data:&#123;</span></span><br><span class="line"><span class="javascript">            flag:<span class="literal">true</span>,</span></span><br><span class="line"><span class="undefined">            mclass:&#123;</span></span><br><span class="line"><span class="javascript">                thin:<span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">                color:<span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">                big:<span class="literal">true</span>,</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            mstyle:&#123;</span></span><br><span class="line"><span class="javascript">                color:<span class="string">'red'</span>,</span></span><br><span class="line"><span class="javascript">                <span class="string">'font-size'</span>:<span class="string">'40px'</span>,</span></span><br><span class="line"><span class="javascript">                <span class="string">'font-weight'</span>:<span class="number">200</span>,</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        methods: &#123;        </span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">    &#125;)     </span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="绑定class来添加样式"><a href="#绑定class来添加样式" class="headerlink" title="绑定class来添加样式"></a>绑定class来添加样式</h3><h4 id="通过数组"><a href="#通过数组" class="headerlink" title="通过数组"></a>通过数组</h4><p>通过给元素绑定class来添加样式:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p :class=&quot;[&apos;big&apos;,&apos;thin&apos;]&quot;&gt;这是一段测试文字&lt;/p&gt;</span><br></pre></td></tr></table></figure></p><p>给通过给class绑定一个数组来添加class样式</p><blockquote><p>注意,数组里面的元素都需要加上引号</p></blockquote><h4 id="通过数组中嵌套对象"><a href="#通过数组中嵌套对象" class="headerlink" title="通过数组中嵌套对象"></a>通过数组中嵌套对象</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p :class=&quot;[&apos;big&apos;,&#123;thin:true,color:flag&#125;]&quot;&gt;这是一段测试文字&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>通过对象来添加class需要通过<code>true</code>或者是<code>false</code>来控制是否绑定相应class类</p><blockquote><p>这里可以直接给<code>true</code>或者是<code>false</code>也可以通过变量来传递<code>true</code>或者是<code>false</code>,比如这里通过了一个变量<code>flag</code></p></blockquote><h4 id="通过对象"><a href="#通过对象" class="headerlink" title="通过对象"></a>通过对象</h4><p>既然可以通过数组中嵌套对象,那么就可以直接使用对象来绑定class<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p :class=&quot;&#123;thin:true,big:flag&#125;&quot;&gt;这是一段测试文字&lt;/p&gt;</span><br></pre></td></tr></table></figure></p><p>直接通过对象来绑定class也可以将对象设置在一个变量中,通过直接绑定这个变量也可以实现.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p :class=&quot;mclass&quot;&gt;这是一段测试文字&lt;/p&gt;</span><br></pre></td></tr></table></figure></p><blockquote><p>在对象中的键值对中的键可以加引号也可以不加引号,但是名字中有<code>-</code>就必须要加引号.</p></blockquote><h3 id="绑定style来添加样式"><a href="#绑定style来添加样式" class="headerlink" title="绑定style来添加样式"></a>绑定style来添加样式</h3><ul><li>通过对象来设置:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p :style=&quot;&#123;color:&apos;red&apos;,&apos;font-size&apos;:&apos;40px&apos;&#125;&quot;&gt;这是一段测试文字&lt;/p&gt;</span><br></pre></td></tr></table></figure><ul><li><p>将对象设置到变量通过变量来设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p :style=&quot;mstyle&quot;&gt;这是一段测试文字&lt;/p&gt;</span><br></pre></td></tr></table></figure></li><li><p>通过数组来同时设置多个变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p :style=&quot;[mstyle,mstyle2]&quot;&gt;这是一段测试文字&lt;/p&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="来看看设置之后的效果"><a href="#来看看设置之后的效果" class="headerlink" title="来看看设置之后的效果"></a>来看看设置之后的效果</h3><p><img src="http://m.qpic.cn/psb?/V131x4904WMIoW/yIavscNRQ9xSYRiKT2*Wtft3fQGq8zmitSDApwflzYk!/b/dL8AAAAAAAAA&bo=vQavAwAAAAADBzU!&rf=viewer_4"><br>可以看到全部都生效了</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>以上就是在vue中设置样式的一些方法</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;这次学习了通过vue来给元素添加样式,前面我们已经学习过了给元素绑定属性,我们就可以通过这种方法来给元素添加样式.主要通过两种方法,一种是给元素绑定class,一种是给元素绑定style.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue.js的学习（三）数据的双向绑定</title>
    <link href="https://q32757468.github.io/2019/06/16/vue-js%E7%9A%84%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89%E6%95%B0%E6%8D%AE%E7%9A%84%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A/"/>
    <id>https://q32757468.github.io/2019/06/16/vue-js的学习（三）数据的双向绑定/</id>
    <published>2019-06-16T05:14:24.000Z</published>
    <updated>2019-06-16T05:43:27.637Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这次来学习vue中的双向数据绑定的一种方法，使用v-model来进行数据的双向绑定，并通过其来实现一个超级简单的计算器。<br><a id="more"></a></p></blockquote><h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><p>通过v-model可以实现数据的双向绑定，我们前面学习过的v-text以及v-html都只能是实现数据的单项绑定，就是将M绑定到V，有时候需要实现数据的双向绑定，这个时候就需要用到v-model来实现，基本的用法：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"n1"</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><blockquote><p>指的注意的一件事情就是v-model只对表单有效，对其他元素无效，因为其他元素无法双向修改数据，只有表单可以做到用户可以修改其中的数据。</p></blockquote><h3 id="通过v-model来实现一个简单的计算器"><a href="#通过v-model来实现一个简单的计算器" class="headerlink" title="通过v-model来实现一个简单的计算器"></a>通过v-model来实现一个简单的计算器</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"n1"</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"sign"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"+"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"-"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"*"</span>&gt;</span>*<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"/"</span>&gt;</span>/<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"n2"</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"compute"</span>&gt;</span>=<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"res"</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./../../js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">        data:&#123;</span></span><br><span class="line"><span class="undefined">            n1:0,</span></span><br><span class="line"><span class="undefined">            n2:0,</span></span><br><span class="line"><span class="javascript">            sign:<span class="string">'+'</span>,</span></span><br><span class="line"><span class="undefined">            res:0,</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        methods: &#123;</span></span><br><span class="line"><span class="undefined">            compute () &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 这是一种方法，使用switch来判断条件</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">switch</span> (<span class="keyword">this</span>.sign)&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">case</span> <span class="string">"+"</span> : <span class="keyword">this</span>.res= <span class="built_in">parseFloat</span>(<span class="keyword">this</span>.n1) + <span class="built_in">parseFloat</span>(<span class="keyword">this</span>.n2); <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">case</span> <span class="string">"-"</span> : <span class="keyword">this</span>.res= <span class="built_in">parseFloat</span>(<span class="keyword">this</span>.n1) - <span class="built_in">parseFloat</span>(<span class="keyword">this</span>.n2); <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">case</span> <span class="string">"*"</span> : <span class="keyword">this</span>.res= <span class="built_in">parseFloat</span>(<span class="keyword">this</span>.n1) * <span class="built_in">parseFloat</span>(<span class="keyword">this</span>.n2); <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">case</span> <span class="string">"/"</span> : <span class="keyword">this</span>.res= <span class="built_in">parseFloat</span>(<span class="keyword">this</span>.n1) / <span class="built_in">parseFloat</span>(<span class="keyword">this</span>.n2); <span class="keyword">break</span>;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">                <span class="comment">// 还有一种投机取巧的办法，但是不推荐使用</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// var str=this.n1+this.sign+this.n2;</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// this.res=eval(str);</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,               </span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>写的时候要注意不要把this给忘了。</p><p><img src="http://m.qpic.cn/psb?/V131x4904WMIoW/9m0ADQTKmcWcvkNKtGgqc*mJpN9hFmxgPMFXOS3EI9I!/b/dL8AAAAAAAAA&bo=6gKNAAAAAAADB0c!&rf=viewer_4"></p><p>通过两种方法都能成功实现了一个简单的计算器。</p><blockquote><p>但是要注意的一件事情是尽量不要使用第二种方法，因为第二种方法中使用的<code>eval()</code>函数会将字符串解析成代码，所以其实这是很不安全的一件事情，坏人就有机可乘可以搞破坏。</p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这次学习的是vue中的<code>v-model</code>,使用这个方法可以十分轻松的实现数据的双向绑定。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;这次来学习vue中的双向数据绑定的一种方法，使用v-model来进行数据的双向绑定，并通过其来实现一个超级简单的计算器。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue.js的学习（二）事件修饰符</title>
    <link href="https://q32757468.github.io/2019/06/16/vue-js%E7%9A%84%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6/"/>
    <id>https://q32757468.github.io/2019/06/16/vue-js的学习（二）事件修饰符/</id>
    <published>2019-06-16T03:03:05.000Z</published>
    <updated>2019-06-16T03:32:42.876Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这次的笔记来学些一下vue中的事件修饰符，通过事件修饰符可是实现一些简单的功能，比如阻止冒泡之类的。<br><a id="more"></a></p></blockquote><p>一下是一段运用了事件修饰符的代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">div&#123;</span></span><br><span class="line"><span class="undefined">    padding: 50px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">'outerclick'</span> <span class="attr">id</span>=<span class="string">"app"</span> <span class="attr">style</span>=<span class="string">"background-color: blue"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">'innerclick'</span> <span class="attr">style</span>=<span class="string">"background-color: red"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'btnclick'</span>&gt;</span>这是一个测试按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> @<span class="attr">click.prevent.once</span> <span class="attr">href</span>=<span class="string">"https://www.baidu.com"</span>&gt;</span>这是去百度的链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./../../js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">'#app'</span>,</span></span><br><span class="line"><span class="javascript">        data:&#123;<span class="comment">// 通过在data中设置变量      </span></span></span><br><span class="line"><span class="javascript">            msg:<span class="string">'这是一个测试内容'</span>,</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        methods: &#123;</span></span><br><span class="line"><span class="undefined">           btnclick()&#123;</span></span><br><span class="line"><span class="javascript">               alert(<span class="string">'这是一个按钮'</span>);</span></span><br><span class="line"><span class="undefined">           &#125;,</span></span><br><span class="line"><span class="undefined">           innerclick()&#123;</span></span><br><span class="line"><span class="javascript">               alert(<span class="string">'这是里面的div'</span>)</span></span><br><span class="line"><span class="undefined">           &#125;,</span></span><br><span class="line"><span class="undefined">           outerclick()&#123;</span></span><br><span class="line"><span class="javascript">               alert(<span class="string">'这是外面的div'</span>)</span></span><br><span class="line"><span class="undefined">           &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">    &#125;) </span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="stop"><a href="#stop" class="headerlink" title=".stop"></a>.stop</h3><p> 通过<code>.stop</code>可以阻止事件向上冒泡</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click.stop=&apos;btnclick&apos;&gt;这是一个测试按钮&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>我们只需要这样设置就可以阻止事件向上冒泡</p><h3 id="self"><a href="#self" class="headerlink" title=".self"></a>.self</h3><p> 通过<code>.self</code>可以阻止事件向上冒泡<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div @click.self=&apos;innerclick&apos; style=&quot;background-color: red&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>我们只需要这样设置就使这个里面的div在按钮进行事件冒泡的时候不会触发它的单击事件，只会触发自己的事件。</p><h3 id="prevent"><a href="#prevent" class="headerlink" title=".prevent"></a>.prevent</h3><p>通过<code>.prevent</code>就可以阻止默认行为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a @click.prevent href=&quot;https://www.baidu.com&quot;&gt;这是去百度的链接&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>通过以上代码就可以实现阻止默认行为，但我们单击超链接的时候就不会进行跳转</p><h3 id="once"><a href="#once" class="headerlink" title=".once"></a>.once</h3><p>通过<code>.once</code>就可以使事件修饰符只起作用一次<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a @click.prevent.once href=&quot;https://www.baidu.com&quot;&gt;这是去百度的链接&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>通过以上代码，当我们单击超链接的时候第一次不会进行跳转，但是再次单击的时候就会进行跳转了</p><blockquote><p>其他事件修饰符也适用</p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这次学习了vue中的事件修饰符</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;这次的笔记来学些一下vue中的事件修饰符，通过事件修饰符可是实现一些简单的功能，比如阻止冒泡之类的。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>通过vue做一个简单的跑马灯</title>
    <link href="https://q32757468.github.io/2019/06/15/%E9%80%9A%E8%BF%87vue%E5%81%9A%E4%B8%80%E4%B8%AA%E8%B7%91%E9%A9%AC%E7%81%AF/"/>
    <id>https://q32757468.github.io/2019/06/15/通过vue做一个跑马灯/</id>
    <published>2019-06-15T14:38:59.000Z</published>
    <updated>2019-06-16T03:00:25.893Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前面简单的学习了vue中的一些简单的东西以及入门，这次通过vue来做一个简单的跑马灯来试一试.<br><a id="more"></a></p></blockquote><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>其实实现原理非常的简单，只需要将我们需要跑起来的字符串的首个字符拼接到字符串尾部，再通过定时器将新的字符串渲染到页面就可以了，只不过这些都是通过vue框架来实现的。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-cloak</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'pmd'</span>&gt;</span>跑起来<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'stoppmd'</span>&gt;</span>停止<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">"msg"</span>&gt;</span>  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./../../js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">'#app'</span>,</span></span><br><span class="line"><span class="javascript">        data:&#123;<span class="comment">// 通过在data中设置变量      </span></span></span><br><span class="line"><span class="javascript">            msg:<span class="string">'这是一个测试内容'</span>,</span></span><br><span class="line"><span class="javascript">            timer:<span class="literal">null</span>,<span class="comment">//通过timer这个变量来控制只有第一次单击有效</span></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        methods: &#123;</span></span><br><span class="line"><span class="undefined">           pmd()&#123;</span></span><br><span class="line"><span class="javascript">               <span class="keyword">if</span>(<span class="keyword">this</span>.timer!=<span class="literal">null</span>)</span></span><br><span class="line"><span class="javascript">                   <span class="keyword">return</span> ;  <span class="comment">//如果timer为null，那么就直接调出函数</span></span></span><br><span class="line"><span class="javascript">               <span class="keyword">this</span>.timer=setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                   <span class="keyword">var</span> start=<span class="keyword">this</span>.msg.substr(<span class="number">0</span>,<span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">                   <span class="keyword">var</span> end=<span class="keyword">this</span>.msg.substr(<span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">                   <span class="keyword">this</span>.msg=end+start;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//    console.log(this.msg);       </span></span></span><br><span class="line"><span class="undefined">               &#125;, 500);</span></span><br><span class="line"><span class="undefined">           &#125;,</span></span><br><span class="line"><span class="undefined">           stoppmd()&#123;</span></span><br><span class="line"><span class="javascript">            clearInterval(<span class="keyword">this</span>.timer);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.timer=<span class="literal">null</span>;</span></span><br><span class="line"><span class="undefined">           &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">    &#125;) </span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="学习到的一些知识以及遇到的一些问题"><a href="#学习到的一些知识以及遇到的一些问题" class="headerlink" title="学习到的一些知识以及遇到的一些问题"></a>学习到的一些知识以及遇到的一些问题</h3><ul><li><p>学习到的第一个就是箭头函数，通过使用es6中的箭头函数就可以解决this的问题，就不用重新去指定this</p></li><li><p>第二个就是return的使用，过去我只知道return只能够返回函数值，现在我知道了return不仅仅能够返回函数值，还能够提前跳出函数返回函数值，配合条件表达式就能很好的实现一些功能。</p></li><li><p>第三个就是可以设置一个变量将定时器函数传给这个变量，然后就可以通过比如清除函数来清空定时器之类的以及重新开启定时器。</p></li></ul><h3 id="遇到的一些问题"><a href="#遇到的一些问题" class="headerlink" title="遇到的一些问题"></a>遇到的一些问题</h3><p>一个就是对象中的this的指向问题，如果是对象中定义的方法，就可以直接通过this拿到当前对象，但是如果在对象中的方法中调用了其他方法，并在这个方法中写函数的话，那么这个时候的this就指向调用的外部函数，如果要重新让this指向对象就需要在自己定义的方法中声明<code>this=this</code>，或者使用es6中的箭头函数。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在这次的学习中学习到很多es6中的新知识，下次要系统的完整的去学习es6中的知识。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;前面简单的学习了vue中的一些简单的东西以及入门，这次通过vue来做一个简单的跑马灯来试一试.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue.js的学习（一）</title>
    <link href="https://q32757468.github.io/2019/06/15/vue-js%E7%9A%84%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://q32757468.github.io/2019/06/15/vue-js的学习（一）/</id>
    <published>2019-06-15T13:31:48.000Z</published>
    <updated>2019-06-15T14:15:59.447Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最近开始学习现在最火的前端开发框架vue.js，这篇博客记录我的学习过程以及学习笔记。<br><a id="more"></a></p></blockquote><h3 id="vue-js的使用"><a href="#vue-js的使用" class="headerlink" title="vue.js的使用"></a>vue.js的使用</h3><p>先去官网下载好vue.js的文件，然后在项目中引入js文件就可以开始使用vue来进行开发了，例如这样：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"./../../js/vue.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>然后这是一个vue的基本模板：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这是一个普通的块 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-cloak</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./../../js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">'#app'</span>,<span class="comment">// 在vue中对id为app的元素进行操作</span></span></span><br><span class="line"><span class="javascript">        data:&#123;<span class="comment">//这里面写数据</span></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="javascript">        methods: &#123;<span class="comment">//这里面写各种方法 </span></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="插值表达式和v-text"><a href="#插值表达式和v-text" class="headerlink" title="插值表达式和v-text"></a>插值表达式和v-text</h3><p>在vue中想要对元素输入数值是非常简单的，不需要通过js或者jQuery拿到对象再通过函数进行传入数据，直接在dom元素中直接通过插值表达式就可以将vue中data中的值给到dom元素中。<br>比如这样：</p><h4 id="通过插值表达式"><a href="#通过插值表达式" class="headerlink" title="通过插值表达式"></a>通过插值表达式</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-cloak</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        &#123;&#123;msg&#125;&#125;12314</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm=<span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el:<span class="string">'#app'</span>,</span><br><span class="line">        data:&#123;</span><br><span class="line">            <span class="comment">//这里定义一个变量来我们想要的值</span></span><br><span class="line">            msg:<span class="string">'这是一个测试'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;           </span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>我们只需要通过插值表达式将我们创建的vue对象中的data中的变量写到dom元素中就可以将变量渲染出来。</p><p><img src="http://m.qpic.cn/psb?/V131x4904WMIoW/qQYbwi0yWJNzAlWrAIsaadH9epSrbH*kG3HLHHqbIDc!/b/dDIBAAAAAAAA&bo=VgV1AgAAAAADBwY!&rf=viewer_4"></p><p>可以看到我们定义的变量的值成功被渲染出来了</p><blockquote><p>但是注意这样会有一个问题，就是在网速较慢的时候vue.js这个文件就会加载的比较慢，那么插值表达式就不会生效，而是直接将整个表达式当做字符串输出出来，那么这个时候我们可以通过给相应的dom元素加上<code>v-cloak</code>,然后再设置样式<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[v-cloak]</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h4><p>使用<code>v-text</code>也可以将数据渲染到dom元素，但是用法不一样<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span>=<span class="string">"msg+'123423'"</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这样就可以实现了插值表达式一样的效果了。</p><blockquote><p>注意：v-text 后面可以通过<code>+</code>来拼接字符串</p></blockquote><h3 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h3><p>这个用法和<code>v-text</code>一致，作用也相似，只是<code>v-html</code>可以解析html标签，但是<code>v-text</code>不能</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">"msg+'123423'"</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><p><code>v-bind</code>可以给dom元素绑定属性值</p><p><code>v-bind</code>可以简写成<code>:</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-cloak</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"这是一个按钮"</span> <span class="attr">v-bind:title</span>=<span class="string">"mtitle"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm=<span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el:<span class="string">'#app'</span>,</span><br><span class="line">        data:&#123;</span><br><span class="line">            msg:<span class="string">'这是一个测试'</span>,</span><br><span class="line">            mtitle:<span class="string">'这是一个测试'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;           </span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p><img src="http://m.qpic.cn/psb?/V131x4904WMIoW/oWoqza.oQdO.y45D6CeNA*JLzGxuQVGoQebnZ0AN*4M!/b/dLgAAAAAAAAA&bo=7ACBAAAAAAADB08!&rf=viewer_4"><br>可以看到，成功给这个按钮加上了一个我们在vue中定义的title</p><blockquote><p><code>v-bind:title=</code>后面跟的是一个变量，所以后面也是可以拼接字符串的，许多vue中的属性也都是如此</p></blockquote><h3 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h3><p><code>v-on</code>与<code>v-bind</code>类似，只不过绑定的不是dom元素的属性，而是各种事件，</p><p><code>v-on</code>可以简写成<code>@</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-cloak</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"mclick"</span>&gt;</span>这又是一个按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm=<span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">'#app'</span>,</span><br><span class="line">    data:&#123;</span><br><span class="line">        msg:<span class="string">'这是一个测试'</span>,</span><br><span class="line">        mtitle:<span class="string">'这是一个测试'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        mclick () &#123;</span><br><span class="line">            alert(<span class="string">'单击了这个按钮'</span>);</span><br><span class="line">        &#125;           </span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="http://m.qpic.cn/psb?/V131x4904WMIoW/Mgh9tbxP89uT9zaEpNevDAzu*KeR5w9asUwwp0IokCM!/b/dLgAAAAAAAAA&bo=DgcsAQAAAAADBwY!&rf=viewer_4"></p><p>可以看到成功触发了我们自己定义的单击事件。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这篇博客记录学习了vue最简单初始的一些东西，一个小小的入门。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;最近开始学习现在最火的前端开发框架vue.js，这篇博客记录我的学习过程以及学习笔记。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Chrome-调试大全</title>
    <link href="https://q32757468.github.io/2019/06/15/Chrome-%E8%B0%83%E8%AF%95%E5%A4%A7%E5%85%A8/"/>
    <id>https://q32757468.github.io/2019/06/15/Chrome-调试大全/</id>
    <published>2019-06-15T04:14:17.000Z</published>
    <updated>2019-06-15T04:27:19.197Z</updated>
    
    <content type="html"><![CDATA[<p></p><h2>引言</h2><p></p><blockquote><p></p><p>原文出处：&nbsp;&nbsp;&nbsp;&nbsp;<a href="http://www.igeekbar.com/igeekbar/post/156.htm" rel="nofollow" target="_blank">Cayley的编程之路</a></p>“工欲善其事，必先利其器” <br>没错，这句话个人觉得说的特别有道理，举个例子来说吧，厉害的化妆师都有一套非常专业的刷子，散粉刷负责定妆，眼影刷负责打眼影，各司其职，有了专业的工具才能干专业的事，这个灵感要来源于之前我想买化妆品时，店里的海报标语，由此联想到，如果你想在某个事情上做好<a id="more"></a>，并且做的专业，那么你一定要把你的工具用好，这样才能事半功倍，我见过很多师兄师姐，写了很多代码，能够很快的完成工作，能够处理很多复杂的业务逻辑，但是对于浏览器的调试掌握的并不全面和深入，说说本姑娘吧，我的编程调试起源于自学滴前端课程，因为学习的时候看的都是基础的教学视频，对于调试也只是掌握了alert和console, 请大家别笑话，认真看完再说话，试问谁当初入门时候不是走的这条路呢，当你不再限于做静态页面，古老而经典的调试方式肯定不能帮你完成日常调试，日后我进入到了大公司去实习，才真正开始接触专业开发业务，开始跟着师兄和师傅一起上路，那时我才有了“js断点调试“的意识，开始一步步调试我的js代码~<p></p></blockquote><p><br></p><br><hr class="section-divider"><br><p><br></p><p>下面总结一下一些常用调试方法，这些方法能让开发的工作顺利并且高效，这里小女子拿出来总结一下，与各位程序猿同仁分享一下 ~ （此处应有掌声…… ^_^）</p><br><p><br></p><br><h2>一. 先来认识一下这些按钮</h2><br><div><br> <a href="http://igeekbar.com/igeekbar/networks/uploadimg/52af2165-aa3b-41ea-acdf-4c3fb7ba3b27.png" target="_blank" rel="noopener"><img src="http://igeekbar.com/igeekbar/networks/uploadimgthumb/52af2165-aa3b-41ea-acdf-4c3fb7ba3b27.png" class="img-responsive center-block"></a><br></div><br><div><br> <br><br></div><br><div><br> 先来看这张图最上头的一行是一个功能菜单，每一个菜单都有它相应的功能和使用方法，依次从左往右来看<br> <br><br></div><br><p><b>1.箭头按钮</b>：用于在页面选择一个元素来审查和查看它的相关信息，当我们在<b>Elements</b>这个按钮页面下点击某个Dom元素时，箭头按钮会变成选择状态</p><br><p><br></p><br><p><b>2.设备图标</b>：点击它可以切换到不同的终端进行开发模式，移动端和pc端的一个切换，可以选择不同的移动终端设备，同时可以选择不同的尺寸比例，chrome浏览器的模拟移动设备和真实的设备相差不大，是非常好的选择</p><br><p><br></p><br><div><br> <a href="http://igeekbar.com/igeekbar/networks/uploadimg/51d40eb1-3e74-4e27-9583-b3b50f332510.png" target="_blank" rel="noopener"><img src="http://igeekbar.com/igeekbar/networks/uploadimgthumb/51d40eb1-3e74-4e27-9583-b3b50f332510.png" class="img-responsive center-block"></a><br> <div><br>  可选择的适配<br> </div><br></div><br><p><br></p><br><p><b>3.Elements</b>&nbsp;功能标签页：用来查看，修改页面上的元素，包括DOM标签，以及css样式的查看，修改，还有相关盒模型的图形信息，下图我们可以看到当我鼠标选择id 为lg_tar的div元素时，右侧的css样式对应的会展示出此id 的样式信息，此时可以在右侧进行一个修改，修改即可在页面上生效， 灰色的element.style样式同样可以进行添加和书写，唯一的区别是，在这里添加的样式是添加到了该元素内部，实现方式即：该div元素的style属性，这个页面的功能很强大，在我们做了相关的页面后，修改样式是一块很重要的工作，细微的差距都需要调整，但是不可能说做到每修改一点即编译一遍代码，再刷新浏览器查看效果，这样很低效，一次性在浏览器中修改之后，再到代码中进行修改</p><br><p><br></p><br><div><br> <a href="http://igeekbar.com/igeekbar/networks/uploadimg/b548b239-eb00-447d-be60-29c1c3b3ce9b.png" target="_blank" rel="noopener"><img src="http://igeekbar.com/igeekbar/networks/uploadimgthumb/b548b239-eb00-447d-be60-29c1c3b3ce9b.png" class="img-responsive center-block"></a><br></div><br><div><br> <div><br>  <br><br> </div><br> <ul><br>  <li>对应的样式</li><br> </ul><br> <div><br>  <br><br> </div><br></div><br><div><br> <a href="http://igeekbar.com/igeekbar/networks/uploadimg/54802412-70df-4c69-8adb-cea9c52b2b09.png" target="_blank" rel="noopener"><img src="http://igeekbar.com/igeekbar/networks/uploadimgthumb/54802412-70df-4c69-8adb-cea9c52b2b09.png" class="img-responsive center-block"></a><br></div><br><div><br> <br><br> <ul><br>  <li>盒模型信息</li><br> </ul><br></div><br><p>同时，当我们浏览网站看到某些特别炫酷的效果和难做的样式时候，打开这个功能，我们即可看到别人是如何实现的，学会它这知识就是你的了，仔细钻研也会有意想不到的收获</p><br><p><br></p><br><p><b>4.Console控制台</b>：用于打印和输出相关的命令信息，其实console控制台除了我们熟知的报错，打印console.log信息外，还有很多相关的功能，下面简单介绍几个：</p><br><p>a: 一些对页面数据的指令操作，比如打断点正好执行到获取的数据上，由于数据都是层层嵌套的对象，这个时候查看里面的key/value不是很方便，即可用这个指令开查看，obj的json string 格式的key/value，我们对于数据里面有哪些字段和属性即可一目了然</p><br><p><br></p><br><div><br> <a href="http://igeekbar.com/igeekbar/networks/uploadimg/ac4fc806-f29a-44e2-bcf0-95b28c401790.png" target="_blank" rel="noopener"><img src="http://igeekbar.com/igeekbar/networks/uploadimgthumb/ac4fc806-f29a-44e2-bcf0-95b28c401790.png" class="img-responsive center-block"></a><br> <div><br>  其他功能<br> </div><br></div><br><p>b: 除了console.log还有其他相关的指令可用</p><br><p><br></p><br><div><br> <a href="http://igeekbar.com/igeekbar/networks/uploadimg/6e7f7867-9422-4238-a23b-d463e1f799d5.png" target="_blank" rel="noopener"><img src="http://igeekbar.com/igeekbar/networks/uploadimgthumb/6e7f7867-9422-4238-a23b-d463e1f799d5.png" class="img-responsive center-block"></a><br> <div><br>  console也有相关的API<br> </div><br> <div><br>  <br><br> </div><br></div><br><p><b>5.Sources</b>&nbsp;js资源页面：这个页面内我们可以找到当然浏览器页面中的js 源文件，方便我们查看和调试，在我还没有走出校园时候，我经常看一些大站的js代码，那时候其实基本都看不懂，但是最起码可以看看人家的代码风格，人家的命名方式，所有的代码都是压缩之后的代码，我们可以点击下面的{}大括号按钮将代码转成可读格式</p><br><p>Sources Panel 的左侧分别是 Sources 和 Content scripts和Snippets<br></p><br><div><br> <a href="http://igeekbar.com/igeekbar/networks/uploadimg/a147d491-68bd-45d7-8403-6c25ce99201e.png" target="_blank" rel="noopener"><img src="http://igeekbar.com/igeekbar/networks/uploadimgthumb/a147d491-68bd-45d7-8403-6c25ce99201e.png" class="img-responsive center-block"></a><br> <div><br>  <br><br> </div><br> <ul><br>  <li>对应的源代码</li><br> </ul><br></div><br><p><br></p><br><div><br> <a href="http://igeekbar.com/igeekbar/networks/uploadimg/a8e61566-e44e-4a92-95e0-c872cf9a2cbb.png" target="_blank" rel="noopener"><img src="http://igeekbar.com/igeekbar/networks/uploadimgthumb/a8e61566-e44e-4a92-95e0-c872cf9a2cbb.png" class="img-responsive center-block"></a><br> <div><br>  <br><br> </div><br> <ul><br>  <li>格式化后的代码</li><br> </ul><br> <div><br>  <br><br> </div><br></div><br><p>关于打断点调试的内容，下面介绍，先来说一些，其他平时基本没人用但是很有用的小点，比如当我们想不起某个方法的具体使用时候，会打开控制台随意写一些测试代码，或者想测试一下刚刚写的方法是否会出现期待的样子，但是控制台一打回车本想换行但是却执行刚写的半截代码，所以推荐使用<b>Sources</b>下面的左侧的Sinppets代码片段按钮，这时候点击创建一个新的片段文件，写完测试代码后把鼠标放在新建文件上run，再结合控制台查看相关信息（<b>新建了一个名叫：app.js的片段代码，在你的项目环境页面内，该片段可执行项目内的方法</b>）</p><br><p><br></p><br><div><br> <a href="http://igeekbar.com/igeekbar/networks/uploadimg/f56570d0-2ec4-4970-8ba5-c1bf2b8abf2d.png" target="_blank" rel="noopener"><img src="http://igeekbar.com/igeekbar/networks/uploadimgthumb/f56570d0-2ec4-4970-8ba5-c1bf2b8abf2d.png" class="img-responsive center-block"></a><br> <div><br>  <br><br> </div><br> <ul><br>  <li>自己书写的片段</li><br> </ul><br> <div><br>  <br><br> </div><br></div><br><p>Content scripts 是 Chrome 的一种扩展程序，它是按照扩展的ID来组织的，这些文件也是嵌入在页面中的资源，这类文件可以读写和操作我们的资源，需要调试这些扩展文件，则可以在这个目录下打开相关文件调试，但是几乎我们的项目还没有相关的扩展文件，所以啥也看不到，平时也不需要关心这块</p><br><div><br> <a href="http://igeekbar.com/igeekbar/networks/uploadimg/e93f193c-3bf2-41ef-b300-e199a8a60d27.png" target="_blank" rel="noopener"><img src="http://igeekbar.com/igeekbar/networks/uploadimgthumb/e93f193c-3bf2-41ef-b300-e199a8a60d27.png" class="img-responsive center-block"></a><br> <div><br>  无结果<br> </div><br> <div><br>  <br><br> </div><br></div><br><p><b>6.Network&nbsp;</b>网络请求标签页：可以看到所有的资源请求，包括网络请求，图片资源，html,css，js文件等请求，可以根据需求筛选请求项，一般多用于网络请求的查看和分析，分析后端接口是否正确传输，获取的数据是否准确，请求头，请求参数的查看</p><br><div><br> <div><br>  <a href="http://igeekbar.com/igeekbar/networks/uploadimg/83a9003a-434c-4f11-a7d6-6ce2f5965106.png" target="_blank" rel="noopener"><img src="http://igeekbar.com/igeekbar/networks/uploadimgthumb/83a9003a-434c-4f11-a7d6-6ce2f5965106.png" class="img-responsive center-block"></a><br> </div><br> <ul><br>  <li>所有的资源</li><br> </ul><br> <div><br>  <br><br> </div><br></div><br><p>以上我选择了All，就会把该页面所有资源文件请求下来，如果只选择XHR 异步请求资源，则我们可以分析相关的请求信息</p><br><div><br> <a href="http://igeekbar.com/igeekbar/networks/uploadimg/a36f5b9e-2e06-4593-9c77-a50d798bc8ea.png" target="_blank" rel="noopener"><img src="http://igeekbar.com/igeekbar/networks/uploadimgthumb/a36f5b9e-2e06-4593-9c77-a50d798bc8ea.png" class="img-responsive center-block"></a><br> <div><br>  <br><br> </div><br> <ul><br>  <li>请求的相关信息</li><br> </ul><br> <div><br>  <br><br> </div><br></div><br><p>打开一个Ajax异步请求，可以看到它的请求头信息，是一个POST请求，参数有哪些，还可以预览它的返回的结果数据，这些数据的使用和查看有利于我们很好的和后端工程师们联调数据，也方便我们前端更直观的分析数据</p><br><div><br> <a href="http://igeekbar.com/igeekbar/networks/uploadimg/90ebfadd-e79a-4837-9873-5cbb0cd1b0f2.png" target="_blank" rel="noopener"><img src="http://igeekbar.com/igeekbar/networks/uploadimgthumb/90ebfadd-e79a-4837-9873-5cbb0cd1b0f2.png" class="img-responsive center-block"></a><br> <div><br>  <br><br> </div><br> <ul><br>  <li>预览请求的数据</li><br> </ul><br> <div><br>  <br><br> </div><br></div><br><p><b>7.Timeline</b>标签页可以显示JS执行时间、页面元素渲染时间，不做过多介绍</p><br><p><br></p><br><p><b>8.Profiles</b>标签页可以<b>查看</b>CPU执行时间与内存占用，不做过多介绍</p><br><p><br></p><br><p><b>9.Resources</b>标签页会列出所有的资源，以及HTML5的Database和LocalStore等，你可以对存储的内容编辑和删除 不做过多介绍</p><br><p><br></p><br><p><b>10.Security</b>标签页 可以告诉你这个网站的安全性，查看有效的证书等</p><br><p><br></p><br><p><b>11.Audits</b>标签页 可以帮你分析页面性能，有助于优化前端页面，分析后得到的报告</p><br><div><br> <a href="http://igeekbar.com/igeekbar/networks/uploadimg/2e0393c9-cc86-4a20-905e-3f80154f4f2f.png" target="_blank" rel="noopener"><img src="http://igeekbar.com/igeekbar/networks/uploadimgthumb/2e0393c9-cc86-4a20-905e-3f80154f4f2f.png" class="img-responsive center-block"></a><br> <div><br>  <br><br> </div><br> <ul><br>  <li>分析结果</li><br> </ul><br> <p><br></p><br></div><br><h2>二.Sources资源页面的断点调试</h2><br><p><b>1.如何调试</b>：</p><br><p>调试js代码，肯定是我们常用的功能，那么如何打断点，找到要调试的文件，然后在内容源代码左侧的代码标记行处点击即可打上一个断点<br></p><br><div><br> <a href="http://igeekbar.com/igeekbar/networks/uploadimg/0d2066b5-e10e-4562-b5f7-eef9ff2e9a02.png" target="_blank" rel="noopener"><img src="http://igeekbar.com/igeekbar/networks/uploadimgthumb/0d2066b5-e10e-4562-b5f7-eef9ff2e9a02.png" class="img-responsive center-block"></a><br></div><br><p><b>2.断点与 js代码修改</b></p><br><p>看下面这张图，我在一个名为toggleTab的方法下打了两个断点，当开始执行我们的点击切换tab行为后，代码会在执行的断点出停下来，并把相关的数据展示一部分，此时可以在已经执行过得代码处，把鼠标放上去，即可查看相关的具体数据信息，同时我们可以使用右侧的功能键进行调试，右侧最上面一排分别是：暂停/继续、单步执行(<b>F10快捷键</b>)、单步跳入此执行块(<b>F11快捷键</b>)、单步跳出此执行块、禁用/启用所有断点。下面是各种具体的功能区</p><br><div><br> <a href="http://igeekbar.com/igeekbar/networks/uploadimg/980c6de1-f378-48c3-90a5-6d865b46881f.png" target="_blank" rel="noopener"><img src="http://igeekbar.com/igeekbar/networks/uploadimgthumb/980c6de1-f378-48c3-90a5-6d865b46881f.png" class="img-responsive center-block"></a><br> <div><br>  <br><br> </div><br> <ul><br>  <li>在代码中打断点</li><br> </ul><br></div><br><p><br></p><br><p>在当前的代码执行区域，在调试中如果发现需要修改的地方，也是可以立即修改的，修改后保存即可生效，这样就免去了再到代码中去书写，再刷新回看了</p><br><div><br> <a href="http://igeekbar.com/igeekbar/networks/uploadimg/cce6a3d6-e055-43ea-9687-e3f1fa6854cf.png" target="_blank" rel="noopener"><img src="http://igeekbar.com/igeekbar/networks/uploadimgthumb/cce6a3d6-e055-43ea-9687-e3f1fa6854cf.png" class="img-responsive center-block"></a><br></div><br><div><br> <br><br> <div><br>  临时修改<br> </div><br></div><br><p><b><br></b></p><br><p><b>3.快速进入调试的方法</b></p><br><p>当我们的代码执行到某个程序块方法处，这个方法上可能你并没有设置相关的断点，此时你可以F11进入此程序块，但是往往我们的项目都是经过很多源代码封装好的方法，有时候进入后，会走很多底层的封装方法，需要很多步骤才能真正进入这个函数块，此时将鼠标放在此函数上，会出现相关提示，会告诉你在该文件的哪一行代码处，点击即可直接看到这个函数，然后临时打上断点，按F10或者点击右上角的第二个按钮即可直接进入此函数的断点处</p><br><div><br> <a href="http://igeekbar.com/igeekbar/networks/uploadimg/5130e68e-74c7-4b1a-9a12-7f5e7f5ceb6d.png" target="_blank" rel="noopener"><img src="http://igeekbar.com/igeekbar/networks/uploadimgthumb/5130e68e-74c7-4b1a-9a12-7f5e7f5ceb6d.png" class="img-responsive center-block"></a><br></div><br><p><b><br></b></p><br><p><b>4.调试的功能区域</b></p><br><p>每一个功能区，都有它相关的左右，先来看一张图，它都有哪些功能</p><br><div><br> <a href="http://igeekbar.com/igeekbar/networks/uploadimg/bdb50caf-0484-47b9-a3ed-ec0aa9d38e67.png" target="_blank" rel="noopener"><img src="http://igeekbar.com/igeekbar/networks/uploadimgthumb/bdb50caf-0484-47b9-a3ed-ec0aa9d38e67.png" class="img-responsive center-block"></a><br></div><br><p><b>Call Stack调用栈</b>：当断点执行到某一程序块处停下来后，右侧调试区的 Call Stack 会显示当前断点所处的方法调用栈，从上到下由最新调用处依次往下排列，Call Stack 列表的下方是Scope Variables列表可以查看此时局部变量和全局变量的值。图中可以看出，我们最先走了toggleTab这个方法，然后走到了一个更新对象的方法上，当前调用在哪里，箭头会帮你指向哪里，同时我们可以点击，调用栈列表上的任意一处，即可回头再去看看代码</p><br><div><br> <a href="/igeekbar/networks/uploadimg/8dd4193f-f723-4597-9633-1c789fbf474b.png"><img src="/igeekbar/networks/uploadimgthumb/8dd4193f-f723-4597-9633-1c789fbf474b.png" class="img-responsive center-block"></a><br></div><br><p>但是若你想从新从某个调用方法出执行，可以右键Restart Frame， 断点就会跳到此处开头重新执行，<b>Scope</b>&nbsp;中的变量值也会依据代码从新更改，这样就可以回退来从新调试，错过的调试也可以回过头来反复查看</p><br><div><br> <a href="http://igeekbar.com/igeekbar/networks/uploadimg/c7ba0acc-7305-4a55-9790-6bc637922989.png" target="_blank" rel="noopener"><img src="http://igeekbar.com/igeekbar/networks/uploadimgthumb/c7ba0acc-7305-4a55-9790-6bc637922989.png" class="img-responsive center-block"></a><br></div><br><p><b>Breakpoints</b>关于断点：所有当前js的断点都会展示在这个区域，你可以点击按钮用来“去掉/加上”此处断点，也可以点击下方的代码表达式，调到相应的程序代码处，来查看</p><br><div><br> <a href="http://igeekbar.com/igeekbar/networks/uploadimg/1cd4281f-4170-40e4-8bfa-cc0050af9a53.png" target="_blank" rel="noopener"><img src="http://igeekbar.com/igeekbar/networks/uploadimgthumb/1cd4281f-4170-40e4-8bfa-cc0050af9a53.png" class="img-responsive center-block"></a><br></div><br><p><b>XHR Breakpoints</b></p><br><p>在XHR Breakpoints处，点击右侧的+号，可以添加请求的URL，一旦 XHR 调用触发时就会在 request.send() 的地方中断</p><br><div><br> <a href="http://igeekbar.com/igeekbar/networks/uploadimg/238a0267-dbd8-4dd3-8598-b09895b5694e.png" target="_blank" rel="noopener"><img src="http://igeekbar.com/igeekbar/networks/uploadimgthumb/238a0267-dbd8-4dd3-8598-b09895b5694e.png" class="img-responsive center-block"></a><br></div><br><p><b>DOM Breakpoints:</b></p><br><p>可以给你的DOM元素设置断点，有时候真的需要监听和查看某个元素的变化情况，赋值情况，但是我们并是不太关心哪一段代码对它做的修改，只想看看它的变化情况，那么可以给它来个监听事件，这个时候DOM Breakpoints中会如图</p><br><div><br> <a href="http://igeekbar.com/igeekbar/networks/uploadimg/da1c5b48-42db-4d5f-8a24-19389fa858f0.png" target="_blank" rel="noopener"><img src="http://igeekbar.com/igeekbar/networks/uploadimgthumb/da1c5b48-42db-4d5f-8a24-19389fa858f0.png" class="img-responsive center-block"></a><br></div><br><p>当要给DOM添加断点的时候，会出现选择项分别是如下三种修改1.子节点修改2.自身属性修改3.自身节点被删除。选中之后，Sources Panel 中右侧的 DOM Breakpoints 列表中就会出现该 DOM 断点。一旦执行到要对该 DOM 做相应修改时，代码就会在那里停下来</p><br><p><b>Event listener Breakpoints&nbsp;</b></p><br><p>最后Event Listener 列表，这里列出了各种可能的事件类型。勾选对应的事件类型，当触发了该类型的事件的 JavaScript 代码时就会自动中断</p><br><p><br></p><br><h2>三.Post man你值得拥有的网络请求神器</h2><br><p>在我们的开发过程中，后端的接口都是由发起AJAX请求而获取到的相关数据，但是很多情况是我们的业务还没有做到那块时，后端的同学接口都已经准备好了，但是为了便于后期的工作，将接口请求的数据模拟访问，然后对接口联调很重要，也很方便，因为我们不可能把每个请求代码都写到文件里编译好了再去浏览器内查看，这时候可以安装一个post man网络请求插件，在谷歌应用商店下载，需要翻墙<br></p><br><div><br> <a href="http://igeekbar.com/igeekbar/networks/uploadimg/eea9dc12-f18e-4ccc-9998-b34f4f367ce1.png" target="_blank" rel="noopener"><img src="http://igeekbar.com/igeekbar/networks/uploadimgthumb/eea9dc12-f18e-4ccc-9998-b34f4f367ce1.png" class="img-responsive center-block"></a><br></div><br><p>该扩展程序使用非常简单，功能同时也非常强大，输入你的请求，选择好请求的method，需要请求参数的挨个填好，send之后，就可以看到返回的数据，这个小工具很利于我们的开发</p><br><div><br> <a href="http://igeekbar.com/igeekbar/networks/uploadimg/48b702eb-7a24-4fa9-aa52-bcc8b97c8fbd.png" target="_blank" rel="noopener"><img src="http://igeekbar.com/igeekbar/networks/uploadimgthumb/48b702eb-7a24-4fa9-aa52-bcc8b97c8fbd.png" class="img-responsive center-block"></a><br></div><br><h2>完结</h2><br><p>写到这里这篇总结就结束了，也许有很多写的不到位的地方，也有一些专业用词不严谨的地方，希望看到的读者可以和我一起交流，我也非常乐意我的总结可以给 刚刚学会编程需要调试的同学受用，再此之前我一直在寻找一篇从头到尾的调试教学文章，我一直没有找到，要么是一点点的片段讲解，要么是专讲js断点调试，所以索性后来就直接看了 Chrome Developer Tools 的英文官方文档，并结合自己的一些小使用心得总结出此文，希望受到指点和修正 也希望可以帮助一些同学~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;h2&gt;引言&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;原文出处：&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href=&quot;http://www.igeekbar.com/igeekbar/post/156.htm&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Cayley的编程之路&lt;/a&gt;&lt;/p&gt;“工欲善其事，必先利其器” &lt;br&gt;没错，这句话个人觉得说的特别有道理，举个例子来说吧，厉害的化妆师都有一套非常专业的刷子，散粉刷负责定妆，眼影刷负责打眼影，各司其职，有了专业的工具才能干专业的事，这个灵感要来源于之前我想买化妆品时，店里的海报标语，由此联想到，如果你想在某个事情上做好
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Bootstrap4与Bootstrap3的区别</title>
    <link href="https://q32757468.github.io/2019/06/14/Bootstrap4%E4%B8%8EBootstrap3%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://q32757468.github.io/2019/06/14/Bootstrap4与Bootstrap3的区别/</id>
    <published>2019-06-14T09:24:35.000Z</published>
    <updated>2019-06-17T06:25:24.953Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;刚接触bootstrap是学习的b3，但是b4已经出来了有一段时间了，而且试过b4之后我更加的喜欢b4，因为二者之间还是有很多差别的，所以这里介绍一下二者的差别。<br><a id="more"></a></p></blockquote><h3 id="Bootstrap4特点"><a href="#Bootstrap4特点" class="headerlink" title="Bootstrap4特点"></a>Bootstrap4特点</h3><ol><li>新增网格层适配了移动端；</li><li>全面引入ES6新特性（重写所有JavaScript插件）；</li><li>css文件减少了至少40%；</li><li>所有文档都用Markdown编辑器重写；</li><li>放弃对IE8的支持</li></ol><table><thead><tr><th align="left">Bootstrap3</th><th align="left">Bootstrap4</th></tr></thead><tbody><tr><td align="left">Less</td><td align="left">Sass语言编写</td></tr><tr><td align="left">4种栅格类</td><td align="left">5种栅格类</td></tr><tr><td align="left">使用px为单位</td><td align="left">使用rem和em为单位（除部分margin和padding使用px）</td></tr><tr><td align="left">使用push和pull向左右移动</td><td align="left">偏移列通过offset-类设置</td></tr><tr><td align="left">使用float的布局方式</td><td align="left">选择弹性盒模型（flexbox）</td></tr></tbody></table><h3 id="栅格系统方面的区别"><a href="#栅格系统方面的区别" class="headerlink" title="栅格系统方面的区别"></a>栅格系统方面的区别</h3><h4 id="Bootstrap3的4种栅格："><a href="#Bootstrap3的4种栅格：" class="headerlink" title="Bootstrap3的4种栅格："></a>Bootstrap3的4种栅格：</h4><ul><li>特小（col-xs-） 适配手机(&lt;768px)</li><li>小（col-sm-） 适配平板(≥768px)</li><li>中（col-md-） 适配电脑(≥992px)</li><li>大（col-lg-） 适配宽屏电脑(≥1200px)</li></ul><h5 id="Bootstrap4的5种栅格："><a href="#Bootstrap4的5种栅格：" class="headerlink" title="Bootstrap4的5种栅格："></a>Bootstrap4的5种栅格：</h5><ul><li>特小（col-）(&lt;576px)</li><li>小（col-sm-）(≥576px)</li><li>中（col-md-）(≥768px)</li><li>大（col-lg-） (≥992px)</li><li>特大（col-xl-）（≥1200px）</li></ul><h3 id="一些类方面的区别"><a href="#一些类方面的区别" class="headerlink" title="一些类方面的区别"></a>一些类方面的区别</h3><h4 id="img-circle与新版本中的rounded-circle"><a href="#img-circle与新版本中的rounded-circle" class="headerlink" title="img-circle与新版本中的rounded-circle"></a>img-circle与新版本中的rounded-circle</h4><p>老版本中<code>img-circle</code>只对图片 而新版本中<code>rounded-circle</code>对所有元素全部生效</p><h4 id="媒体对象"><a href="#媒体对象" class="headerlink" title="媒体对象"></a>媒体对象</h4><p>去除了<code>media-left</code> <code>media-right</code> 只有<code>media-body</code> 在其中会自适应 在body前写一个图片即使left,在body之后便是right</p><h4 id="display系列-偏移-外边距-内边距"><a href="#display系列-偏移-外边距-内边距" class="headerlink" title="display系列 / 偏移 / 外边距 / 内边距"></a>display系列 / 偏移 / 外边距 / 内边距</h4><ul><li>用<code>d-xx</code>来设置display属性</li><li>偏移 不再使用 <code>col-[尺寸]-offset-[x]</code> 而是 <code>offset-[尺寸]-[x]</code></li><li>内外边距可以使用<code>m-5</code>这种方式来书写例如：<code>ml-3</code> <code>pt-4</code><blockquote><p>并且以上两项都可以通过设置对应分辨率来控制，如：<code>ml-md-3</code></p></blockquote></li></ul><h4 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h4><p><code>badge-[]</code> 对应 bs3 label<br>可以设置<code>outline</code>比如<code>btn-outline-success</code></p><h4 id="新增flex类"><a href="#新增flex类" class="headerlink" title="新增flex类"></a>新增flex类</h4><p>可以通过类来设置flex，名称与css样式的属性相同</p><h3 id="导航栏"><a href="#导航栏" class="headerlink" title="导航栏"></a>导航栏</h3><p>这是bs3的tabs导航栏<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav nav-tabs"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"presentation"</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"presentation"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Profile<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"presentation"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Messages<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>bs4是这样写：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav nav-tabs"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"nav-item"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"nav-link active"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"nav-item"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"nav-link disabled"</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">tabindex</span>=<span class="string">"-1"</span> <span class="attr">aria-disabled</span>=<span class="string">"true"</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>可以看出导航的内容中不再需要添加<code>role=&quot;presentation&quot;</code>，并且bs4中使用<code>nav-item</code>来规定导航中的内容</p><p>导航栏中使用<code>mr-auto</code> <code>ml-auto</code> <code>m-auto</code> 来使导航栏中的内容居左/右/中</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;刚接触bootstrap是学习的b3，但是b4已经出来了有一段时间了，而且试过b4之后我更加的喜欢b4，因为二者之间还是有很多差别的，所以这里介绍一下二者的差别。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Bootstrap的学习与使用</title>
    <link href="https://q32757468.github.io/2019/06/13/Bootstrap%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>https://q32757468.github.io/2019/06/13/Bootstrap的学习与使用/</id>
    <published>2019-06-13T12:15:34.000Z</published>
    <updated>2019-06-14T09:20:08.959Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其实学习bootstrap是在写这篇博客很久之前的事情了，但是由于一些其他的很多事情，就没有第一时间写这篇博客，记录关于bootstrap中学习的一些事情。现在来写一下。bootstrap作为现在非常流行的响应式框架，必然是要学习的，起初我对bootstrap的了解并不是很多，只知道这算是一个框架，然后我就在网上看视频跟着学，然后等学习完了就清楚了，bootstrap其实是一个前端的css库，通过调用各种css演示可以很轻松的将一个响应式的网站给搭建起来，其实最另我没有想到的是使用bootstrap框架开发竟然如此便捷，甚至可以几乎不用自己写一点的css演示就可以有一个漂亮美观的页面，其实bootstrap要学的东西不多，大部分在<a href="https://www.bootcss.com/" target="_blank" rel="noopener">文档</a>中找到相应的使用方法就会用了,这篇博客记录一下我在学习之初所做的一些笔记。<br><a id="more"></a></p></blockquote><h3 id="字体图标的使用"><a href="#字体图标的使用" class="headerlink" title="字体图标的使用"></a>字体图标的使用</h3><ul><li>bootstrap中有许多的字体图标，但是数量也是有限的，所以我们需要一些自定义的字体图标，图标网站有很多，我比较喜欢去<a href="https://www.iconfont.cn" target="_blank" rel="noopener">阿里矢量图标库找</a></li><li>参考阿里矢量图标库给的使用文档所提供的三种使用图标的方法：</li></ul><h4 id="第一种：Unicode-引用"><a href="#第一种：Unicode-引用" class="headerlink" title="第一种：Unicode 引用"></a>第一种：Unicode 引用</h4><p>Unicode 是字体在网页端最原始的应用方式，特点是：</p><ul><li>兼容性最好，支持 IE6+，及所有现代浏览器。</li><li>支持按字体的方式去动态调整图标大小，颜色等等。</li><li>但是因为是字体，所以不支持多色。只能使用平台里单色的图标，就算项目里有多色图标也会自动去色。<blockquote><p>注意：新版 iconfont 支持多色图标，这些多色图标在 Unicode 模式下将不能使用，如果有需求建议使用symbol 的引用方式</p></blockquote></li></ul><p>Unicode 使用步骤如下：</p><p>第一步：拷贝项目下面生成的 @font-face<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">'iconfont'</span>;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">'iconfont.eot'</span>);</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">'iconfont.eot?#iefix'</span>) <span class="built_in">format</span>(<span class="string">'embedded-opentype'</span>),</span><br><span class="line">      <span class="built_in">url</span>(<span class="string">'iconfont.woff2'</span>) <span class="built_in">format</span>(<span class="string">'woff2'</span>),</span><br><span class="line">      <span class="built_in">url</span>(<span class="string">'iconfont.woff'</span>) <span class="built_in">format</span>(<span class="string">'woff'</span>),</span><br><span class="line">      <span class="built_in">url</span>(<span class="string">'iconfont.ttf'</span>) <span class="built_in">format</span>(<span class="string">'truetype'</span>),</span><br><span class="line">      <span class="built_in">url</span>(<span class="string">'iconfont.svg#iconfont'</span>) <span class="built_in">format</span>(<span class="string">'svg'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>第二步：定义使用 iconfont 的样式<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.iconfont</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">"iconfont"</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">font-style</span>: normal;</span><br><span class="line">  <span class="attribute">-webkit-font-smoothing</span>: antialiased;</span><br><span class="line">  <span class="attribute">-moz-osx-font-smoothing</span>: grayscale;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>第三步：挑选相应图标并获取字体编码，应用于页面<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"iconfont"</span>&gt;</span>&amp;#x33;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure></p><blockquote><p>“iconfont” 是你项目下的 font-family。可以通过编辑项目查看，默认是 “iconfont”。</p></blockquote><h4 id="第二种：font-class-引用"><a href="#第二种：font-class-引用" class="headerlink" title="第二种：font-class 引用"></a>第二种：font-class 引用</h4><p>font-class 是 Unicode 使用方式的一种变种，主要是解决 Unicode 书写不直观，语意不明确的问题。</p><p>与 Unicode 使用方式相比，具有如下特点：</p><ul><li>兼容性良好，支持 IE8+，及所有现代浏览器。</li><li>相比于 Unicode 语意明确，书写更直观。可以很容易分辨这个 icon 是什么。</li><li>因为使用 class 来定义图标，所以当要替换图标时，只需要修改 class 里面的 Unicode 引用。</li><li>不过因为本质上还是使用的字体，所以多色图标还是不支持的。<br>使用步骤如下：</li></ul><p>第一步：引入项目下面生成的 fontclass 代码：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel="stylesheet" href="./iconfont.css"&gt;</span><br></pre></td></tr></table></figure></p><p>第二步：挑选相应图标并获取类名，应用于页面：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"iconfont icon-xxx"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure></p><blockquote><p>“ iconfont” 是你项目下的 font-family。可以通过编辑项目查看，默认是 “iconfont”。</p></blockquote><h4 id="第三种：Symbol-引用"><a href="#第三种：Symbol-引用" class="headerlink" title="第三种：Symbol 引用"></a>第三种：Symbol 引用</h4><p>这是一种全新的使用方式，应该说这才是未来的主流，也是平台目前推荐的用法。相关介绍可以参考这篇文章 这种用法其实是做了一个 SVG 的集合，与另外两种相比具有如下特点：</p><ul><li>支持多色图标了，不再受单色限制。</li><li>通过一些技巧，支持像字体那样，通过 font-size, color 来调整样式。</li><li>兼容性较差，支持 IE9+，及现代浏览器。</li><li>浏览器渲染 SVG 的性能一般，还不如 png。<br>使用步骤如下：</li></ul><p>第一步：引入项目下面生成的 symbol 代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./iconfont.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>第二步：加入通用 CSS 代码（引入一次就行）：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line"><span class="selector-class">.icon</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">vertical-align</span>: -<span class="number">0.15em</span>;</span><br><span class="line">  <span class="attribute">fill</span>: currentColor;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p><p>第三步：挑选相应图标并获取类名，应用于页面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg class=&quot;icon&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">  &lt;use xlink:href=&quot;#icon-xxx&quot;&gt;&lt;/use&gt;</span><br><span class="line">&lt;/svg&gt;</span><br></pre></td></tr></table></figure></p><p>这里用第二种方法与第三种方法做一个演示：<br><img src="http://m.qpic.cn/psb?/V131x4904WMIoW/9VaJWjOEu1kDCMcQ6.weozBu0ZKwqIpi6.AZtmjQMZw!/b/dL4AAAAAAAAA&bo=LQF3AAAAAAADB3k!&rf=viewer_4"><br>可以看到无论用哪种方法都能成功使用到字体图标，既然symbol的方法使未来趋势那就尽量多使用symbol吧，毕竟这种方式还可以支持多色图标</p><blockquote><p>有一件事情要注意，就是在最开始的时候我通过symbol方式去设置图标的颜色发现并不成功，后面查阅资料后发现是因为当我在下载图标代码的时候这个图标本身使带有颜色的，这里有两种办法：</p><ol><li>打开js文件，将<code>fill=&quot;#......&quot;</code>删除。</li><li>到iconfont.cn上，全选项目中的文件，应用批量操作–&gt;批量去色</li></ol></blockquote><p>当然啦，还有其他的特别多的图标库，像font awesome这种专门为bootstrap设计的之类的，看个人喜好用什么，这里就介绍了引用阿里矢量图标库中的图标</p><h3 id="选项卡的适配"><a href="#选项卡的适配" class="headerlink" title="选项卡的适配"></a>选项卡的适配</h3><ul><li><p>当页面的宽度缩小到一定的程度的时候，选项卡中的选项就会换行，有时这不是我们想要的效果，我们想要的效果是当所有选项的宽度之和大于外部的宽度的时候它就会出现一个横向的滚动条</p></li><li><p>那我们就可以通过<code>overfow ：auto</code>来实现，但是只设置<code>overflow</code>很显然是不能达到这种效果的，因为这个时候当我们把页面的宽度缩小选项卡的头部会进行换行</p></li><li><p>所以我们还需要使它不进行换行，因为b4相较于b3进行了重写，不再使用float布局而是使用flex布局，所以我们可以通过flex来进行设置不换行，先设置为flex布局，再设置为不换行，这时候就实现了我们想要的效果</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    a &#123;</span></span><br><span class="line"><span class="undefined">        padding-right: 100px !important;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.nav-tabs</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="comment">/* width: 400px; */</span></span></span><br><span class="line"><span class="undefined">        padding-bottom: 1px;</span></span><br><span class="line"><span class="undefined">        margin-top: 0;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav nav-tabs d-flex overflow-auto flex-nowrap"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"nav-item"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"nav-link active"</span>&gt;</span>Active<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"nav-item"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"nav-link"</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"nav-item disabled"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"nav-link"</span>&gt;</span>Disabled<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"nav-item"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"nav-link active"</span>&gt;</span>Active<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再来看一下实现的效果：<br><img src="http://m.qpic.cn/psb?/V131x4904WMIoW/Xs6hPal3O3QBEACXAhSkQsqvigd0aU4LQk*D937SLas!/b/dD4BAAAAAAAA&bo=twJvAAAAAAADB*g!&rf=viewer_4"><br>成功实现效果！</p><h3 id="一些小笔记"><a href="#一些小笔记" class="headerlink" title="一些小笔记"></a>一些小笔记</h3><ul><li><p><strong>bootstrap自适应的底层是用媒体查询做的</strong><br>通过媒体查询来定义不同分辨率下容器的不同宽度，以及栅栏系统的宽度。</p></li><li><p><strong>bootstrap是组件化开发，有很多的组件可以使用，包括像各种定义好样式的按钮，各种按钮可以用<a href="http://blog.koalite.com/bbg/" target="_blank" rel="noopener">bbg</a>来生成。</strong></p></li><li><p><strong>bootstrap中的容器</strong><br>container与container-fluid的作用就是当成一个容器，这个容器自带了响应式的布局。这两个容器的区别就是一个是固定的宽度，一个是百分之百的宽度，container用的比较多.<br>container拥有15px的左右内边距，可以用row来抵消。</p></li><li><p><strong>多套轮播图的处理</strong><br>在响应式的布局中可能会有两套轮播图，一套显示在pc端，一套显示在手机端，pc端的图片用背景图来处理，只显示中间的那一部分，只有在宽度在拉长的时候会把边上的纯色部分显示出来<br>处理方式是通过 background:no-repeat center center 来将背景图片居中<br>然后通过background-size:cover来让图片显示<br>HTML元素自定义属性的方法是通过data来设置，比如设置 data-name=”hsl” 属性，<br>然后通过jQuery中的data(“name”)就可以拿到我们想要的数据，<br>然后通过 data(“name”,”sss”)就可以设置属性<br>然后就可以通过这种方法来给标签设置属性，再通过jQuery动态的设置图片</p></li><li><p><strong>在bootstrap中有很多的全局样式，能用bootstrap自带的样式就用自带的（比如颜色）</strong></p></li><li><p><strong>补充一个css样式的用法，设置背景颜色可以设置trans什么的来继承父级的颜色</strong></p></li><li><p><strong>使用bootstrap的时候，在布局的时候主要是使用栅格系统，就可以很轻松的将一大块内容分割成我们想要的部分。</strong></p></li><li><p><strong>bootstrap中的徽章可以用来做圆角边框并且自带颜色</strong></p></li><li><p><strong>bootstrap中的媒体对象可以用来处理图片加文字的并排情况</strong></p></li><li><p><strong>在容器栅格布局中尽量不要使用margin，而是使用padding，因为本身12份已经占满了，没有多余的空间来设置margin</strong></p></li><li><p><strong>使用栅栏系统的时候当满了12列，剩下的就会换行，比如有4个col-md-6,那么这里就会占满两行。</strong></p></li><li><p><strong>栅格系统中的内容居中的方法有很多，比如可以用<code>text-align</code>或者是flex布局，对于图片来说的话可以使用<code>margin auto</code> 来设置要注意的一点是图片是一个行内元素，不能直接设置上下边距，如果要设置则需要将其设置为块级元素或者是行内块级元素</strong></p></li><li><p><strong>如果要给整块内容添加超链接直接在内容最外层添加a标签即可</strong></p></li><li><p><strong>在很多时候可以不用设置高度，而是可以直接通过设置padding值来让内容撑开</strong></p></li><li><p><strong>在使用bootstrap进行响应式开发的时候一定要注意最外层应该不要设置固定高度，否则在自适应的时候可能会出现问题</strong></p></li><li><p><strong>通过full-left可以将本来占一行的元素浮动到一行,b4中使用<code>offset-</code>来设置向左或是向右，通过设置display为inline-block也能实现这样的效果</strong></p></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>学习总结是一个漫长的过程，这篇博客还会持续记录一些问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;其实学习bootstrap是在写这篇博客很久之前的事情了，但是由于一些其他的很多事情，就没有第一时间写这篇博客，记录关于bootstrap中学习的一些事情。现在来写一下。bootstrap作为现在非常流行的响应式框架，必然是要学习的，起初我对bootstrap的了解并不是很多，只知道这算是一个框架，然后我就在网上看视频跟着学，然后等学习完了就清楚了，bootstrap其实是一个前端的css库，通过调用各种css演示可以很轻松的将一个响应式的网站给搭建起来，其实最另我没有想到的是使用bootstrap框架开发竟然如此便捷，甚至可以几乎不用自己写一点的css演示就可以有一个漂亮美观的页面，其实bootstrap要学的东西不多，大部分在&lt;a href=&quot;https://www.bootcss.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;文档&lt;/a&gt;中找到相应的使用方法就会用了,这篇博客记录一下我在学习之初所做的一些笔记。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Echarts中响应式的完善</title>
    <link href="https://q32757468.github.io/2019/06/13/echarts%E4%B8%AD%E5%93%8D%E5%BA%94%E5%BC%8F%E7%9A%84%E5%AE%8C%E5%96%84/"/>
    <id>https://q32757468.github.io/2019/06/13/echarts中响应式的完善/</id>
    <published>2019-06-13T07:28:40.000Z</published>
    <updated>2019-06-13T12:13:25.283Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前面在学习echarts的时候，发现echarts中是自带响应式的功能的，但是这个响应式的功能和我之前学习的bootstrap有很大的区别，bootstrap中的响应式是会随着网页大小的改变而动态的改变网页的布局以及大小，但是echarts中的响应式虽然也是响应式，但是却没有bootstrap中那样的动态能力，只能是在网页加载或者刷新的时候网页的大小是多大就渲染相应的布局以及大小，虽然也能实现响应式的功能，但是我觉得这在bootstrap中使用的话会很不协调，所以我决定进行一些调整，让echarts中的响应式也能像bootstrap中那样。<br><a id="more"></a></p></blockquote><h3 id="开始构建思路"><a href="#开始构建思路" class="headerlink" title="开始构建思路"></a>开始构建思路</h3><p>起初我以为echarts中的响应式也会像bootstrap中的那样，因为在官网的演示的例子当中就能实现类似的效果，但是我后面发现，那只是官方为了方便演示而加了那样的功能，但是实际上是没有那样的效果的，我开始打算是按照自己的思路写，但是发现遇到很多问题，以及不知道echarts中的定位的实现机制是怎么样的，后面我就查看了一下官方给的示例中的一些代码的变化，随后推断出echarts中的百分比居中是通过对canvas画布的宽度来进行居中的，其他定位也是类似，所以就应该动态的变化canvas画布的宽度以及他父级的宽度，那么就按照这个思路来实现一下吧。</p><h3 id="直接看结果"><a href="#直接看结果" class="headerlink" title="直接看结果"></a>直接看结果</h3><ul><li><p>这一部分是用来控制响应式的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">window</span>).resize(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">// 先获取到页面中和画布部分有关的元素</span></span><br><span class="line">            <span class="comment">// 以及要拿到响应式父级的宽度，并将画布也设置成一样的宽度</span></span><br><span class="line">            <span class="keyword">var</span> $tw=$(<span class="string">'#test'</span>).width();            </span><br><span class="line">            <span class="keyword">var</span> $fc=$(<span class="string">'#test&gt;div:first'</span>);           </span><br><span class="line">            <span class="keyword">var</span> $canvas=$fc.children(<span class="number">0</span>);</span><br><span class="line">            $fc.css(&#123;</span><br><span class="line">                <span class="string">"width"</span>:$tw+<span class="string">'px'</span>,</span><br><span class="line">            &#125;);</span><br><span class="line">            $canvas.css(&#123;</span><br><span class="line">                <span class="string">"width"</span>:$tw+<span class="string">'px'</span>,</span><br><span class="line">            &#125;);</span><br><span class="line">            $canvas.attr(&#123;</span><br><span class="line">              <span class="string">"width"</span>:$tw*<span class="number">1.25</span>,  </span><br><span class="line">            &#125;)   </span><br><span class="line">            <span class="comment">// 然后随着窗口大小的变化去设置图表内容的位置       </span></span><br><span class="line">            $mychart.setOption(&#123;</span><br><span class="line">                media:[</span><br><span class="line">                    &#123;</span><br><span class="line">                        query:&#123;</span><br><span class="line">                            <span class="comment">// maxWidth: 690</span></span><br><span class="line">                        &#125;,</span><br><span class="line">                        option:&#123;</span><br><span class="line">                            series:[</span><br><span class="line">                    &#123;</span><br><span class="line">                        type:<span class="string">'pie'</span>,</span><br><span class="line">                        <span class="comment">// 这里最好用宽度乘小数来表示，到时候转化为百分比的时候比较方便</span></span><br><span class="line">                        center:[$tw*<span class="number">0.5</span>,<span class="string">"50%"</span>]</span><br><span class="line">                    &#125;,        </span><br><span class="line">                ],</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                ]</span><br><span class="line">            &#125;);</span><br><span class="line">            </span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></li><li><p>这一部分是echarts配置部分的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $mychart = echarts.init($(<span class="string">'#test'</span>)[<span class="number">0</span>]);                            </span><br><span class="line">        <span class="keyword">var</span> option=&#123;</span><br><span class="line">            baseOption:&#123;</span><br><span class="line">                legend:&#123;&#125;,</span><br><span class="line">                tooltip:&#123;&#125;,</span><br><span class="line">                dataset:&#123;</span><br><span class="line">                    source:[</span><br><span class="line">                            [<span class="string">'物品'</span>, <span class="string">'销量1'</span>, <span class="string">'销量2'</span>],</span><br><span class="line">                            [<span class="string">"衬衫"</span>, <span class="string">'5'</span>, <span class="string">'20'</span>],</span><br><span class="line">                            [<span class="string">'羊毛衫'</span>, <span class="string">'30'</span>, <span class="string">'40'</span>],</span><br><span class="line">                            [<span class="string">'袜子'</span>, <span class="string">'60'</span>, <span class="string">'80'</span>],</span><br><span class="line">                            [<span class="string">'裤子'</span>, <span class="string">'60'</span>, <span class="string">'50'</span>]</span><br><span class="line">                        ]</span><br><span class="line">                &#125;,</span><br><span class="line">                series:[</span><br><span class="line">                    &#123;</span><br><span class="line">                        type:<span class="string">'pie'</span>,</span><br><span class="line">                        <span class="comment">// center:['50%','50%']</span></span><br><span class="line"></span><br><span class="line">                    &#125;,</span><br><span class="line">                    </span><br><span class="line">                ],</span><br><span class="line">                &#125;,</span><br><span class="line">                media:[</span><br><span class="line">                    &#123;</span><br><span class="line">                        query:&#123;</span><br><span class="line">                            <span class="comment">// maxWidth: 690</span></span><br><span class="line">                        &#125;,</span><br><span class="line">                        option:&#123;</span><br><span class="line">                            legend:&#123;</span><br><span class="line">                            left: ($tw<span class="number">-280</span>)*<span class="number">0.5</span>,</span><br><span class="line">                        &#125;,</span><br><span class="line">                            series:[</span><br><span class="line">                    &#123;</span><br><span class="line">                        type:<span class="string">'pie'</span>,</span><br><span class="line">                        center:[<span class="string">'50%'</span>,<span class="string">'50%'</span>]</span><br><span class="line"></span><br><span class="line">                    &#125;,</span><br><span class="line">                    </span><br><span class="line">                ],</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                ]</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $mychart.setOption(option);</span><br></pre></td></tr></table></figure></li></ul><p>这里可以直接先引入响应式部分的代码，再写配置部分的代码。</p><h3 id="我所遇到的坑"><a href="#我所遇到的坑" class="headerlink" title="我所遇到的坑"></a>我所遇到的坑</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在一开始的时候我无从下手，因为没有接触过类似的东西，但是我想了一整天慢慢的整明白了，大概意思就是这他的位置是在生成的时候就固定住了，想要改变就必须通过动态的去设置他的位置，就需要用到resize方法。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当时我遇到的第一个比较大的坑就时在我设置canvas宽度的时候我发现好像直接修改<code>style</code>里面的<code>width</code>会导致画布里面的内容失真，使得我在很长一段时间内认为不应该从这里下手，直到我查看了官方示例的代码里的元素变化情况之后我才发现原来是canvas画布本身其实还有一个<code>width</code>属性,且这个属性的值基本上是恒等于<code>style</code>里面的那个的<strong>1.25倍</strong>，那么真相就大白了，我又开始从这方面着手了。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当时我遇到的第二个比较大的坑就是我认为我只要动态的改变容器的宽度以及canvas画布的宽度，然后再把图表设置为居中或者将<code>center:[&#39;50%&#39;,&#39;50%&#39;]</code>就可以实现一直居中了，后面经过测试没有效果，百思不得其解，不知道我是哪里出了问题，以为是不是哪里写错了，后面我把百分比的位置改为固定的位置之后就发现其实是可以变化的，那么我就推测其实他里面的百分比的位置所算的宽度并不是当前容器或者canvas的宽度，而是在画布生成时就已经固定了，所以我就改成了我现在所用的这种方法。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;虽然成功的实现了我想要的效果，但是还是感觉不是很满意，还应该继续封装以便重复调用，并且解决这个问题花的时间有点多，思维还是不够灵敏，要继续努力。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;前面在学习echarts的时候，发现echarts中是自带响应式的功能的，但是这个响应式的功能和我之前学习的bootstrap有很大的区别，bootstrap中的响应式是会随着网页大小的改变而动态的改变网页的布局以及大小，但是echarts中的响应式虽然也是响应式，但是却没有bootstrap中那样的动态能力，只能是在网页加载或者刷新的时候网页的大小是多大就渲染相应的布局以及大小，虽然也能实现响应式的功能，但是我觉得这在bootstrap中使用的话会很不协调，所以我决定进行一些调整，让echarts中的响应式也能像bootstrap中那样。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Echarts.js的学习</title>
    <link href="https://q32757468.github.io/2019/06/08/%E5%85%B3%E4%BA%8Eecharts-js%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://q32757468.github.io/2019/06/08/关于echarts-js的使用/</id>
    <published>2019-06-08T14:03:53.000Z</published>
    <updated>2019-06-13T10:50:26.371Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最近在做期末的课程设计的时候需要做一个后台管理界面，所以需要用到一些图标插件，经过搜索我发现有好多的图标插件，最终我决定要使用echarts.js，其中一个很重要的原因就是它是有国内的百度的团队主导开发的一个项目，所以有中文文档，方便我查阅，文档查阅请看<a href="https://echarts.baidu.com" target="_blank" rel="noopener">这里</a><br><a id="more"></a></p></blockquote><h3 id="快速上手echarts-js"><a href="#快速上手echarts-js" class="headerlink" title="快速上手echarts.js"></a>快速上手echarts.js</h3><p>根据官方文档，上手使用echarts.js首先需要先引入js文件，js文件可是直接在官方网站直接下载，在引入js文件之后我们就可以开始使用了，使用之前我们要先创建一个容器，例如：<br><code>&lt;div class=&quot;container&quot; id=&quot;test&quot; style=&quot;height: 400px;&quot;&gt;</code><br>接着之后的就是进行初始化，<br><code>var $mychart=echarts.init($(&#39;#test&#39;)[0]);</code><br><strong>注意，因为我这里是在jQuery中进行初始化的，但是自带的初始化方法必须传一个原生js对象，所以需要将jQuery对象转化为js对象</strong></p><p>然后就可以开始制作图标了：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> $mychart=echarts.init($(<span class="string">'#test'</span>)[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">var</span> option=&#123;</span><br><span class="line">            title:&#123;</span><br><span class="line">                text:<span class="string">'这是一个测试的图表'</span>  <span class="comment">//这是图表的标题</span></span><br><span class="line">            &#125;,</span><br><span class="line">            tooltip:&#123;&#125;,</span><br><span class="line">            legend:&#123;</span><br><span class="line">                data:[<span class="string">'销量'</span>]  <span class="comment">//这个是告诉你表格上所有的数据的类型的那种，也就是右上角的那种东西，现在先这么理解好了，到时候查了文档再详细介绍。</span></span><br><span class="line">            &#125;,</span><br><span class="line">            xAxis:&#123;</span><br><span class="line">                data:[<span class="string">"衬衫"</span>,<span class="string">"羊毛衫"</span>,<span class="string">"袜子"</span>]  <span class="comment">//这个是x轴坐标，也就是横坐标的值</span></span><br><span class="line">            &#125;,</span><br><span class="line">            yAxis:&#123;&#125;,</span><br><span class="line">            series:[&#123;</span><br><span class="line">                name:<span class="string">'销量'</span>,</span><br><span class="line">                type:<span class="string">'bar'</span>,</span><br><span class="line">                data:[<span class="number">5</span>,<span class="number">30</span>,<span class="number">60</span>] <span class="comment">//这里是第一个系列的值</span></span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;;</span><br><span class="line">        $mychart.setOption(option); <span class="comment">//将图表的设置应用</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure></p><p>然后来看一下效果：<br><img src="http://m.qpic.cn/psb?/V131x4904WMIoW/modlggoXIDSu1a2S0dKlFgZtosSITXM1BmkHMFKwD8w!/b/dMAAAAAAAAAA&bo=gAcSBAAAAAADB7M!&rf=viewer_4"></p><h3 id="再来看看一个官方文档中给出的一个南丁格尔图"><a href="#再来看看一个官方文档中给出的一个南丁格尔图" class="headerlink" title="再来看看一个官方文档中给出的一个南丁格尔图"></a>再来看看一个官方文档中给出的一个南丁格尔图</h3><p>我通过官方给出的在线编辑工具，一个个试了一下都是什么作用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">option = &#123;</span><br><span class="line">    backgroundColor: <span class="string">'#2c343c'</span>, <span class="comment">//这个是设置整个图表的背景颜色的。</span></span><br><span class="line">    visualMap: &#123;       <span class="comment">//通过visualmap组件来进行明暗度的映射达到一种有层次感的感觉</span></span><br><span class="line">        show: <span class="literal">false</span>,  <span class="comment">//将这个设置为true的话就会出来一个可以选择的小柱子</span></span><br><span class="line">        min: <span class="number">60</span>,     <span class="comment">//南丁格尔图每个区域的颜色过渡的最小值</span></span><br><span class="line">        max: <span class="number">600</span>,   <span class="comment">//南丁格尔图每个区域颜色过渡的最大值</span></span><br><span class="line">        inRange: &#123;</span><br><span class="line">            colorLightness: [<span class="number">0</span>, <span class="number">1</span>] <span class="comment">//设置整个南丁格尔图的颜色的亮度</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    series : [</span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">'访问来源'</span>,</span><br><span class="line">            type: <span class="string">'pie'</span>,  </span><br><span class="line">            radius: <span class="string">'55%'</span>,  <span class="comment">//设置整个图的大小</span></span><br><span class="line">            data:[</span><br><span class="line">                &#123;<span class="attr">value</span>:<span class="number">235</span>, <span class="attr">name</span>:<span class="string">'视频广告'</span>&#125;,  <span class="comment">//通过键值对的形式来设置数值</span></span><br><span class="line">                &#123;<span class="attr">value</span>:<span class="number">274</span>, <span class="attr">name</span>:<span class="string">'联盟广告'</span>&#125;,</span><br><span class="line">                &#123;<span class="attr">value</span>:<span class="number">310</span>, <span class="attr">name</span>:<span class="string">'邮件营销'</span>&#125;,</span><br><span class="line">                &#123;<span class="attr">value</span>:<span class="number">335</span>, <span class="attr">name</span>:<span class="string">'直接访问'</span>&#125;,</span><br><span class="line">                &#123;<span class="attr">value</span>:<span class="number">400</span>, <span class="attr">name</span>:<span class="string">'搜索引擎'</span>&#125;</span><br><span class="line">            ],</span><br><span class="line">            roseType: <span class="string">'angle'</span>,  <span class="comment">//将普通的饼图切换成南丁格尔图</span></span><br><span class="line">            label: &#123;</span><br><span class="line">                normal: &#123;</span><br><span class="line">                    textStyle: &#123;</span><br><span class="line">                        color: <span class="string">'rgba(255, 255, 255, 0.3)'</span>  <span class="comment">//文本颜色</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            labelLine: &#123;</span><br><span class="line">                normal: &#123;</span><br><span class="line">                    lineStyle: &#123;</span><br><span class="line">                        color: <span class="string">'rgba(255, 255, 255, 0.3)'</span>  <span class="comment">//线的颜色</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            itemStyle: &#123;</span><br><span class="line">                normal: &#123;</span><br><span class="line">                    color: <span class="string">'#c23531'</span>,  <span class="comment">//设置整体的颜色</span></span><br><span class="line">                    shadowBlur: <span class="number">300</span>,  <span class="comment">//设置阴影的模糊度</span></span><br><span class="line">                    shadowColor: <span class="string">'rgba(0, 0, 0, 0.5)'</span>  设置阴影的颜色</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>再来看一下官方的效果图：<br><img src="http://m.qpic.cn/psb?/V131x4904WMIoW/aVHcBJG6xTQBxe0Wu9Myr6NsybPufWsFtuqDLz9CRO0!/b/dAQBAAAAAAAA&bo=XgQiAwAAAAADB1k!&rf=viewer_4"><br>可以看到这个真的很酷！</p><h3 id="异步加载数据"><a href="#异步加载数据" class="headerlink" title="异步加载数据"></a>异步加载数据</h3><p>需要实现异步加载数据其实也很简单，只要利用相关方法就可以轻松实现，比如利用jQuery中的延迟对象中的 <code>done()</code>这个方法就可以轻松实现。<br>以下是官方文档中的一个异步加载数据的实例：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myChart = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">'main'</span>));</span><br><span class="line"><span class="comment">// 显示标题，图例和空的坐标轴</span></span><br><span class="line">myChart.setOption(&#123;</span><br><span class="line">    title: &#123;</span><br><span class="line">        text: <span class="string">'异步数据加载示例'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    tooltip: &#123;&#125;,</span><br><span class="line">    legend: &#123;</span><br><span class="line">        data:[<span class="string">'销量'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    xAxis: &#123;</span><br><span class="line">        data: []</span><br><span class="line">    &#125;,</span><br><span class="line">    yAxis: &#123;&#125;,</span><br><span class="line">    series: [&#123;</span><br><span class="line">        name: <span class="string">'销量'</span>,</span><br><span class="line">        type: <span class="string">'bar'</span>,</span><br><span class="line">        data: []</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步加载数据</span></span><br><span class="line">$.get(<span class="string">'data.json'</span>).done(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 填入数据</span></span><br><span class="line">    myChart.setOption(&#123;</span><br><span class="line">        xAxis: &#123;</span><br><span class="line">            data: data.categories</span><br><span class="line">        &#125;,</span><br><span class="line">        series: [&#123;</span><br><span class="line">            <span class="comment">// 根据名字对应到相应的系列</span></span><br><span class="line">            name: <span class="string">'销量'</span>,</span><br><span class="line">            data: data.data</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>以上例子就是先加载出空的图表，等待数据加载完毕就显示数据。</p><h3 id="使用dataset来管理数据"><a href="#使用dataset来管理数据" class="headerlink" title="使用dataset来管理数据"></a>使用dataset来管理数据</h3><p>我们前面的例子都是普通的数据格式，设置在各个<code>series</code>当中，在数据共享方面存在不足，使用dataset就可以解决这些问题，下面是一个简单的dataset的例子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> option=&#123;</span><br><span class="line">            title:&#123;</span><br><span class="line">                text:<span class="string">'这是一个测试的图表'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            tooltip:&#123;&#125;,</span><br><span class="line">            legend:&#123;&#125;,</span><br><span class="line">            dataset:&#123;</span><br><span class="line">                source:[</span><br><span class="line">                    [<span class="string">'销量'</span>,<span class="string">'销量1'</span>,<span class="string">'销量2'</span>],</span><br><span class="line">                    [<span class="string">"衬衫"</span>,<span class="string">'5'</span>,<span class="string">'20'</span>],</span><br><span class="line">                    [<span class="string">'羊毛衫'</span>,<span class="string">'30'</span>,<span class="string">'40'</span>],</span><br><span class="line">                    [<span class="string">'袜子'</span>,<span class="string">'60'</span>,<span class="string">'80'</span>],</span><br><span class="line">                    [<span class="string">'裤子'</span>,<span class="string">'60'</span>,<span class="string">'50'</span>]</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 声明一个 X 轴，类目轴（category）。默认情况下，类目轴对应到 dataset 第一列。</span></span><br><span class="line">            xAxis:&#123;</span><br><span class="line">                type: <span class="string">'category'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            yAxis:&#123;&#125;,</span><br><span class="line">            <span class="comment">// 声明多个 bar 系列，默认情况下，每个系列会自动对应到 dataset 的每一列。</span></span><br><span class="line">            series:[</span><br><span class="line">                &#123;<span class="attr">type</span>: <span class="string">'bar'</span>&#125;,</span><br><span class="line">                &#123;<span class="attr">type</span>: <span class="string">'bar'</span>&#125;,</span><br><span class="line">            ],</span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure></p><p>通过以上代码也实现了一个简单的图表，但是好处在于数据可以共享，不用重复写，而且我个人更加喜欢这种方式来写数据。<br><img src="http://m.qpic.cn/psb?/V131x4904WMIoW/b6Iklzz*774qdSNWl1NPw0DH2g2.T361lGsKq4nCuYo!/b/dMUAAAAAAAAA&bo=WwXhAQAAAAADB5w!&rf=viewer_4"></p><h4 id="按行还是按列映射"><a href="#按行还是按列映射" class="headerlink" title="按行还是按列映射"></a>按行还是按列映射</h4><p>dataset默认是按列来进行映射，通过比较两种映射的方法，我个人还是更加习惯喜欢默认的按列进行映射,这里就不过多的对二者的差异进行比较。想要详细了解可以前去文档进行查询。</p><h4 id="维度"><a href="#维度" class="headerlink" title="维度"></a>维度</h4><ul><li>常用图表所描述的数据大部分是“二维表”结构，上述的例子中，我们都使用二维数组来容纳二维表。现在，当我们把系列（series）对应到“列”的时候，那么每一列就称为一个“维度（dimension）”，而每一行称为数据项（item）。反之，如果我们把系列（series）对应到表行，那么每一行就是“维度（dimension）”，每一列就是数据项（item）。</li><li>维度可以有单独的名字，便于在图表中显示。维度名（dimension name）可以在定义在 dataset 的第一行（或者第一列）。例如上面的例子中，’score’、’amount’、’product’ 就是维度名。从第二行开始，才是正式的数据。dataset.source 中第一行（列）到底包含不包含维度名，ECharts 默认会自动探测。当然也可以设置 dataset.sourceHeader: true 显示声明第一行（列）就是维度，或者 dataset.sourceHeader: false 表明第一行（列）开始就直接是数据。</li><li>维度的定义，也可以使用单独的 dataset.dimensions 或者 series.dimensions 来定义：<br>第一种是在dataset中设置：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> option1 = &#123;</span><br><span class="line">    dataset: &#123;</span><br><span class="line">        dimensions: [</span><br><span class="line">            &#123;<span class="attr">name</span>: <span class="string">'score'</span>&#125;,</span><br><span class="line">            <span class="comment">// 可以简写为 string，表示维度名。</span></span><br><span class="line">            <span class="string">'amount'</span>,</span><br><span class="line">            <span class="comment">// 可以在 type 中指定维度类型。</span></span><br><span class="line">            &#123;<span class="attr">name</span>: <span class="string">'product'</span>, <span class="attr">type</span>: <span class="string">'ordinal'</span>&#125;</span><br><span class="line">        ],</span><br><span class="line">        source: [...]</span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><p>第二种是在series中设置：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> option1 = &#123;</span><br><span class="line">    dataset: &#123;</span><br><span class="line">        dimensions: [</span><br><span class="line">            &#123;<span class="attr">name</span>: <span class="string">'score'</span>&#125;,</span><br><span class="line">            <span class="comment">// 可以简写为 string，表示维度名。</span></span><br><span class="line">            <span class="string">'amount'</span>,</span><br><span class="line">            <span class="comment">// 可以在 type 中指定维度类型。</span></span><br><span class="line">            &#123;<span class="attr">name</span>: <span class="string">'product'</span>, <span class="attr">type</span>: <span class="string">'ordinal'</span>&#125;</span><br><span class="line">        ],</span><br><span class="line">        source: [...]</span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> option2 = &#123;</span><br><span class="line">    dataset: &#123;</span><br><span class="line">        source: [...]</span><br><span class="line">    &#125;,</span><br><span class="line">    series: &#123;</span><br><span class="line">        type: <span class="string">'line'</span>,</span><br><span class="line">        <span class="comment">// 在系列中设置的 dimensions 会更优先采纳。</span></span><br><span class="line">        dimensions: [</span><br><span class="line">            <span class="literal">null</span>, <span class="comment">// 可以设置为 null 表示不想设置维度名</span></span><br><span class="line">            <span class="string">'amount'</span>,</span><br><span class="line">            &#123;<span class="attr">name</span>: <span class="string">'product'</span>, <span class="attr">type</span>: <span class="string">'ordinal'</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>大部分时候都不需要手动去设置维度类型。但是如果因为数据为空之类原因导致判断不足够准确时，可以手动设置维度类型。<br>具体有哪些类型可以查询<a href="https://echarts.baidu.com/tutorial.html#%E4%BD%BF%E7%94%A8%20dataset%20%E7%AE%A1%E7%90%86%E6%95%B0%E6%8D%AE" target="_blank" rel="noopener">文档</a></p><h4 id="数据到图形的映射（encode）"><a href="#数据到图形的映射（encode）" class="headerlink" title="数据到图形的映射（encode）"></a>数据到图形的映射（encode）</h4><ul><li><code>encode</code> 声明的基本结构如下，其中冒号左边是坐标系、标签等特定名称，如 ‘x’, ‘y’, ‘tooltip’ 等，冒号右边是数据中的维度名（string 格式）或者维度的序号（number 格式，从 0 开始计数），可以指定一个或多个维度（使用数组）。通常情况下，下面各种信息不需要所有的都写，按需写即可。</li><li>使用encode可以将数据按照需要映射到图形。</li><li><code>encode</code>涉及到的知识很多，我们现在来看encode的一个简单的应用。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> option2=&#123;</span><br><span class="line">            <span class="comment">// 设置dataset</span></span><br><span class="line">            dataset:&#123;</span><br><span class="line">                <span class="comment">// 设置好源数据，默认是以列的方式来进行映射，所以要注意好顺序</span></span><br><span class="line">                source:[</span><br><span class="line">                    <span class="comment">// 通过一个二维数组来设置数据</span></span><br><span class="line">                    [<span class="string">'物品'</span>,<span class="string">'销量1'</span>,<span class="string">'销量2'</span>],</span><br><span class="line">                    [<span class="string">"衬衫"</span>,<span class="string">'5'</span>,<span class="string">'20'</span>],</span><br><span class="line">                    [<span class="string">'羊毛衫'</span>,<span class="string">'30'</span>,<span class="string">'40'</span>],</span><br><span class="line">                    [<span class="string">'袜子'</span>,<span class="string">'60'</span>,<span class="string">'80'</span>],</span><br><span class="line">                    [<span class="string">'裤子'</span>,<span class="string">'60'</span>,<span class="string">'50'</span>]</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            xAxis:&#123;&#125;,</span><br><span class="line">            <span class="comment">// 这里将图表设置为横向的柱状图</span></span><br><span class="line">            yAxis:&#123;<span class="attr">type</span>:<span class="string">'category'</span>&#125;,</span><br><span class="line">            <span class="comment">// 设置了两个系列</span></span><br><span class="line">            series:[</span><br><span class="line">                &#123;</span><br><span class="line">                    type:<span class="string">'bar'</span>,</span><br><span class="line">                    <span class="comment">// 通过encode来进行映射</span></span><br><span class="line">                    encode:&#123;</span><br><span class="line">                        <span class="comment">// 将销量映射到x轴</span></span><br><span class="line">                        x:<span class="string">'销量1'</span>,</span><br><span class="line">                        <span class="comment">// 将物品的类型映射到y轴</span></span><br><span class="line">                        y:<span class="string">'物品'</span>,</span><br><span class="line">                        <span class="comment">// 这里也可以通过索引来进行映射，就可以实现动态变更数据，但是要注意的一件事是索引是从0开始的。</span></span><br><span class="line">                        tooltip: [<span class="number">1</span>, <span class="number">2</span>]  <span class="comment">//也可以映射tooltip，现在还不知道是干什么的</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    type:<span class="string">'bar'</span>,</span><br><span class="line">                    encode:&#123;</span><br><span class="line">                        x:<span class="string">'销量2'</span>,</span><br><span class="line">                        y:<span class="string">'物品'</span>,</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li></ul><p>这里还看一下效果：<br><img src="http://m.qpic.cn/psb?/V131x4904WMIoW/cwvwewTqRW1kd5KKMudwqewDGl5Yn5L2ioeJNOpkgfI!/b/dDYBAAAAAAAA&bo=HgXKAQAAAAADB*I!&rf=viewer_4"></p><ul><li><code>encode</code>也还有很多其他的注意事项，这里就不一一介绍了，有需要可以查询文档</li></ul><h4 id="数据的各种格式"><a href="#数据的各种格式" class="headerlink" title="数据的各种格式"></a>数据的各种格式</h4><ul><li>常见的图表中，保存数据的方式是通过二维表的形式来保存的，广为熟知的数据图表表格软件也都是通过二维表，这些数据也都可以转化为json格式，<strong>网络上有很多互相转换的方法</strong>，如果转化为csv格式的文件，那么可以使用一些 csv 工具如 dsv 或者 PapaParse 将 csv 转成 JSON。</li><li>在js中比较直观常见的二维格式就是二维数组了，之前前面的所有例子都是通过二维数组来存储数据的</li><li><p>除了二维数组之外比较常见的二维形式就是对象数组了，也就是键值对的形式，比如上面的例子可以这样写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">source:[</span><br><span class="line">    <span class="comment">// 按行的形式</span></span><br><span class="line">    &#123;<span class="string">'物品:'</span>衬衫<span class="string">','</span>销量<span class="number">1</span><span class="string">':5,'</span>销量<span class="number">2</span><span class="string">':20&#125;,</span></span><br><span class="line"><span class="string">    &#123;'</span>物品:<span class="string">'羊毛衫'</span>,<span class="string">'销量1'</span>:<span class="number">30</span>,<span class="string">'销量2'</span>:<span class="number">40</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'物品:'</span>袜子<span class="string">','</span>销量<span class="number">1</span><span class="string">':60,'</span>销量<span class="number">2</span><span class="string">':80&#125;,</span></span><br><span class="line"><span class="string">    &#123;'</span>物品:<span class="string">'裤子'</span>,<span class="string">'销量1'</span>:<span class="number">60</span>,<span class="string">'销量2'</span>:<span class="number">50</span>&#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>还有按列的形式这里就不演示了</p></li><li>个人觉得二维数组的形式写起来会更加的简单方便一些，所以我更加的喜欢二维数组的方式</li></ul><h4 id="设置多个datase（设置多个source）"><a href="#设置多个datase（设置多个source）" class="headerlink" title="设置多个datase（设置多个source）"></a>设置多个datase（设置多个source）</h4><p>可以同时设置多组数据，然后决定使用哪一组数据：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> option = &#123;</span><br><span class="line">    dataset: [&#123;</span><br><span class="line">        <span class="comment">// 序号为 0 的 dataset。</span></span><br><span class="line">        source: [...],</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="comment">// 序号为 1 的 dataset。</span></span><br><span class="line">        source: [...]</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="comment">// 序号为 2 的 dataset。</span></span><br><span class="line">        source: [...]</span><br><span class="line">    &#125;],</span><br><span class="line">    series: [&#123;</span><br><span class="line">        <span class="comment">// 使用序号为 2 的 dataset。</span></span><br><span class="line">        datasetIndex: <span class="number">2</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="comment">// 使用序号为 1 的 dataset。</span></span><br><span class="line">        datasetIndex: <span class="number">1</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="其他事项"><a href="#其他事项" class="headerlink" title="其他事项"></a>其他事项</h4><ul><li>根据官方文档，现在并不是所有的图表类型都支持dataset</li><li>官方还给了一个多个图表共享一个dataset的例子，并且有联动效果，目前还看不懂是怎么会是</li><li>想要了解更多可以前往官方文档进行查看</li></ul><h3 id="图表组件"><a href="#图表组件" class="headerlink" title="图表组件"></a>图表组件</h3><p>echarts中有很多组件，现在就按照官方文档中的示例来先介绍一下dataZoom组件，这个组件可以将图表进行放大缩小以及拖动查看，还是很有用的，现在按照官方文档中的例子来试一试:<br>** 先是没有datazoom的散点图<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> option3=&#123;</span><br><span class="line">            xAxis:&#123;</span><br><span class="line">                type:<span class="string">'value'</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            yAxis:&#123;</span><br><span class="line">                type:<span class="string">'value'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            series:[</span><br><span class="line">                &#123;</span><br><span class="line">                    name:<span class="string">'test'</span>,</span><br><span class="line">                    type:<span class="string">'scatter'</span>, <span class="comment">//设置这个为散点图</span></span><br><span class="line">                    data: [[<span class="string">"14.616"</span>,<span class="string">"7.241"</span>,<span class="string">"0.896"</span>],[<span class="string">"3.958"</span>,<span class="string">"5.701"</span>,<span class="string">"0.955"</span>],[<span class="string">"2.768"</span>,<span class="string">"8.971"</span>,<span class="string">"0.669"</span>],[<span class="string">"9.051"</span>,<span class="string">"9.710"</span>,<span class="string">"0.171"</span>],[<span class="string">"14.046"</span>,<span class="string">"4.182"</span>,<span class="string">"0.536"</span>],[<span class="string">"12.295"</span>,<span class="string">"1.429"</span>,<span class="string">"0.962"</span>],[<span class="string">"4.417"</span>,<span class="string">"8.167"</span>,<span class="string">"0.113"</span>],[<span class="string">"0.492"</span>,<span class="string">"4.771"</span>,<span class="string">"0.785"</span>],[<span class="string">"7.632"</span>,<span class="string">"2.605"</span>,<span class="string">"0.645"</span>],[<span class="string">"14.242"</span>,<span class="string">"5.042"</span>,<span class="string">"0.368"</span>]]</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><ul><li>现在加上datazoom组件<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dataZoom: [&#123; <span class="comment">// 这个dataZoom组件，默认控制x轴。</span></span><br><span class="line">                    type: <span class="string">'slider'</span>, <span class="comment">// 这个 dataZoom 组件是 slider 型 dataZoom 组件</span></span><br><span class="line">                    start: <span class="number">10</span>, <span class="comment">// 左边在 10% 的位置。</span></span><br><span class="line">                    end: <span class="number">60</span> <span class="comment">// 右边在 60% 的位置。</span></span><br><span class="line">                &#125;],</span><br></pre></td></tr></table></figure></li></ul><p>来看下效果图：<br><img src="http://m.qpic.cn/psb?/V131x4904WMIoW/NHVrw*69j8C.LH4Bm6taq7Q5P3ZHuAXS.dLd8hQlDgU!/b/dLgAAAAAAAAA&bo=kgUgAgAAAAADB5c!&rf=viewer_4"><br><strong>可以看出现在有了一个可以拖动的条，但是还不能进行缩放</strong></p><ul><li>如果要可以进行缩放就需要再加上一个组件<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;   <span class="comment">// 这个dataZoom组件，也控制x轴。</span></span><br><span class="line">            type: <span class="string">'inside'</span>, <span class="comment">// 这个 dataZoom 组件是 inside 型 dataZoom 组件</span></span><br><span class="line">            start: <span class="number">10</span>,      <span class="comment">// 左边在 10% 的位置。</span></span><br><span class="line">            end: <span class="number">60</span>         <span class="comment">// 右边在 60% 的位置。</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li></ul><p>加上以后就可以进行缩放了<br>**这里只以x轴为例子进行了演示，y轴也是一样的方法。</p><h3 id="响应式图表"><a href="#响应式图表" class="headerlink" title="响应式图表"></a>响应式图表</h3><p>echarts中支持响应式图表，也是通过类似于媒体查询来实现的，这十分有用，因为我们的项目可能是用bootstrap来制作，那么在这种情况下响应式是必不可少的。</p><h4 id="echarts组件的定位和布局"><a href="#echarts组件的定位和布局" class="headerlink" title="echarts组件的定位和布局"></a>echarts组件的定位和布局</h4><p>echarts中有两种定位方式：</p><ul><li><strong>left/right/top/bottom/width/height 定位方式：</strong><br>例如：<code>{left: 23, height: 400}</code>，可以不写单位，还可以写成百分比的形式，<code>{left: 30%, height: 40%}</code><br>可以设置 <code>left: &#39;center&#39;</code>，表示水平居中。<br>可以设置 <code>top: &#39;middle&#39;</code>，表示垂直居中。</li></ul><p>在横向，left、right、width 三个量中，只需两个量有值即可，因为任两个量可以决定组件的位置和大小，例如 left 和 right 或者 right 和 width 都可以决定组件的位置和大小。 纵向，top、bottom、height 三个量，和横向类同不赘述。</p><ul><li><strong>center / radius 定位方式：</strong><br>center<br>是一个数组，表示 [x, y]，其中，x、y可以是『绝对值』或者『百分比』，含义和前述相同。<br>radius<br>是一个数组，表示 [内半径, 外半径]，其中，内外半径可以是『绝对值』或者『百分比』，含义和前述相同。<br>在自适应容器大小时，百分比设置是很有用的。</li></ul><h4 id="图表的方向"><a href="#图表的方向" class="headerlink" title="图表的方向"></a>图表的方向</h4><p>在echarts中有一些图表可能会很长，在pc端可以较好的显示，在移动端就不一定能够很好的显示了，所以就需要设置他们的方向：<br>横纵向布局的设置，一般在『组件』或者『系列』的 <strong>orient</strong> 或者 <strong>layout</strong> 配置项上，设置为 <code>&#39;horizontal&#39;</code> 或者 <code>&#39;vertical&#39;</code>。</p><h4 id="实现响应式"><a href="#实现响应式" class="headerlink" title="实现响应式"></a>实现响应式</h4><p>前面有说到echarts中实现响应式是通过类似媒体查询来实现的，这就是echarts中的  <strong>Media Query</strong><br>在option中Media Query 的基本格式：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">option = &#123;</span><br><span class="line">    baseOption: &#123; <span class="comment">// 这里是基本的『原子option』。也就是用来设置一些通用的基本的与响应式无关的选项</span></span><br><span class="line">        title: &#123;...&#125;,</span><br><span class="line">        legend: &#123;...&#125;,</span><br><span class="line">        series: [&#123;...&#125;, &#123;...&#125;, ...],</span><br><span class="line">        ...</span><br><span class="line">    &#125;,</span><br><span class="line">    media: [ <span class="comment">// 这里定义了 media query 的逐条规则。</span></span><br><span class="line">        &#123;</span><br><span class="line">            query: &#123;...&#125;,   <span class="comment">// 这里写规则。</span></span><br><span class="line">            option: &#123;       <span class="comment">// 这里写此规则满足下的option。</span></span><br><span class="line">                legend: &#123;...&#125;,</span><br><span class="line">                ...</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            query: &#123;...&#125;,   <span class="comment">// 第二个规则。</span></span><br><span class="line">            option: &#123;       <span class="comment">// 第二个规则对应的option。</span></span><br><span class="line">                legend: &#123;...&#125;,</span><br><span class="line">                ...</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;                   <span class="comment">// 这条里没有写规则，表示『默认』，</span></span><br><span class="line">            option: &#123;       <span class="comment">// 即所有规则都不满足时，采纳这个option。</span></span><br><span class="line">                legend: &#123;...&#125;,</span><br><span class="line">                ...</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><strong>query</strong>的格式：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    minWidth: <span class="number">200</span>,<span class="comment">//设置响应式的最小宽度，表示大于200px就是这个option</span></span><br><span class="line">    maxHeight: <span class="number">300</span>,<span class="comment">//设置响应式的最大宽度</span></span><br><span class="line">    minAspectRatio: <span class="number">1.3</span><span class="comment">//设置响应式的长宽比</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>多个query被满足时的优先级</strong><br>后面的覆盖前面的</p><p><strong>默认 query：</strong><br>如果 media 中有某项不写 query，则表示『默认值』，即所有规则都不满足时，采纳这个option。</p><p><strong>容器大小实时变化时的注意事项</strong><br>如果要一直动态的改变容器的大小并且让图表的大小也随之改变，那就必须注意<code>query option</code>中出现的配置项，其他<code>query option</code>也必须出现，防止出现回不去的情况。</p><p><strong>关于Echarts响应式还有一件需要注意的事情</strong><br>Echarts.js中虽然有类似响应式的支持，但是这与bootstrap中的响应式有很大不同，echarts中自带的响应式不能像bootstrap中那样随着窗口大小的改变而实时的更改图表的位置以及大小，只有在网页刷新的时候或者再一次setoption的时候才会有位置或者大小的变更，虽然这也能达到响应式的目的，但是我觉得这在bootstrap中会显得十分的不协调，所以我针对这一方面进行了改进，下篇文章进行详细介绍。</p><h3 id="echarts中的事件和行为"><a href="#echarts中的事件和行为" class="headerlink" title="echarts中的事件和行为"></a>echarts中的事件和行为</h3><p>echarts中自带了很多的事件和行为，我们可以通过<code>on</code>的方法来绑定。<br>例如下面的代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这是一个echarts中的单击事件，单击图表之后在控制台打印数据</span></span><br><span class="line">myChart.on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">params</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 控制台打印数据的名称</span></span><br><span class="line">    <span class="built_in">console</span>.log(params.name);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>echarts中还有很多的事件，这里就不一一介绍了，这里再说一下鼠标事件返回的参数<code>params</code><br>,这个参数是一个图形的数据信息对象，格式如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 当前点击的图形元素所属的组件名称，</span></span><br><span class="line">    <span class="comment">// 其值如 'series'、'markLine'、'markPoint'、'timeLine' 等。</span></span><br><span class="line">    componentType: string,</span><br><span class="line">    <span class="comment">// 系列类型。值可能为：'line'、'bar'、'pie' 等。当 componentType 为 'series' 时有意义。</span></span><br><span class="line">    seriesType: string,</span><br><span class="line">    <span class="comment">// 系列在传入的 option.series 中的 index。当 componentType 为 'series' 时有意义。</span></span><br><span class="line">    seriesIndex: number,</span><br><span class="line">    <span class="comment">// 系列名称。当 componentType 为 'series' 时有意义。</span></span><br><span class="line">    seriesName: string,</span><br><span class="line">    <span class="comment">// 数据名，类目名</span></span><br><span class="line">    name: string,</span><br><span class="line">    <span class="comment">// 数据在传入的 data 数组中的 index</span></span><br><span class="line">    dataIndex: number,</span><br><span class="line">    <span class="comment">// 传入的原始数据项</span></span><br><span class="line">    data: <span class="built_in">Object</span>,</span><br><span class="line">    <span class="comment">// sankey、graph 等图表同时含有 nodeData 和 edgeData 两种 data，</span></span><br><span class="line">    <span class="comment">// dataType 的值会是 'node' 或者 'edge'，表示当前点击在 node 还是 edge 上。</span></span><br><span class="line">    <span class="comment">// 其他大部分图表中只有一种 data，dataType 无意义。</span></span><br><span class="line">    dataType: string,</span><br><span class="line">    <span class="comment">// 传入的数据值</span></span><br><span class="line">    value: number|<span class="built_in">Array</span></span><br><span class="line">    <span class="comment">// 数据图形的颜色。当 componentType 为 'series' 时有意义。</span></span><br><span class="line">    color: string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>**echarts中事件与行为更为详细的信息可以查阅相关的<a href="https://echarts.baidu.com/tutorial.html#ECharts%20%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%92%8C%E8%A1%8C%E4%B8%BA" target="_blank" rel="noopener">文档</a>，这里就不详细说明了</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>到这里就介绍了echarts中的一些基本的概念以及信息，还不是特别全面，算是稍微认识了一下echarts，echarts的功能十分的强大可自定义的程度也是非常的高，官方文档有非常详细的配置项介绍，如果感兴趣的话可以慢慢去学习。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;最近在做期末的课程设计的时候需要做一个后台管理界面，所以需要用到一些图标插件，经过搜索我发现有好多的图标插件，最终我决定要使用echarts.js，其中一个很重要的原因就是它是有国内的百度的团队主导开发的一个项目，所以有中文文档，方便我查阅，文档查阅请看&lt;a href=&quot;https://echarts.baidu.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这里&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>关于animate.css与wow.js的使用</title>
    <link href="https://q32757468.github.io/2019/06/05/%E5%85%B3%E4%BA%8Eanimate-css%E4%B8%8Ewow-js%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://q32757468.github.io/2019/06/05/关于animate-css与wow-js的使用/</id>
    <published>2019-06-05T10:26:37.000Z</published>
    <updated>2019-06-05T12:03:13.911Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在实际的网站开发过程中或多或少的都会使用到一些动画功能，所以学会使用动画是必不可少的，前面我们已经学习过了jQuery中的一些动画相关方面的方法，并且学习了自定义动画，可以帮我们做出我们想要的动画，当时使用这些动画还是不够简单方便，其实在网上已经有很多动画相关的扩展，我们只需要调用即可简单的实现一些常用的动画，这次就来学习一下animate.css以及wow.js的使用。<br><a id="more"></a></p></blockquote><h3 id="animate-css"><a href="#animate-css" class="headerlink" title="animate.css"></a>animate.css</h3><ul><li>animate.css是一款常见的css库，包含了很多的常见动画，使用起来也是十分的简单方便，只需要将animate.css文件引入到我们的项目中即可<br><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;./../../css/animate.css/animate.css&quot;&gt;</code> </li><li>引入进来以后我们想要使用动画也是十分的简单，只需要给我们想要添加动画的元素添加上类即可，例如：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-6 p-5 bg-danger animated bounce"</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>这样我们就很轻松的给这个元素加上了一个弹起动画</p><ul><li><p>那么我们要如何给动画设置一些属性呢，比如说像延时，动画时间之类的呢<br>一种方法是通过css样式去覆盖原有的属性:<br>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-6 p-5 bg-danger animated bounce"</span> <span class="attr">style</span>=<span class="string">"animation-delay: 5s;animation-duration: 3s"</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>以下是常用的设置：</p><table>        <tr>            <td>animation-duration</td>            <td>规定完成动画所花费的时间，以秒或毫秒计。</td>        </tr>        <tr>            <td><a href="http://www.w3school.com.cn/cssref/pr_animation-timing-function.asp" target="_blank" rel="noopener">animation-timing-function</a></td>            <td>规定动画的速度曲线。</td>        </tr>        <tr>            <td>animation-delay</td>            <td>规定在动画开始之前的延迟。</td>        </tr>        <tr>            <td>animation-iteration-count</td>            <td>规定动画应该播放的次数。</td>        </tr></table><p>通过这种办法我们就可以对动画进行一些设置</p></li><li><p>那么还有一种办法就是使用js对其进行设置<br>在网上有一款js插件就是基于animate.css的js动画插件，用法其实是和animate.css是差不多的，但是可以直接设置动画相关的一些属性，使用起来可能会稍微方便那么一点点，因为不用特地再去设置css。</p></li></ul><h3 id="wow-js"><a href="#wow-js" class="headerlink" title="wow.js"></a>wow.js</h3><p>上面提到的那款js插件就是wow.js，它是基于animate.css制作的，所以使用它需要在网页中引入animate.css，用法与animate.css相似：</p><ul><li>使用之前需要先进行初始化：<br><code>new WOW().init();</code></li><li>给需要设置动画的元素添加上<code>wow</code>、<code>animate</code>类即可添加上动画，此处的animate指的是animate.css中支持的动画名称。例如：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-6 p-5 bg-light wow fadeInLeft"</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>通过这样的设置就可以轻松的将动画轻松的应用到元素上面</p><ul><li>通过wow.js对动画进行相关的设置是比较轻松的：<br>data-wow-duration （动画持续时间）<br>data-wow-delay （动画延迟时间）<br>data-wow-offset（元素的位置露出后距离底部多少像素执行）<br>data-wow-iteration（动画执行次数）</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;给元素添加动画的方法有很多，可以自己用css编写，或者js编写，也可以直接用网上众多的动画库，今天我这里就介绍了两款动画库。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;那么该用哪个呢，其实我个人更倾向于直接使用animate.css，因为不用引入其他更多的文件，虽然设置属性的时候不如wow.js方便，但是文件更少，并且可以只取自己想要的动画。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在实际的网站开发过程中或多或少的都会使用到一些动画功能，所以学会使用动画是必不可少的，前面我们已经学习过了jQuery中的一些动画相关方面的方法，并且学习了自定义动画，可以帮我们做出我们想要的动画，当时使用这些动画还是不够简单方便，其实在网上已经有很多动画相关的扩展，我们只需要调用即可简单的实现一些常用的动画，这次就来学习一下animate.css以及wow.js的使用。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
